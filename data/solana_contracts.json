{
    "-5": {
        "contract_address": "HwPtbFpd3VTe3tfyosoVtPf9WPuSk5gAKkN5xp6Npump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HwPtbFpd3VTe3tfyosoVtPf9WPuSk5gAKkN5xp6Npump",
            "standard": "metaplex",
            "name": "\ud83d\udfe5\ud83d\udfea\ud83d\udfe6\ud83d\udfe9\ud83d\udfe8\ud83d\udfe7",
            "symbol": "\ud83d\udfe5\ud83d\udfe9",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HwPtbFpd3VTe3tfyosoVtPf9WPuSk5gAKkN5xp6Npump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSuKgLyLsnyQmng5tEEUF4bMi9BXAoBFLYQYc2YE85wHe",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "645331.18",
            "totalSupply": "999662575995688",
            "totalSupplyFormatted": "999662575.995688",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/EpilepticSOL",
                "twitter": "https://twitter.com/EpilepticSOL",
                "website": "https://epilepticsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/HwPtbFpd3VTe3tfyosoVtPf9WPuSk5gAKkN5xp6Npump"
            },
            "description": null
        }
    },
    "-6": {
        "contract_address": "9qriMjPPAJTMCtfQnz7Mo9BsV2jAWTr2ff7yc3JWpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9qriMjPPAJTMCtfQnz7Mo9BsV2jAWTr2ff7yc3JWpump",
            "standard": "metaplex",
            "name": "\u3000",
            "symbol": "\u3000",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9qriMjPPAJTMCtfQnz7Mo9BsV2jAWTr2ff7yc3JWpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPatUYq7gZirhDibJNRb76p4tBpNR7Px6VFmSjspo3YqL",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3860109.74",
            "totalSupply": "629471565185625",
            "totalSupplyFormatted": "629471565.185625",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/9qriMjPPAJTMCtfQnz7Mo9BsV2jAWTr2ff7yc3JWpump"
            },
            "description": null
        }
    },
    "-7": {
        "contract_address": "J2bUGZDxRDpsVfjZqKwn6yYCUKFmqzHgt8UajhGtpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "J2bUGZDxRDpsVfjZqKwn6yYCUKFmqzHgt8UajhGtpump",
            "standard": "metaplex",
            "name": "\u2205",
            "symbol": "\u2205",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_J2bUGZDxRDpsVfjZqKwn6yYCUKFmqzHgt8UajhGtpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmespmbmiZDkRXyrgaKMDnCZAh8SHnJ94jm72TcPGkVPsg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "354447.70",
            "totalSupply": "959660434790443",
            "totalSupplyFormatted": "959660434.790443",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/vvooiiiddd",
                "twitter": "https://x.com/voidifyio",
                "website": "https://voidify.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/J2bUGZDxRDpsVfjZqKwn6yYCUKFmqzHgt8UajhGtpump"
            },
            "description": null
        }
    },
    "1-squirrel": {
        "contract_address": "bGxHNbsacaVL35pkYWae5PYQDZXSpuQb3QDyW31pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "bGxHNbsacaVL35pkYWae5PYQDZXSpuQb3QDyW31pump",
            "standard": "metaplex",
            "name": "#1 TikTok Squirrel",
            "symbol": "Peanut",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_bGxHNbsacaVL35pkYWae5PYQDZXSpuQb3QDyW31pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmW41cBdQaLF4gd7YQJAAeELn6PQRULzs4Tc28DbkztckT",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "312715.19",
            "totalSupply": "999907879526097",
            "totalSupplyFormatted": "999907879.526097",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/bGxHNbsacaVL35pkYWae5PYQDZXSpuQb3QDyW31pump"
            },
            "description": null
        }
    },
    "23-turtles": {
        "contract_address": "G63cwb95F2Bq34jFwwyUpYqLb5YCMF9XgJ4gJVJTpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "G63cwb95F2Bq34jFwwyUpYqLb5YCMF9XgJ4gJVJTpump",
            "standard": "metaplex",
            "name": "23 Turtles",
            "symbol": "AI23T",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_G63cwb95F2Bq34jFwwyUpYqLb5YCMF9XgJ4gJVJTpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSpLJGjacggQLSELk2pj2DSeZmqzT9wuvWruwzEUnauMe",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1733337.96",
            "totalSupply": "999994782982451",
            "totalSupplyFormatted": "999994782.982451",
            "links": {
                "twitter": "https://twitter.com/Ai23Turtles",
                "website": "https://www.turtles.fun",
                "moralis": "https://moralis.com/chain/solana/token/price/G63cwb95F2Bq34jFwwyUpYqLb5YCMF9XgJ4gJVJTpump"
            },
            "description": null
        }
    },
    "360noscope420blazeit": {
        "contract_address": "7XJiwLDrjzxDYdZipnJXzpr1iDTmK55XixSFAa7JgNEL",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7XJiwLDrjzxDYdZipnJXzpr1iDTmK55XixSFAa7JgNEL",
            "standard": "metaplex",
            "name": "360noscope420blazeit",
            "symbol": "MLG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7XJiwLDrjzxDYdZipnJXzpr1iDTmK55XixSFAa7JgNEL",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreib4qclyuhep7qqdzscavwti3z3mz5kyvhtjzy5ulnubliwg5r2dtq.ipfs.nftstorage.link/",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "6MMLoJhtf2P1dh1uuJnTxVPe9i1B3xLbahe6FdP9kmrC",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "11089649.44",
            "totalSupply": "997537331245251",
            "totalSupplyFormatted": "997537331.245251",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7XJiwLDrjzxDYdZipnJXzpr1iDTmK55XixSFAa7JgNEL"
            },
            "description": null
        }
    },
    "888-token": {
        "contract_address": "888R77WmcLJKyGeJjk1WktFAB5u5fkvmokHYsAu6Spyd",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "888R77WmcLJKyGeJjk1WktFAB5u5fkvmokHYsAu6Spyd",
            "standard": "metaplex",
            "name": "888",
            "symbol": "888",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_888R77WmcLJKyGeJjk1WktFAB5u5fkvmokHYsAu6Spyd",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://raw.githubusercontent.com/888memeT/888-metadata-meme/refs/heads/master/metadata.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "888dSHvbyx2bxQvmbAehB6t3fyZKaCQDUyaxSw8cT9cr",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "4163844.37",
            "totalSupply": "88854235870038517",
            "totalSupplyFormatted": "88854235.870038517",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/lfg888pump",
                "twitter": "https://twitter.com/888pump",
                "website": "https://888.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/888R77WmcLJKyGeJjk1WktFAB5u5fkvmokHYsAu6Spyd"
            },
            "description": null
        }
    },
    "8chan": {
        "contract_address": "9fcfqnpSW3ifkZeaRS19uHeovDRBLy57V89zh2rtpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9fcfqnpSW3ifkZeaRS19uHeovDRBLy57V89zh2rtpump",
            "standard": "metaplex",
            "name": "8 Chan",
            "symbol": "8CHAN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9fcfqnpSW3ifkZeaRS19uHeovDRBLy57V89zh2rtpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPYoirv9ZqKpQQE2nRaEyeFsPVhf6mEuj5EtLM3raGD4U",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "375604.96",
            "totalSupply": "451319702245913",
            "totalSupplyFormatted": "451319702.245913",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/9fcfqnpSW3ifkZeaRS19uHeovDRBLy57V89zh2rtpump"
            },
            "description": null
        }
    },
    "abi": {
        "contract_address": "F2w7z5sVe72SXnkj5qc48KXgXY2Pzj1fNtJXarmGpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F2w7z5sVe72SXnkj5qc48KXgXY2Pzj1fNtJXarmGpump",
            "standard": "metaplex",
            "name": "Abi",
            "symbol": "Abi",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_F2w7z5sVe72SXnkj5qc48KXgXY2Pzj1fNtJXarmGpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTDSQs6sHsQCMtTS9QQ5F73NntKYNcsXvPpdqyATYbXwM",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "181348.41",
            "totalSupply": "999980200533415",
            "totalSupplyFormatted": "999980200.533415",
            "links": {
                "email": "info@abicommunity.io",
                "telegram": "https://t.me/abicommunityofficial",
                "twitter": "https://x.com/Abicommunity",
                "website": "https://abicommunity.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/F2w7z5sVe72SXnkj5qc48KXgXY2Pzj1fNtJXarmGpump"
            },
            "description": null
        }
    },
    "academic-labs": {
        "contract_address": "8W3DbYbLY1zWXm6YDqfPYFpyKsjytD5vhhPN2AyNVdM9",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8W3DbYbLY1zWXm6YDqfPYFpyKsjytD5vhhPN2AyNVdM9",
            "standard": "metaplex",
            "name": "Academic Labs",
            "symbol": "AAX",
            "logo": null,
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/MBEyR9TMrwQHNVB-XWS8Li0Y3X_e2yEu1bWd8NLvxuw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HeRmHy7yA2SV1Cac2EcriYZbeVMbRYR1puRGdzNUQgoQ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": null,
            "totalSupply": "4999989979430227",
            "totalSupplyFormatted": "4999989979.430227",
            "links": null,
            "description": null
        }
    },
    "access-protocol": {
        "contract_address": "5MAYDfq5yxtudAhtfyuMBuHZjgAbaS9tbEyEQYAhDS5y",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5MAYDfq5yxtudAhtfyuMBuHZjgAbaS9tbEyEQYAhDS5y",
            "standard": "metaplex",
            "name": "Access Protocol",
            "symbol": "ACS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5MAYDfq5yxtudAhtfyuMBuHZjgAbaS9tbEyEQYAhDS5y",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://accessprotocol.s3.eu-central-1.amazonaws.com/testing_token.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8Ea1ej6Hxd1QdFvT2aNpRMz2UwZZGj8udpzjY767iYd",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "146098196.76",
            "totalSupply": "88535078903896788",
            "totalSupplyFormatted": "88535078903.896788",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/5MAYDfq5yxtudAhtfyuMBuHZjgAbaS9tbEyEQYAhDS5y"
            },
            "description": null
        }
    },
    "ace-data-cloud": {
        "contract_address": "GEuuznWpn6iuQAJxLKQDVGXPtrqXHNWTk3gZqqvJpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GEuuznWpn6iuQAJxLKQDVGXPtrqXHNWTk3gZqqvJpump",
            "standard": "metaplex",
            "name": "Ace Data Cloud",
            "symbol": "ACE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GEuuznWpn6iuQAJxLKQDVGXPtrqXHNWTk3gZqqvJpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTswdAk2xB9TgopZngUc4quwUEP99Rz5v64WBQ63E4Kdk",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "932291.35",
            "totalSupply": "999881326049518",
            "totalSupplyFormatted": "999881326.049518",
            "links": {
                "github": "https://github.com/germey",
                "twitter": "https://twitter.com/acedatacloud",
                "website": "https://platform.acedata.cloud/",
                "moralis": "https://moralis.com/chain/solana/token/price/GEuuznWpn6iuQAJxLKQDVGXPtrqXHNWTk3gZqqvJpump"
            },
            "description": null
        }
    },
    "act-i-the-ai-prophecy": {
        "contract_address": "GJAFwWjJ3vnTsrQVabjBVK2TYB1YtRCQXRDfDgUnpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GJAFwWjJ3vnTsrQVabjBVK2TYB1YtRCQXRDfDgUnpump",
            "standard": "metaplex",
            "name": "Act I : The AI Prophecy",
            "symbol": "ACT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GJAFwWjJ3vnTsrQVabjBVK2TYB1YtRCQXRDfDgUnpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmapPN3ZaZTKQ7XYmEDjh75j2V83dcBoNg8FTQrZGEGcAE",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "182567234.45",
            "totalSupply": "948245666208701",
            "totalSupplyFormatted": "948245666.208701",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/actportal",
                "twitter": "https://twitter.com/ACTICOMMUNITY",
                "website": "https://pump.fun/GJAFwWjJ3vnTsrQVabjBVK2TYB1YtRCQXRDfDgUnpump",
                "moralis": "https://moralis.com/chain/solana/token/price/GJAFwWjJ3vnTsrQVabjBVK2TYB1YtRCQXRDfDgUnpump"
            },
            "description": null
        }
    },
    "ada-the-dog": {
        "contract_address": "E4Q5pLaEiejwEQHcM9GeYSQfMyGy8DJ4bPWgeYthn24v",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "E4Q5pLaEiejwEQHcM9GeYSQfMyGy8DJ4bPWgeYthn24v",
            "standard": "metaplex",
            "name": "Ada",
            "symbol": "ADA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_E4Q5pLaEiejwEQHcM9GeYSQfMyGy8DJ4bPWgeYthn24v",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/eOP9BjPT8of3ztg3Rku_pVmsPSzEz4C7BVfpYGEcZq0",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FTba2trtnv79RwJ1XjKWRwA9L1ezNAHmRcW31c4bGVQZ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "421657.33",
            "totalSupply": "999818206604842131",
            "totalSupplyFormatted": "999818206.604842131",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/E4Q5pLaEiejwEQHcM9GeYSQfMyGy8DJ4bPWgeYthn24v"
            },
            "description": null
        }
    },
    "adrena": {
        "contract_address": "AuQaustGiaqxRvj2gtCdrd22PBzTn8kM3kEPEkZCtuDw",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AuQaustGiaqxRvj2gtCdrd22PBzTn8kM3kEPEkZCtuDw",
            "standard": "metaplex",
            "name": "Adrena Governance Token",
            "symbol": "ADX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AuQaustGiaqxRvj2gtCdrd22PBzTn8kM3kEPEkZCtuDw",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "4o3qAErcapJ6gRLh1m1x4saoLLieWDu7Rx3wpwLc7Zk9",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3112048.35",
            "totalSupply": "180827816633763",
            "totalSupplyFormatted": "180827816.633763",
            "links": {
                "github": "https://github.com/AdrenaFoundation",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/AdrenaProtocol",
                "website": "https://www.adrena.xyz",
                "moralis": "https://moralis.com/chain/solana/token/price/AuQaustGiaqxRvj2gtCdrd22PBzTn8kM3kEPEkZCtuDw"
            },
            "description": null
        }
    },
    "agenda-47": {
        "contract_address": "CN162nCPpq3DxPCyKLbAvEJeB1aCxsnVTEG4ZU8vpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CN162nCPpq3DxPCyKLbAvEJeB1aCxsnVTEG4ZU8vpump",
            "standard": "metaplex",
            "name": "AGENDA 47",
            "symbol": "A47",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CN162nCPpq3DxPCyKLbAvEJeB1aCxsnVTEG4ZU8vpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmV1f5Xvy9TgXS8ZTUmd54K6PphHbwFoSEMCgzXt1krxE3",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "7048830.12",
            "totalSupply": "999995052331315",
            "totalSupplyFormatted": "999995052.331315",
            "links": {
                "email": "helpdesk@agenda47coin.com",
                "telegram": "https://t.me/Agenda47Official",
                "twitter": "https://x.com/a47news_ai",
                "website": "https://www.a47news.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/CN162nCPpq3DxPCyKLbAvEJeB1aCxsnVTEG4ZU8vpump"
            },
            "description": null
        }
    },
    "agentipy": {
        "contract_address": "yLUD35WTiPLEY6DUqEj5W2JVXF2DfKB5arPkKJXpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "yLUD35WTiPLEY6DUqEj5W2JVXF2DfKB5arPkKJXpump",
            "standard": "metaplex",
            "name": "AgentiPy",
            "symbol": "APY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_yLUD35WTiPLEY6DUqEj5W2JVXF2DfKB5arPkKJXpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmURRL28Ge59ewkue6TogEK5t6ZXWYV9BprcZNr1vyRu9m",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1500818.77",
            "totalSupply": "999991849874343",
            "totalSupplyFormatted": "999991849.874343",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/yLUD35WTiPLEY6DUqEj5W2JVXF2DfKB5arPkKJXpump"
            },
            "description": null
        }
    },
    "agents-ai": {
        "contract_address": "Ag5mMdBSxm8J893RazD9PGkxWKJ5o3UKdWW4ZmJAey9w",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Ag5mMdBSxm8J893RazD9PGkxWKJ5o3UKdWW4ZmJAey9w",
            "standard": "metaplex",
            "name": "Agents AI",
            "symbol": "AGENT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Ag5mMdBSxm8J893RazD9PGkxWKJ5o3UKdWW4ZmJAey9w",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://tomato-central-mosquito-172.mypinata.cloud/ipfs/QmX8ge4BR91yRsZtvf1eKdFZ8F7SVo1o4UiZzaRVEW3LTN",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CZfmF27aN4zmvUYwc9PypBb3iW87YjJ6NpQeMTk4TMMc",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1195009.44",
            "totalSupply": "999993673452134464",
            "totalSupplyFormatted": "999993673.452134464",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Ag5mMdBSxm8J893RazD9PGkxWKJ5o3UKdWW4ZmJAey9w"
            },
            "description": null
        }
    },
    "agenttank": {
        "contract_address": "GAMwtMB6onAvBNBQJCJFuxoaqfPH8uCQ2dewNMVVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GAMwtMB6onAvBNBQJCJFuxoaqfPH8uCQ2dewNMVVpump",
            "standard": "metaplex",
            "name": "AgentTank",
            "symbol": "TANK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GAMwtMB6onAvBNBQJCJFuxoaqfPH8uCQ2dewNMVVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbP9SdrBMRiT5kd19qjrDHNjJbqxKUcXfDjY4rxGEKzpS",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3610428.97",
            "totalSupply": "999965647940910",
            "totalSupplyFormatted": "999965647.94091",
            "links": {
                "telegram": "https://t.me/agenttankchannel",
                "twitter": "https://x.com/AgentTankLive",
                "website": "https://www.agenttank.live/",
                "moralis": "https://moralis.com/chain/solana/token/price/GAMwtMB6onAvBNBQJCJFuxoaqfPH8uCQ2dewNMVVpump"
            },
            "description": null
        }
    },
    "agi-alpha-agent": {
        "contract_address": "tWKHzXd5PRmxTF5cMfJkm2Ua3TcjwNNoSRUqx6Apump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "tWKHzXd5PRmxTF5cMfJkm2Ua3TcjwNNoSRUqx6Apump",
            "standard": "metaplex",
            "name": "AGI ALPHA AGENT",
            "symbol": "AGIALPHA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_tWKHzXd5PRmxTF5cMfJkm2Ua3TcjwNNoSRUqx6Apump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmf4tyCSiFETxCv79HmfAwnrzPaFgXCN1thhsf3UxkrK2U",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1046708.60",
            "totalSupply": "999991021597631",
            "totalSupplyFormatted": "999991021.597631",
            "links": {
                "telegram": "https://t.me/agialpha",
                "twitter": "https://x.com/Montreal_AI",
                "website": "https://www.montreal.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/tWKHzXd5PRmxTF5cMfJkm2Ua3TcjwNNoSRUqx6Apump"
            },
            "description": null
        }
    },
    "agixt": {
        "contract_address": "F9TgEJLLRUKDRF16HgjUCdJfJ5BK6ucyiW8uJxVPpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F9TgEJLLRUKDRF16HgjUCdJfJ5BK6ucyiW8uJxVPpump",
            "standard": "metaplex",
            "name": "AGiXT",
            "symbol": "AGiXT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_F9TgEJLLRUKDRF16HgjUCdJfJ5BK6ucyiW8uJxVPpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQPMv2WRQd17pFTt4dXbrRnftcyhHdNAqnJAifzyq2AyZ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4328728.06",
            "totalSupply": "924995060751408",
            "totalSupplyFormatted": "924995060.751408",
            "links": {
                "github": "https://github.com/Josh-XT/AGiXT",
                "reddit": "https://www.reddit.com",
                "twitter": "https://x.com/agi_xt",
                "website": "https://agixt.app/",
                "moralis": "https://moralis.com/chain/solana/token/price/F9TgEJLLRUKDRF16HgjUCdJfJ5BK6ucyiW8uJxVPpump"
            },
            "description": null
        }
    },
    "agridex-governance-token": {
        "contract_address": "AGRidUXLeDij9CJprkZx7WBXtTQC67jtfiwz293mVrJ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AGRidUXLeDij9CJprkZx7WBXtTQC67jtfiwz293mVrJ",
            "standard": "metaplex",
            "name": "AgriDex Token",
            "symbol": "AGRI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AGRidUXLeDij9CJprkZx7WBXtTQC67jtfiwz293mVrJ",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/5_bMm7IhNEBaHRuFM2V5GQAqB7E-i2uCTtWKCW1yU1w",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "97PALEbpPj7muiQqi2HXS8QukLsrrr1yfgKfvXjWtsUG",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "59201999.77",
            "totalSupply": "999999996031441",
            "totalSupplyFormatted": "999999996.031441",
            "links": {
                "discord": "https://discord.gg/6NJRYDp3ss",
                "github": "https://github.com/AgriDex-International",
                "telegram": "https://t.me/agridex",
                "twitter": "https://twitter.com/AgriDexPlatform",
                "website": "https://agridex.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/AGRidUXLeDij9CJprkZx7WBXtTQC67jtfiwz293mVrJ"
            },
            "description": null
        }
    },
    "ai-powered-cmp": {
        "contract_address": "BAEXK4X6B3hkqmEkPuyyZQ5fZUb5iZ6SaJ7a9UDnpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BAEXK4X6B3hkqmEkPuyyZQ5fZUb5iZ6SaJ7a9UDnpump",
            "standard": "metaplex",
            "name": "AI-Powered CMP",
            "symbol": "AICMP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BAEXK4X6B3hkqmEkPuyyZQ5fZUb5iZ6SaJ7a9UDnpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPEg2gTacVoXkKD7RvXRNir7Ky6K3C6aRNDMNZ6krg8p3",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "274687.54",
            "totalSupply": "932873962953690",
            "totalSupplyFormatted": "932873962.95369",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/BAEXK4X6B3hkqmEkPuyyZQ5fZUb5iZ6SaJ7a9UDnpump"
            },
            "description": null
        }
    },
    "ai-research-orchestrator": {
        "contract_address": "CBQxnbAbakVewBtZPDRQcQVLWZCfNcD5u6uJDDBJpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CBQxnbAbakVewBtZPDRQcQVLWZCfNcD5u6uJDDBJpump",
            "standard": "metaplex",
            "name": "AI Research Orchestrator",
            "symbol": "ARO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CBQxnbAbakVewBtZPDRQcQVLWZCfNcD5u6uJDDBJpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbbnSPQFTMyPq4weaBqpZcfSxCqCFpBFGXCQsP61spFQT",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "450155.24",
            "totalSupply": "999998302941865",
            "totalSupplyFormatted": "999998302.941865",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/CBQxnbAbakVewBtZPDRQcQVLWZCfNcD5u6uJDDBJpump"
            },
            "description": null
        }
    },
    "ai-rig-complex": {
        "contract_address": "61V8vBaqAGMpgDQi4JcAwo1dmBGHsyhzodcPqnEVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "61V8vBaqAGMpgDQi4JcAwo1dmBGHsyhzodcPqnEVpump",
            "standard": "metaplex",
            "name": "AI Rig Complex",
            "symbol": "arc",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_61V8vBaqAGMpgDQi4JcAwo1dmBGHsyhzodcPqnEVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmZf8F4hXkAma1fUY8ZLhbxtpdi1anGAof5FqVAjrKrYhh",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "172922359.00",
            "totalSupply": "999995396792794",
            "totalSupplyFormatted": "999995396.792794",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+CI-vivonuApiZWQ0",
                "twitter": "https://twitter.com/arcdotfun",
                "website": "https://www.arc.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/61V8vBaqAGMpgDQi4JcAwo1dmBGHsyhzodcPqnEVpump"
            },
            "description": null
        }
    },
    "ai-shell-nova": {
        "contract_address": "AxDKAyDsC7p8C5MeDFX6FKV2MPCSGwzkRfGY2qZZpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AxDKAyDsC7p8C5MeDFX6FKV2MPCSGwzkRfGY2qZZpump",
            "standard": "metaplex",
            "name": "AI Shell NOVA",
            "symbol": "NOVA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AxDKAyDsC7p8C5MeDFX6FKV2MPCSGwzkRfGY2qZZpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmNo8gNic1VEw4U5YVRQJVkn3oE2M2m5hx5GHaj9CdB26h",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3027358.53",
            "totalSupply": "999989934085238",
            "totalSupplyFormatted": "999989934.085238",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/AxDKAyDsC7p8C5MeDFX6FKV2MPCSGwzkRfGY2qZZpump"
            },
            "description": null
        }
    },
    "ai-trader-agent": {
        "contract_address": "D4G7rpcQBF5oVQwBzoDwHPiweJ5RYvuEVGdxqmPApump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "D4G7rpcQBF5oVQwBzoDwHPiweJ5RYvuEVGdxqmPApump",
            "standard": "metaplex",
            "name": "AI Trader Agent",
            "symbol": "AIT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_D4G7rpcQBF5oVQwBzoDwHPiweJ5RYvuEVGdxqmPApump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmfFM4RACpRMzkpbPHZRioZthvGNW3U2d4A59wv3ZmvfVC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "395717.71",
            "totalSupply": "998034557329095",
            "totalSupplyFormatted": "998034557.329095",
            "links": {
                "telegram": "https://t.me/ait_agent",
                "twitter": "https://twitter.com/ait_agent",
                "website": "https://www.ai-trader.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/D4G7rpcQBF5oVQwBzoDwHPiweJ5RYvuEVGdxqmPApump"
            },
            "description": null
        }
    },
    "ai-virtual-agents": {
        "contract_address": "4ptXaGHy4CcCBfr5SPQZK5bcH9N4njv4LCf1RaJqpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4ptXaGHy4CcCBfr5SPQZK5bcH9N4njv4LCf1RaJqpump",
            "standard": "metaplex",
            "name": "AI Virtual Agents",
            "symbol": "AIVIA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4ptXaGHy4CcCBfr5SPQZK5bcH9N4njv4LCf1RaJqpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRmRTcvxJPrP7GLm2ZWhGfcJ2JkfwaqTcK3QMwU2VqpPN",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "391462.23",
            "totalSupply": "999980145162002",
            "totalSupplyFormatted": "999980145.162002",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4ptXaGHy4CcCBfr5SPQZK5bcH9N4njv4LCf1RaJqpump"
            },
            "description": null
        }
    },
    "ai16z": {
        "contract_address": "HeLp6NuQkmYB4pYWo2zYs22mESHXPQYzXbB8n4V98jwC",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HeLp6NuQkmYB4pYWo2zYs22mESHXPQYzXbB8n4V98jwC",
            "standard": "metaplex",
            "name": "ai16z",
            "symbol": "AI16Z",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HeLp6NuQkmYB4pYWo2zYs22mESHXPQYzXbB8n4V98jwC",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "345171400.47",
            "totalSupply": "1099998826520800848",
            "totalSupplyFormatted": "1099998826.520800848",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/pmairca",
                "website": "https://elizaos.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/HeLp6NuQkmYB4pYWo2zYs22mESHXPQYzXbB8n4V98jwC"
            },
            "description": null
        }
    },
    "ai16zeliza": {
        "contract_address": "wUtwjNmjCP9TTTtoc5Xn5h5sZ2cYJm5w2w44b79yr2o",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "wUtwjNmjCP9TTTtoc5Xn5h5sZ2cYJm5w2w44b79yr2o",
            "standard": "metaplex",
            "name": "ai16zeliza",
            "symbol": "eliza",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_wUtwjNmjCP9TTTtoc5Xn5h5sZ2cYJm5w2w44b79yr2o",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmcbb2QPro7zGfmQm3FEzi5rGP8hLXas7WueGaQVXjoTJm",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "850797.13",
            "totalSupply": "961025830264225",
            "totalSupplyFormatted": "961025830.264225",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/ai16zeliza",
                "website": "https://vvaifu.fun/character/673905469257ff5b86d15313",
                "moralis": "https://moralis.com/chain/solana/token/price/wUtwjNmjCP9TTTtoc5Xn5h5sZ2cYJm5w2w44b79yr2o"
            },
            "description": null
        }
    },
    "aimonica-brands": {
        "contract_address": "FVdo7CDJarhYoH6McyTFqx71EtzCPViinvdd1v86Qmy5",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FVdo7CDJarhYoH6McyTFqx71EtzCPViinvdd1v86Qmy5",
            "standard": "metaplex",
            "name": "Aimonica Brands",
            "symbol": "Aimonica",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FVdo7CDJarhYoH6McyTFqx71EtzCPViinvdd1v86Qmy5",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmP2Arm2gsWFumgV38HcF9aLeAJk3XGUQWzWA1kngyjmVg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3961103.81",
            "totalSupply": "999954763835466",
            "totalSupplyFormatted": "999954763.835466",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/FVdo7CDJarhYoH6McyTFqx71EtzCPViinvdd1v86Qmy5"
            },
            "description": null
        }
    },
    "aintivirus-2": {
        "contract_address": "BAezfVmia8UYLt4rst6PCU4dvL2i2qHzqn4wGhytpNJW",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BAezfVmia8UYLt4rst6PCU4dvL2i2qHzqn4wGhytpNJW",
            "standard": "metaplex",
            "name": "AIntivirus",
            "symbol": "Ainti",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BAezfVmia8UYLt4rst6PCU4dvL2i2qHzqn4wGhytpNJW",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreidxrhjbfskix7hib24xgvvn2xbyyh4mpqmrgmnkxkdsr54au4r6dq.ipfs.w3s.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "VirUse4jZCYXXLLDHG3nfFhLFxdupVnXNdvhkqLTfcg",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6391992.68",
            "totalSupply": "99998669937911",
            "totalSupplyFormatted": "99998669.937911",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/AIntivirus",
                "twitter": "https://x.com/AIntivirus",
                "website": "https://www.aintivirus.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/BAezfVmia8UYLt4rst6PCU4dvL2i2qHzqn4wGhytpNJW"
            },
            "description": null
        }
    },
    "aios-foundation": {
        "contract_address": "5QS7RcHfGUa2ZtrovPvEJMB9coqroiT7H48dPSwFpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5QS7RcHfGUa2ZtrovPvEJMB9coqroiT7H48dPSwFpump",
            "standard": "metaplex",
            "name": "Real AIOS Foundation",
            "symbol": "AIOS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5QS7RcHfGUa2ZtrovPvEJMB9coqroiT7H48dPSwFpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmditud4ACxy4hPSXNG3Wec8DHTgNGg318nn96xNvfda6y",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1158659.25",
            "totalSupply": "333786555617979",
            "totalSupplyFormatted": "333786555.617979",
            "links": {
                "github": "https://github.com/agiresearch",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/aios_foundation",
                "website": "https://aios.foundation/",
                "moralis": "https://moralis.com/chain/solana/token/price/5QS7RcHfGUa2ZtrovPvEJMB9coqroiT7H48dPSwFpump"
            },
            "description": null
        }
    },
    "aiwithdaddyissues": {
        "contract_address": "2KgAN8nLAU74wjiyKi85m4ZT6Z9MtqrUTGfse8Xapump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2KgAN8nLAU74wjiyKi85m4ZT6Z9MtqrUTGfse8Xapump",
            "standard": "metaplex",
            "name": "Aiwithdaddyissues",
            "symbol": "SHEGEN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2KgAN8nLAU74wjiyKi85m4ZT6Z9MtqrUTGfse8Xapump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmd6HXcPg7V7hg7Ptg5F8HjX2NFCz7AHHvPHrME8GT69jE",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "397476.97",
            "totalSupply": "999728272118028",
            "totalSupplyFormatted": "999728272.118028",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/aiwdaddyissues",
                "website": "https://pump.fun/2KgAN8nLAU74wjiyKi85m4ZT6Z9MtqrUTGfse8Xapump",
                "moralis": "https://moralis.com/chain/solana/token/price/2KgAN8nLAU74wjiyKi85m4ZT6Z9MtqrUTGfse8Xapump"
            },
            "description": null
        }
    },
    "alaska": {
        "contract_address": "s3ghbbWBTtMizNJKGmeMBd1URpisoQJxuDLrheEX61g",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "s3ghbbWBTtMizNJKGmeMBd1URpisoQJxuDLrheEX61g",
            "standard": "metaplex",
            "name": "Alaska",
            "symbol": "ALASKA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_s3ghbbWBTtMizNJKGmeMBd1URpisoQJxuDLrheEX61g",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmZqwYCuxNxTNpk1iwkQkwR8hkxgAD3gkS29CGczfF5QwB",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "105611.91",
            "totalSupply": "999951782335397",
            "totalSupplyFormatted": "999951782.335397",
            "links": {
                "telegram": "https://t.me/Alaskamemecoin",
                "twitter": "https://twitter.com/Alaskamemecoin",
                "website": "https://alaskacoin.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/s3ghbbWBTtMizNJKGmeMBd1URpisoQJxuDLrheEX61g"
            },
            "description": null
        }
    },
    "alchemist-ai": {
        "contract_address": "HNg5PYJmtqcmzXrv6S9zP1CDKk5BgDuyFBxbvNApump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HNg5PYJmtqcmzXrv6S9zP1CDKk5BgDuyFBxbvNApump",
            "standard": "metaplex",
            "name": "Alchemist AI",
            "symbol": "ALCH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HNg5PYJmtqcmzXrv6S9zP1CDKk5BgDuyFBxbvNApump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmbe4nA5bYwmGLJ6Bgcegf8tqUHBAVSNPQmT8gXYSb8rUN",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "56168379.68",
            "totalSupply": "999989223282175",
            "totalSupplyFormatted": "999989223.282175",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/alchemistAIapp",
                "website": "https://www.alchemistai.app/",
                "moralis": "https://moralis.com/chain/solana/token/price/HNg5PYJmtqcmzXrv6S9zP1CDKk5BgDuyFBxbvNApump"
            },
            "description": null
        }
    },
    "aleph-im-wormhole": {
        "contract_address": "3UCMiSnkcnkPE1pgQ5ggPCBv6dXgVUy16TmMUe1WpG9x",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3UCMiSnkcnkPE1pgQ5ggPCBv6dXgVUy16TmMUe1WpG9x",
            "standard": "metaplex",
            "name": "aleph.im v2 (Wormhole)",
            "symbol": "ALEPH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3UCMiSnkcnkPE1pgQ5ggPCBv6dXgVUy16TmMUe1WpG9x",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BCD75RNBHrJJpW4dXVagL5mPjzRLnVZq4YirJdjEYMV7",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "422488.57",
            "totalSupply": "677998857763272",
            "totalSupplyFormatted": "6779988.57763272",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/3UCMiSnkcnkPE1pgQ5ggPCBv6dXgVUy16TmMUe1WpG9x"
            },
            "description": null
        }
    },
    "all-will-retire": {
        "contract_address": "Ai4CL1SAxVRigxQFwBH8S2JkuL7EqrdiGwTC7JpCpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Ai4CL1SAxVRigxQFwBH8S2JkuL7EqrdiGwTC7JpCpump",
            "standard": "metaplex",
            "name": "All Will Retire",
            "symbol": "AWR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Ai4CL1SAxVRigxQFwBH8S2JkuL7EqrdiGwTC7JpCpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUw73JoGbyTgqVS1xGMwAL6HeMknvcTiKjzRXkdqV6X2Y",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1813066.89",
            "totalSupply": "999678486040461",
            "totalSupplyFormatted": "999678486.040461",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Ai4CL1SAxVRigxQFwBH8S2JkuL7EqrdiGwTC7JpCpump"
            },
            "description": null
        }
    },
    "alpha-3": {
        "contract_address": "2zrH2jE542mzB4HABgBjdWMQPtNC5H12pwo1iLpfpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2zrH2jE542mzB4HABgBjdWMQPtNC5H12pwo1iLpfpump",
            "standard": "metaplex",
            "name": "reject modernity",
            "symbol": "alpha",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2zrH2jE542mzB4HABgBjdWMQPtNC5H12pwo1iLpfpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmS1JKDNsbWNn2aCwjXarz6Ln2WcEZRpT7ium4gANqYuti",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "350561.90",
            "totalSupply": "999954068605899",
            "totalSupplyFormatted": "999954068.605899",
            "links": {
                "instagram": "https://www.instagram.com/alphaonsolana/",
                "medium": "https://onlyalpha.medium.com/",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/alphasoltg",
                "tiktok": "https://www.tiktok.com/@onlyalphasol",
                "twitter": "https://x.com/OnlyAlphaSOL",
                "website": "https://rejectmodernityalpha.com/",
                "youtube": "https://www.youtube.com/@onlyalphasol",
                "moralis": "https://moralis.com/chain/solana/token/price/2zrH2jE542mzB4HABgBjdWMQPtNC5H12pwo1iLpfpump"
            },
            "description": null
        }
    },
    "alpha-4": {
        "contract_address": "2sCUCJdVkmyXp4dT8sFaA9LKgSMK4yDPi9zLHiwXpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2sCUCJdVkmyXp4dT8sFaA9LKgSMK4yDPi9zLHiwXpump",
            "standard": "metaplex",
            "name": "Alpha",
            "symbol": "ALPHA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2sCUCJdVkmyXp4dT8sFaA9LKgSMK4yDPi9zLHiwXpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmS2rg2qR3LkajBzPTjWSXweKgGNNtxBgGvHWCgqjbTjsX",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1603142.98",
            "totalSupply": "794375640018784",
            "totalSupplyFormatted": "794375640.018784",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/alphaofsol",
                "twitter": "https://x.com/alphaofsol",
                "website": "https://alphaofsol.com",
                "moralis": "https://moralis.com/chain/solana/token/price/2sCUCJdVkmyXp4dT8sFaA9LKgSMK4yDPi9zLHiwXpump"
            },
            "description": null
        }
    },
    "alphaarc": {
        "contract_address": "Cg93SZJkHePybZqGDuyXLf5Ag5sB2cpWfHUG8wNPpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Cg93SZJkHePybZqGDuyXLf5Ag5sB2cpWfHUG8wNPpump",
            "standard": "metaplex",
            "name": "AlphaArc",
            "symbol": "alpha",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Cg93SZJkHePybZqGDuyXLf5Ag5sB2cpWfHUG8wNPpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmV4z5u3RnikJwJg7ygr9B7vGhmk3Dbo1vYm85hcLj9VHA",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1072942.61",
            "totalSupply": "999784386970329",
            "totalSupplyFormatted": "999784386.970329",
            "links": {
                "twitter": "https://twitter.com/AlphaArc4k",
                "website": "https://www.alphaarc.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/Cg93SZJkHePybZqGDuyXLf5Ag5sB2cpWfHUG8wNPpump"
            },
            "description": null
        }
    },
    "alris-agent": {
        "contract_address": "FwzpNxnabjZvc8QCnV6qPEBKxqLxSyjobc5Etdgxpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FwzpNxnabjZvc8QCnV6qPEBKxqLxSyjobc5Etdgxpump",
            "standard": "metaplex",
            "name": "ALRIS AGENT",
            "symbol": "ALR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FwzpNxnabjZvc8QCnV6qPEBKxqLxSyjobc5Etdgxpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQUFtmNTxsPwpXZEcpHL5RsqAi1mwGkreU46tACHLyYDv",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "354550.09",
            "totalSupply": "998780467093269",
            "totalSupplyFormatted": "998780467.093269",
            "links": {
                "github": "https://github.com/maushish",
                "telegram": "https://t.me/alrisagent",
                "twitter": "https://x.com/alrisagent",
                "website": "https://www.alris.live/",
                "moralis": "https://moralis.com/chain/solana/token/price/FwzpNxnabjZvc8QCnV6qPEBKxqLxSyjobc5Etdgxpump"
            },
            "description": null
        }
    },
    "american-coin": {
        "contract_address": "69kdRLyP5DTRkpHraaSZAQbWmAwzF9guKjZfzMXzcbAs",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "69kdRLyP5DTRkpHraaSZAQbWmAwzF9guKjZfzMXzcbAs",
            "standard": "metaplex",
            "name": "American Coin",
            "symbol": "USA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_69kdRLyP5DTRkpHraaSZAQbWmAwzF9guKjZfzMXzcbAs",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreifiqnh46bzlfau2dxrijzf4yoqitk7zyjl3tvpgxke6uit6t4klce.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "usaPzeBjZqmZ4E8KH8eHTWQtjTzhNTtsTutpQkkmTW6",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "16789796.63",
            "totalSupply": "11627282986584006517",
            "totalSupplyFormatted": "11627282986584.006517",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/AMERICACOINUSA",
                "twitter": "https://twitter.com/USA_ON_CHAIN",
                "website": "https://www.americancoin.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/69kdRLyP5DTRkpHraaSZAQbWmAwzF9guKjZfzMXzcbAs"
            },
            "description": null
        }
    },
    "amulet-staked-sol-2": {
        "contract_address": "SoLW9muuNQmEAoBws7CWfYQnXRXMVEG12cQhy6LE2Zf",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "SoLW9muuNQmEAoBws7CWfYQnXRXMVEG12cQhy6LE2Zf",
            "standard": "metaplex",
            "name": "Amulet Staked Sol (amtSol)",
            "symbol": "amtSol",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_SoLW9muuNQmEAoBws7CWfYQnXRXMVEG12cQhy6LE2Zf",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/GzWBLVmXzj7Y_CdVGVtXJSY53uEZpUV999NLnLj8bEs",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "payRhZKW5U9JdLDH2BxeKfNAP5JyNgo2qEkUawZPAS7",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "159409.68",
            "totalSupply": "1008287105285",
            "totalSupplyFormatted": "1008.287105285",
            "links": {
                "github": "https://github.com/Amulet-Protocol/amulet-sdk",
                "telegram": "https://t.me/amulet_announcement",
                "twitter": "https://twitter.com/AmuletProtocol",
                "website": "https://amulet.org/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/SoLW9muuNQmEAoBws7CWfYQnXRXMVEG12cQhy6LE2Zf"
            },
            "description": null
        }
    },
    "analos": {
        "contract_address": "7iT1GRYYhEop2nV1dyCwK2MGyLmPHq47WhPGSwiqcUg5",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7iT1GRYYhEop2nV1dyCwK2MGyLmPHq47WhPGSwiqcUg5",
            "standard": "metaplex",
            "name": "ANALOS",
            "symbol": "ANALOS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7iT1GRYYhEop2nV1dyCwK2MGyLmPHq47WhPGSwiqcUg5",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://arweave.net/D1t6BnBis4VxeNGwU3-qaTJBaO5aU05nGs6k9v7fuio",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BFK7t3jAKZSYW8hiU8jvMsQ7YpfVej65GHjPeysrcYhn",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "873741.03",
            "totalSupply": "9997036979799450518",
            "totalSupplyFormatted": "99970369797.99450518",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/analos_coin",
                "twitter": "https://twitter.com/an_iykyk",
                "website": "https://www.analos.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/7iT1GRYYhEop2nV1dyCwK2MGyLmPHq47WhPGSwiqcUg5"
            },
            "description": null
        }
    },
    "andy-on-sol": {
        "contract_address": "667w6y7eH5tQucYQXfJ2KmiuGBE8HfYnqqbjLNSw7yww",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "667w6y7eH5tQucYQXfJ2KmiuGBE8HfYnqqbjLNSw7yww",
            "standard": "metaplex",
            "name": "Andy",
            "symbol": "ANDY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_667w6y7eH5tQucYQXfJ2KmiuGBE8HfYnqqbjLNSw7yww",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/-WAWgf0zTAl_QBaO3QTneH5d9vphkKt9_BFhklNbpjE",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9pgf3wx6RnFqvDtYyHanRcVVaLEjNu9kYZkuDL4dymhW",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "870064.61",
            "totalSupply": "946159490382654",
            "totalSupplyFormatted": "946159490.382654",
            "links": {
                "medium": "https://andysolana.medium.com/",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/Andy_Portal",
                "twitter": "https://twitter.com/Andy_On_Sol",
                "website": "https://andytokonsolana.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/667w6y7eH5tQucYQXfJ2KmiuGBE8HfYnqqbjLNSw7yww"
            },
            "description": null
        }
    },
    "anita-max-wynn": {
        "contract_address": "4vqYQTjmKjxrWGtbL2tVkbAU1EVAz9JwcYtd2VE3PbVU",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4vqYQTjmKjxrWGtbL2tVkbAU1EVAz9JwcYtd2VE3PbVU",
            "standard": "metaplex",
            "name": "Anita Max Wynn",
            "symbol": "WYNN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4vqYQTjmKjxrWGtbL2tVkbAU1EVAz9JwcYtd2VE3PbVU",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreicl54jmztlf3fax2u32p4tlregbd2qu7y7ggchk44kj6pwtia3mja.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "EYPQ7xyiEEsE4WpAyooqeXExBgPiWUZMkD3735RFgVBo",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "449297.71",
            "totalSupply": "992769540877104",
            "totalSupplyFormatted": "992769540.877104",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4vqYQTjmKjxrWGtbL2tVkbAU1EVAz9JwcYtd2VE3PbVU"
            },
            "description": null
        }
    },
    "anti-rug-agent": {
        "contract_address": "ts3foLrNUMvwdVeit1oNeLWjYk7e4qsn8PqSsqRpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ts3foLrNUMvwdVeit1oNeLWjYk7e4qsn8PqSsqRpump",
            "standard": "metaplex",
            "name": "Anti Rug Agent",
            "symbol": "ANTIRUG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ts3foLrNUMvwdVeit1oNeLWjYk7e4qsn8PqSsqRpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXwGcutqfBhmxEHrjJcXmMWJBbEE9qEUBUno6twZqSq7Q",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1400140.10",
            "totalSupply": "999810842188583",
            "totalSupplyFormatted": "999810842.188583",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/ts3foLrNUMvwdVeit1oNeLWjYk7e4qsn8PqSsqRpump"
            },
            "description": null
        }
    },
    "antitoken": {
        "contract_address": "HB8KrN7Bb3iLWUPsozp67kS4gxtbA4W5QJX4wKPvpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HB8KrN7Bb3iLWUPsozp67kS4gxtbA4W5QJX4wKPvpump",
            "standard": "metaplex",
            "name": "Antitoken",
            "symbol": "ANTI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HB8KrN7Bb3iLWUPsozp67kS4gxtbA4W5QJX4wKPvpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qma5zjGGtmfD9nETrFiRuGBfbXvemnDMxERfv2YvUdRayu",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "234006.37",
            "totalSupply": "999928947605627",
            "totalSupplyFormatted": "999928947.605627",
            "links": {
                "twitter": "https://twitter.com/antitokens",
                "website": "https://antitoken.pro/",
                "moralis": "https://moralis.com/chain/solana/token/price/HB8KrN7Bb3iLWUPsozp67kS4gxtbA4W5QJX4wKPvpump"
            },
            "description": null
        }
    },
    "apicoin": {
        "contract_address": "HmJ8VR1ugamWJTecfcNpmCG1hviMRWNXp7Pq68fzpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HmJ8VR1ugamWJTecfcNpmCG1hviMRWNXp7Pq68fzpump",
            "standard": "metaplex",
            "name": "Apicoin",
            "symbol": "API",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HmJ8VR1ugamWJTecfcNpmCG1hviMRWNXp7Pq68fzpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmfP2vX99UX9jwWMUgv2XP6aJbiEYuzBQfMeYTNJYcWXC8",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "241203.41",
            "totalSupply": "999985121298426",
            "totalSupplyFormatted": "999985121.298426",
            "links": {
                "telegram": "https://t.me/apicoinportal",
                "twitter": "https://twitter.com/apidegenape",
                "website": "https://apicoin.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/HmJ8VR1ugamWJTecfcNpmCG1hviMRWNXp7Pq68fzpump"
            },
            "description": null
        }
    },
    "apollo-3": {
        "contract_address": "AY88hS3S3fkDtkSc7abEkYjcNsxuCiGD8Lq4PmwakZuL",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AY88hS3S3fkDtkSc7abEkYjcNsxuCiGD8Lq4PmwakZuL",
            "standard": "metaplex",
            "name": "Apollo",
            "symbol": "Apollo",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AY88hS3S3fkDtkSc7abEkYjcNsxuCiGD8Lq4PmwakZuL",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUjBLXgwfSSWrn9oEAFoowQgji1MX37QBQRH8E417GzBC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "456odxznPycurt5s5vdfPZ4cineQ88n9PPdk1boTzhaN",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "59220.00",
            "totalSupply": "591240358",
            "totalSupplyFormatted": "591.240358",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/apollo_defi",
                "twitter": "https://twitter.com/ApolloDotLoan",
                "website": "https://apollo.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/AY88hS3S3fkDtkSc7abEkYjcNsxuCiGD8Lq4PmwakZuL"
            },
            "description": null
        }
    },
    "aquarius-2": {
        "contract_address": "C49Ut3om3QFTDrMZ5Cr8VcTKPpHDcQ2Fv8mmuJHHigDt",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "C49Ut3om3QFTDrMZ5Cr8VcTKPpHDcQ2Fv8mmuJHHigDt",
            "standard": "metaplex",
            "name": "Aquarius",
            "symbol": "AQUARIUS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_C49Ut3om3QFTDrMZ5Cr8VcTKPpHDcQ2Fv8mmuJHHigDt",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/lDeaYJR2eKlcwcXtG4er7bhcu7n4V5boDje8MhIaarI",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DUK1VN3WatYKsVLwRX2JxfJfaKX6bDXvijpPtT28ed13",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "346693.41",
            "totalSupply": "999998295820462",
            "totalSupplyFormatted": "999998295.820462",
            "links": {
                "telegram": "https://t.me/astrofoliosol",
                "twitter": "https://twitter.com/astrofoliosol",
                "website": "https://astrofolio.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/C49Ut3om3QFTDrMZ5Cr8VcTKPpHDcQ2Fv8mmuJHHigDt"
            },
            "description": null
        }
    },
    "argo-3": {
        "contract_address": "Argoo945JjG9oyt5hgsrdtwbG3S4ATXQy4tTdYMzsV1m",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Argoo945JjG9oyt5hgsrdtwbG3S4ATXQy4tTdYMzsV1m",
            "standard": "metaplex",
            "name": "Argo",
            "symbol": "ARGO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Argoo945JjG9oyt5hgsrdtwbG3S4ATXQy4tTdYMzsV1m",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/SzXf7JO4rknM--IPJoA17fM3DcE9CAwIMFB0Q5Sr3Fc",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2835881.02",
            "totalSupply": "999995422540083",
            "totalSupplyFormatted": "999995422.540083",
            "links": {
                "github": "https://github.com/ai3labs",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/argoframework",
                "twitter": "https://twitter.com/Argo_workflow",
                "website": "https://argoai.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/Argoo945JjG9oyt5hgsrdtwbG3S4ATXQy4tTdYMzsV1m"
            },
            "description": null
        }
    },
    "aria": {
        "contract_address": "GhBPHgnNF99EThYxt4bxUfPX1hCPyAS72RCBgLjLpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GhBPHgnNF99EThYxt4bxUfPX1hCPyAS72RCBgLjLpump",
            "standard": "metaplex",
            "name": "Aria",
            "symbol": "ARIA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GhBPHgnNF99EThYxt4bxUfPX1hCPyAS72RCBgLjLpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTvimSEMCeAb8Wr1cSgUDB93X1553RZ6hj7RMLDgnfk9Q",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1335151.70",
            "totalSupply": "999917391123747",
            "totalSupplyFormatted": "999917391.123747",
            "links": {
                "email": "hi@aria.show",
                "telegram": "https://t.me/ariashowlive",
                "twitter": "https://x.com/ariashowlive",
                "website": "https://linktr.ee/aria.show",
                "moralis": "https://moralis.com/chain/solana/token/price/GhBPHgnNF99EThYxt4bxUfPX1hCPyAS72RCBgLjLpump"
            },
            "description": null
        }
    },
    "aries": {
        "contract_address": "GhFiFrExPY3proVF96oth1gESWA5QPQzdtb8cy8b1YZv",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GhFiFrExPY3proVF96oth1gESWA5QPQzdtb8cy8b1YZv",
            "standard": "metaplex",
            "name": "Aries",
            "symbol": "ARIES",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GhFiFrExPY3proVF96oth1gESWA5QPQzdtb8cy8b1YZv",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/vyhB2Z_8oYn5sF3cbfBFKXhmFOuv0BauWvz9TkNZ4EY",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DUK1VN3WatYKsVLwRX2JxfJfaKX6bDXvijpPtT28ed13",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "346950.92",
            "totalSupply": "999705868834892",
            "totalSupplyFormatted": "999705868.834892",
            "links": {
                "telegram": "https://t.me/astrofoliosol",
                "twitter": "https://twitter.com/astrofoliosol",
                "website": "https://astrofolio.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/GhFiFrExPY3proVF96oth1gESWA5QPQzdtb8cy8b1YZv"
            },
            "description": null
        }
    },
    "army": {
        "contract_address": "ARMYZt71GXq4vw4mtDs5LnEp4ZgwWKEE2CdMU3WNnFEC",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ARMYZt71GXq4vw4mtDs5LnEp4ZgwWKEE2CdMU3WNnFEC",
            "standard": "metaplex",
            "name": "ARMY",
            "symbol": "ARMY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ARMYZt71GXq4vw4mtDs5LnEp4ZgwWKEE2CdMU3WNnFEC",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/Adr3Ymo3m_IPoaYpGpE6MqOzXRVR6o348oKMeonRMDg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "PAC1DHw7yCfNXYYUvq1ZRUdzpBgszjnTp9s4oXjg6yH",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "275670.75",
            "totalSupply": "2999877592430672",
            "totalSupplyFormatted": "2999877592.430672",
            "links": {
                "telegram": "https://t.me/+q0EZkmL4pzxmY2Zh",
                "twitter": "https://twitter.com/onchainarmy",
                "website": "https://www.onchainarmy.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/ARMYZt71GXq4vw4mtDs5LnEp4ZgwWKEE2CdMU3WNnFEC"
            },
            "description": null
        }
    },
    "arok-vc": {
        "contract_address": "Cwe5k2iEy8dt7vCGY93GBrqQS4FWyac6pQjvjLcPD6qp",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Cwe5k2iEy8dt7vCGY93GBrqQS4FWyac6pQjvjLcPD6qp",
            "standard": "metaplex",
            "name": "AROK.VC",
            "symbol": "AROK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Cwe5k2iEy8dt7vCGY93GBrqQS4FWyac6pQjvjLcPD6qp",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWg9pJ2tCZVXYoNS52NTGt1yGDcDXAwNDWFFLjN7tQ4t7",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9vqJPiqzqoqLCL2mNeCq6eMUtSJmKDHzc6VDLVbJMtyz",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "987186.76",
            "totalSupply": "999987605816196",
            "totalSupplyFormatted": "999987605.816196",
            "links": {
                "github": "https://github.com/leomercier/",
                "twitter": "https://twitter.com/AROK_VC",
                "website": "https://arok.vc/en",
                "moralis": "https://moralis.com/chain/solana/token/price/Cwe5k2iEy8dt7vCGY93GBrqQS4FWyac6pQjvjLcPD6qp"
            },
            "description": null
        }
    },
    "artrade": {
        "contract_address": "ATRLuHph8dxnPny4WSNW7fxkhbeivBrtWbY6BfB4xpLj",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ATRLuHph8dxnPny4WSNW7fxkhbeivBrtWbY6BfB4xpLj",
            "standard": "metaplex",
            "name": "Artrade Token",
            "symbol": "ATR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ATRLuHph8dxnPny4WSNW7fxkhbeivBrtWbY6BfB4xpLj",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://artrade.app/artrade_token.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "79q4wWfBQ7j5q152qH39iwR7gp7agC33o9UtBk4dWtHP",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "22677877.85",
            "totalSupply": "1264126054615332280",
            "totalSupplyFormatted": "1264126054.61533228",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/ATRLuHph8dxnPny4WSNW7fxkhbeivBrtWbY6BfB4xpLj"
            },
            "description": null
        }
    },
    "askjimmy": {
        "contract_address": "DgkKrQ1ErdRNjT2yTcAdEBa92JjFx75yxi4owArQarc",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DgkKrQ1ErdRNjT2yTcAdEBa92JjFx75yxi4owArQarc",
            "standard": "metaplex",
            "name": "AskJimmy",
            "symbol": "AskJ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DgkKrQ1ErdRNjT2yTcAdEBa92JjFx75yxi4owArQarc",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://afraid-teal-alpaca.myfilebase.com/ipfs/QmR1SE3yZKfjgqDhpWjPvidZrLLEHFw7jt62BPizhZ8CEU",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HfhMUTyRQtw9mNCo2YSGVzPMmdB3ueAK4GVW4QWH3SSN",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "9454808.85",
            "totalSupply": "999996176981586679",
            "totalSupplyFormatted": "999996176.981586679",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/DgkKrQ1ErdRNjT2yTcAdEBa92JjFx75yxi4owArQarc"
            },
            "description": null
        }
    },
    "assai": {
        "contract_address": "12XbSPVc5hmWjKUzf5ExTysM2pEL3tM953YkMXmLWkGd",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "12XbSPVc5hmWjKUzf5ExTysM2pEL3tM953YkMXmLWkGd",
            "standard": "metaplex",
            "name": "ASSAI",
            "symbol": "ASSAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_12XbSPVc5hmWjKUzf5ExTysM2pEL3tM953YkMXmLWkGd",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmTFsZwCVNugFbyiGNKzr3M9Nu4phJ72TCSdTgZpxCAFUP",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "2rH92kiDzMjRMFGZD59XqWKCqHwMohftxmaiYGweVko7",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "351151.97",
            "totalSupply": "999991373035112292",
            "totalSupplyFormatted": "999991373.035112292",
            "links": {
                "twitter": "https://x.com/AIasssss",
                "website": "https://assai.io",
                "moralis": "https://moralis.com/chain/solana/token/price/12XbSPVc5hmWjKUzf5ExTysM2pEL3tM953YkMXmLWkGd"
            },
            "description": null
        }
    },
    "asscoin": {
        "contract_address": "G3EDZoS49NRVKP8X1HggHZJueJeR8d2izUHeXdV3pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "G3EDZoS49NRVKP8X1HggHZJueJeR8d2izUHeXdV3pump",
            "standard": "metaplex",
            "name": "ASSCOIN",
            "symbol": "ASSCOIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_G3EDZoS49NRVKP8X1HggHZJueJeR8d2izUHeXdV3pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmb1nbyKV6s6vedzDRnyArQPEFr1PKdYseYzHEwitzyE8u",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "504684.33",
            "totalSupply": "998712390400474",
            "totalSupplyFormatted": "998712390.400474",
            "links": {
                "email": "asscoin1@proton.me",
                "telegram": "https://t.me/asscoinsol",
                "twitter": "https://x.com/asscoinonsol",
                "website": "https://asscoin-sol.xyz",
                "moralis": "https://moralis.com/chain/solana/token/price/G3EDZoS49NRVKP8X1HggHZJueJeR8d2izUHeXdV3pump"
            },
            "description": null
        }
    },
    "astrals-glxy": {
        "contract_address": "CJ5U6wPmjxFUyTJpUTS7Rt1UqhTmSVRMvmJ8WD4nndXW",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CJ5U6wPmjxFUyTJpUTS7Rt1UqhTmSVRMvmJ8WD4nndXW",
            "standard": "metaplex",
            "name": "Astrals GLXY",
            "symbol": "GLXY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CJ5U6wPmjxFUyTJpUTS7Rt1UqhTmSVRMvmJ8WD4nndXW",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2232.95",
            "totalSupply": "5499868768874412445",
            "totalSupplyFormatted": "5499868768.874412445",
            "links": {
                "discord": "https://discord.com/invite/astralsnft",
                "twitter": "https://twitter.com/Astrals_NFT",
                "website": "https://astralsnft.io/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/CJ5U6wPmjxFUyTJpUTS7Rt1UqhTmSVRMvmJ8WD4nndXW"
            },
            "description": null
        }
    },
    "asym": {
        "contract_address": "DNMTk67urDBxEEVRx9HjVzCVu8en4Kgg5HfZy3E6pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DNMTk67urDBxEEVRx9HjVzCVu8en4Kgg5HfZy3E6pump",
            "standard": "metaplex",
            "name": "ASYM",
            "symbol": "ASYM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DNMTk67urDBxEEVRx9HjVzCVu8en4Kgg5HfZy3E6pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmP5E4cW2M8DCL2inrTDdoh9CerJyzPZ2j9NUEiR41srEg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1027010.09",
            "totalSupply": "999974774463609",
            "totalSupplyFormatted": "999974774.463609",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/DNMTk67urDBxEEVRx9HjVzCVu8en4Kgg5HfZy3E6pump"
            },
            "description": null
        }
    },
    "aura-on-sol": {
        "contract_address": "DtR4D9FtVoTX2569gaL837ZgrB6wNjj6tkmnX9Rdk9B2",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DtR4D9FtVoTX2569gaL837ZgrB6wNjj6tkmnX9Rdk9B2",
            "standard": "metaplex",
            "name": "aura",
            "symbol": "aura",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DtR4D9FtVoTX2569gaL837ZgrB6wNjj6tkmnX9Rdk9B2",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmciaE8qRSBMFPPFPjFkHCFTVFGfNXWGzc619Kt8ncb88g",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1124786.47",
            "totalSupply": "963294897417714",
            "totalSupplyFormatted": "963294897.417714",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/auracoinsol",
                "twitter": "https://x.com/auracoinsolana",
                "website": "https://auraonsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/DtR4D9FtVoTX2569gaL837ZgrB6wNjj6tkmnX9Rdk9B2"
            },
            "description": null
        }
    },
    "autism-2": {
        "contract_address": "BkVeSP2GsXV3AYoRJBSZTpFE8sXmcuGnRQcFgoWspump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BkVeSP2GsXV3AYoRJBSZTpFE8sXmcuGnRQcFgoWspump",
            "standard": "metaplex",
            "name": "autism",
            "symbol": "autism",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BkVeSP2GsXV3AYoRJBSZTpFE8sXmcuGnRQcFgoWspump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/Qmc8JN3cpKbHTgf5yZHtCovFLgeD1tgqRe5o4FK65k2Beg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "527077.40",
            "totalSupply": "948994785367392",
            "totalSupplyFormatted": "948994785.367392",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/autismonsolala",
                "twitter": "https://x.com/AutismoWorld",
                "website": "https://autismcoinsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/BkVeSP2GsXV3AYoRJBSZTpFE8sXmcuGnRQcFgoWspump"
            },
            "description": null
        }
    },
    "autonomous-virtual-beings": {
        "contract_address": "6d5zHW5B8RkGKd51Lpb9RqFQSqDudr9GJgZ1SgQZpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6d5zHW5B8RkGKd51Lpb9RqFQSqDudr9GJgZ1SgQZpump",
            "standard": "metaplex",
            "name": "Autonomous Virtual Beings ",
            "symbol": "AVB",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6d5zHW5B8RkGKd51Lpb9RqFQSqDudr9GJgZ1SgQZpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUpdtEX8FvtJUMWCnEdx27oP1CB4dM7sWsNC1jnireZmf",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5137803.33",
            "totalSupply": "999943623715688",
            "totalSupplyFormatted": "999943623.715688",
            "links": {
                "discord": "https://discord.com/invite/avb",
                "github": "https://github.com/tcotten-scrypted/autonomous-virtual-beings/tree/main",
                "telegram": "https://t.me/avbeings",
                "twitter": "https://twitter.com/AVbeingsCTO",
                "website": "https://avb.gg",
                "moralis": "https://moralis.com/chain/solana/token/price/6d5zHW5B8RkGKd51Lpb9RqFQSqDudr9GJgZ1SgQZpump"
            },
            "description": null
        }
    },
    "ava-ai": {
        "contract_address": "DKu9kykSfbN5LBfFXtNNDPaX35o4Fv6vJ9FKk7pZpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DKu9kykSfbN5LBfFXtNNDPaX35o4Fv6vJ9FKk7pZpump",
            "standard": "metaplex",
            "name": "Ava AI",
            "symbol": "AVA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DKu9kykSfbN5LBfFXtNNDPaX35o4Fv6vJ9FKk7pZpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmNVY73MUCao6bcw1bRFWZDMguYgDtUCqRNN1ERW6cg2tR",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "53579515.86",
            "totalSupply": "999901835223389",
            "totalSupplyFormatted": "999901835.223389",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/DKu9kykSfbN5LBfFXtNNDPaX35o4Fv6vJ9FKk7pZpump"
            },
            "description": null
        }
    },
    "axi": {
        "contract_address": "9tLUnDz6G2dUGVhiLEEEpfM8e1YBiXnWrdT4xVeopump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9tLUnDz6G2dUGVhiLEEEpfM8e1YBiXnWrdT4xVeopump",
            "standard": "metaplex",
            "name": "AXI",
            "symbol": "AXI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9tLUnDz6G2dUGVhiLEEEpfM8e1YBiXnWrdT4xVeopump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYoTy6uAe8asPESi5nFhDZirpAm5ZPkf25j6HyxwsGkcV",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "407348.23",
            "totalSupply": "999966204738801",
            "totalSupplyFormatted": "999966204.738801",
            "links": {
                "telegram": "https://t.me/axiarena",
                "twitter": "https://x.com/axiarena",
                "website": "https://axiai.io",
                "moralis": "https://moralis.com/chain/solana/token/price/9tLUnDz6G2dUGVhiLEEEpfM8e1YBiXnWrdT4xVeopump"
            },
            "description": null
        }
    },
    "b-h-a-d": {
        "contract_address": "57Wdx3uikKcAt2w8F9GMwgGeEvkaU6pXacYScW1hpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "57Wdx3uikKcAt2w8F9GMwgGeEvkaU6pXacYScW1hpump",
            "standard": "metaplex",
            "name": "B.H.A.D ",
            "symbol": "Bhad",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_57Wdx3uikKcAt2w8F9GMwgGeEvkaU6pXacYScW1hpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRquP69Qrqwa7o868iQfX7pqScCPdE4asa7sVW4VWMZxb",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "387841.48",
            "totalSupply": "999825944900636",
            "totalSupplyFormatted": "999825944.900636",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/57Wdx3uikKcAt2w8F9GMwgGeEvkaU6pXacYScW1hpump"
            },
            "description": null
        }
    },
    "baba": {
        "contract_address": "6dEJEuFvaD8jMyotbvbMx7ixpP2frXnZCSgDexwqkE6B",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6dEJEuFvaD8jMyotbvbMx7ixpP2frXnZCSgDexwqkE6B",
            "standard": "metaplex",
            "name": "Baba",
            "symbol": "$BABA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6dEJEuFvaD8jMyotbvbMx7ixpP2frXnZCSgDexwqkE6B",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreibpzbc6bjgin3rp2jqx3bf6wdgggdmlqrl76wyx7g4omgcsl3txy4.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BgHqZR4w7Zd8eVNryiQeu1B3YaGmFyEExoJxERkikoj",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "643525.28",
            "totalSupply": "999893221167472",
            "totalSupplyFormatted": "999893221.167472",
            "links": {
                "email": "baba.meme.token@gmail.com",
                "discord": "https://discord.gg/EyjbwQJffn",
                "facebook": "https://www.facebook.com/profile.php?id=61555882753919",
                "github": "https://github.com/BabaTokenSolana",
                "instagram": "https://www.instagram.com/babatokensol/",
                "medium": "https://medium.com/@BabaTokenSol",
                "reddit": "https://www.reddit.com/user/BabaTokenSol",
                "telegram": "https://t.me/BabaTokenSol",
                "tiktok": "https://www.tiktok.com/@babatokensol",
                "twitter": "https://x.com/babatokensol",
                "website": "https://www.babatoken.com/",
                "youtube": "https://www.youtube.com/@BabaTokenSol",
                "moralis": "https://moralis.com/chain/solana/token/price/6dEJEuFvaD8jMyotbvbMx7ixpP2frXnZCSgDexwqkE6B"
            },
            "description": null
        }
    },
    "baby-bitcoin-2": {
        "contract_address": "8467ssuj6Gkw15ABv6BvxJAKnGJALXJu6dxDxt4upump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8467ssuj6Gkw15ABv6BvxJAKnGJALXJu6dxDxt4upump",
            "standard": "metaplex",
            "name": "Baby BitCoin",
            "symbol": "BABYBTC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8467ssuj6Gkw15ABv6BvxJAKnGJALXJu6dxDxt4upump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVwxVevyBWtUo975sodv9qtcf6bmyWgjYYaWKzjn1ffHF",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "325407.80",
            "totalSupply": "999897979807774",
            "totalSupplyFormatted": "999897979.807774",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8467ssuj6Gkw15ABv6BvxJAKnGJALXJu6dxDxt4upump"
            },
            "description": null
        }
    },
    "baby-fwog": {
        "contract_address": "3Bbj7eZTuMd2FrfeZ2degzckxhgB5b63crGoHLtrpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3Bbj7eZTuMd2FrfeZ2degzckxhgB5b63crGoHLtrpump",
            "standard": "metaplex",
            "name": "Baby Fwog ",
            "symbol": "BABYFWOG ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3Bbj7eZTuMd2FrfeZ2degzckxhgB5b63crGoHLtrpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTojaD9kuduGgGeT9gYMAxnmtku4ouHB223HYsgNu8XL1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1592005.83",
            "totalSupply": "998525315258724",
            "totalSupplyFormatted": "998525315.258724",
            "links": {
                "email": "contact@babyfwog.com",
                "telegram": "https://t.me/BabyFwogoff",
                "twitter": "https://x.com/itsbabyfwog",
                "website": "https://babyfwog.vip",
                "moralis": "https://moralis.com/chain/solana/token/price/3Bbj7eZTuMd2FrfeZ2degzckxhgB5b63crGoHLtrpump"
            },
            "description": null
        }
    },
    "baby-shark-meme": {
        "contract_address": "8nKP8Vc72pRZB6bhCy8D1UYf6ZjwYT859i6awyinpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8nKP8Vc72pRZB6bhCy8D1UYf6ZjwYT859i6awyinpump",
            "standard": "metaplex",
            "name": "Baby Shark Meme",
            "symbol": "BABYSHARK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8nKP8Vc72pRZB6bhCy8D1UYf6ZjwYT859i6awyinpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbiGBW9mRgZ5HP3SsNnAKjdFociRyDJgtp1v8BcGa6aDq",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4558653.53",
            "totalSupply": "999997923634688",
            "totalSupplyFormatted": "999997923.634688",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8nKP8Vc72pRZB6bhCy8D1UYf6ZjwYT859i6awyinpump"
            },
            "description": null
        }
    },
    "baby-wen": {
        "contract_address": "7pmuGLLYdJ2mc7chZwEJAaxuWALAYqaVqbUwzzyHcA7D",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7pmuGLLYdJ2mc7chZwEJAaxuWALAYqaVqbUwzzyHcA7D",
            "standard": "metaplex",
            "name": "Baby Wen",
            "symbol": "BWen",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7pmuGLLYdJ2mc7chZwEJAaxuWALAYqaVqbUwzzyHcA7D",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://quicknode.quicknode-ipfs.com/ipfs/Qmf5kNfREar9MJtdnzUdLdYRT8KeEdP9mrEU1aMFN5SrDy",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GwSMCtVztP5Sbfik5jPN8V444tFxGXMdVLUdAdPA9zU8",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1670376.10",
            "totalSupply": "99981953395910",
            "totalSupplyFormatted": "99981953.39591",
            "links": {
                "telegram": "https://t.me/BabyWenCoins",
                "twitter": "https://twitter.com/BabyWen_CTO",
                "website": "https://www.babywen.io",
                "moralis": "https://moralis.com/chain/solana/token/price/7pmuGLLYdJ2mc7chZwEJAaxuWALAYqaVqbUwzzyHcA7D"
            },
            "description": null
        }
    },
    "badcatsol": {
        "contract_address": "7MJuVYPNDxo3xh6U5kGVsrSxqRPaLzGNYunUUxGKY6kg",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7MJuVYPNDxo3xh6U5kGVsrSxqRPaLzGNYunUUxGKY6kg",
            "standard": "metaplex",
            "name": "BADCAT coin",
            "symbol": "BADCAT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7MJuVYPNDxo3xh6U5kGVsrSxqRPaLzGNYunUUxGKY6kg",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmPgZ5uvEd4MVagbrpDLBR3pQg4ETgdY9i3zz7ai64vFQ6",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HgR3Bw33kSYuS3veavWG1ic19g73LKaC8ZYZRHEKbqUT",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "882922.09",
            "totalSupply": "777777467561025338",
            "totalSupplyFormatted": "777777467.561025338",
            "links": {
                "instagram": "https://www.instagram.com/badcathero",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/badcathero",
                "twitter": "https://x.com/badcathero",
                "website": "https://badcatgang.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/7MJuVYPNDxo3xh6U5kGVsrSxqRPaLzGNYunUUxGKY6kg"
            },
            "description": null
        }
    },
    "bainance-labs": {
        "contract_address": "4tViJmZ7LKREaqxrh3tXeCB5TfK7o67W3WhykHrr49ZC",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4tViJmZ7LKREaqxrh3tXeCB5TfK7o67W3WhykHrr49ZC",
            "standard": "metaplex",
            "name": "bAInance labs",
            "symbol": "BAINANCE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4tViJmZ7LKREaqxrh3tXeCB5TfK7o67W3WhykHrr49ZC",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "305027.74",
            "totalSupply": "1099995818366378674",
            "totalSupplyFormatted": "1099995818.366378674",
            "links": {
                "twitter": "https://twitter.com/BainanceLabs",
                "website": "https://bainancelabs.com",
                "moralis": "https://moralis.com/chain/solana/token/price/4tViJmZ7LKREaqxrh3tXeCB5TfK7o67W3WhykHrr49ZC"
            },
            "description": null
        }
    },
    "bakkt": {
        "contract_address": "Hz4CJCpZky4YD75Zs2R2nBjP5wY6tYbraaT2hVZCpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Hz4CJCpZky4YD75Zs2R2nBjP5wY6tYbraaT2hVZCpump",
            "standard": "metaplex",
            "name": "BAKKT",
            "symbol": "BAKKT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Hz4CJCpZky4YD75Zs2R2nBjP5wY6tYbraaT2hVZCpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRwpSEEkXbdEEUXEEjPFWKHVmNiBRGYLrWigoV8XTRhLR",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "376250.87",
            "totalSupply": "999872085894187",
            "totalSupplyFormatted": "999872085.894187",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/bakktsolana",
                "twitter": "https://x.com/BakktOnSolana",
                "website": "https://bakkt.wtf/",
                "moralis": "https://moralis.com/chain/solana/token/price/Hz4CJCpZky4YD75Zs2R2nBjP5wY6tYbraaT2hVZCpump"
            },
            "description": null
        }
    },
    "balls-of-fate": {
        "contract_address": "4yCuUMPFvaqxK71CK6SZc3wmtC2PDpDN9mcBzUkepump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4yCuUMPFvaqxK71CK6SZc3wmtC2PDpDN9mcBzUkepump",
            "standard": "metaplex",
            "name": "Balls of Fate",
            "symbol": "$BOF",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4yCuUMPFvaqxK71CK6SZc3wmtC2PDpDN9mcBzUkepump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmZzk5xrLJbE8fAagKrk6G6mxEWmLyL7Rjdq92SPmLxm86",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1534826.01",
            "totalSupply": "999996099704902",
            "totalSupplyFormatted": "999996099.704902",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4yCuUMPFvaqxK71CK6SZc3wmtC2PDpDN9mcBzUkepump"
            },
            "description": null
        }
    },
    "bangchain-ai": {
        "contract_address": "8SVVCGzYwnAkDwwvc5fSHZdCenUyhPccnGirWecVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8SVVCGzYwnAkDwwvc5fSHZdCenUyhPccnGirWecVpump",
            "standard": "metaplex",
            "name": "Bangchain AI",
            "symbol": "BANGCHAIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8SVVCGzYwnAkDwwvc5fSHZdCenUyhPccnGirWecVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYfswKFG9HbbyhGPVMC1ACmgf9QJhyiKRvPvkXkUW6MW5",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "523703.28",
            "totalSupply": "999905077872768",
            "totalSupplyFormatted": "999905077.872768",
            "links": {
                "email": "inquiry@orifice.store",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/BangChainSOL",
                "twitter": "https://x.com/prince_of_fakes",
                "website": "https://www.orifice.store",
                "moralis": "https://moralis.com/chain/solana/token/price/8SVVCGzYwnAkDwwvc5fSHZdCenUyhPccnGirWecVpump"
            },
            "description": null
        }
    },
    "banjo": {
        "contract_address": "HmRpmbeGosahTzChmTmKzFHR5SmgSgXFAXKumajgpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HmRpmbeGosahTzChmTmKzFHR5SmgSgXFAXKumajgpump",
            "standard": "metaplex",
            "name": "Banjo",
            "symbol": "Banjo",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HmRpmbeGosahTzChmTmKzFHR5SmgSgXFAXKumajgpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdLdWfPuUd5xdLphnr2nZEFKXbaQBfaopzK1gin3qE5Tw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "468153.65",
            "totalSupply": "999967205609636",
            "totalSupplyFormatted": "999967205.609636",
            "links": {
                "telegram": "https://t.me/BanjoPortal",
                "twitter": "https://x.com/banjothefrog",
                "website": "https://banjo.life/",
                "moralis": "https://moralis.com/chain/solana/token/price/HmRpmbeGosahTzChmTmKzFHR5SmgSgXFAXKumajgpump"
            },
            "description": null
        }
    },
    "banx": {
        "contract_address": "BANXbTpN8U2cU41FjPxe2Ti37PiT5cCxLUKDQZuJeMMR",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BANXbTpN8U2cU41FjPxe2Ti37PiT5cCxLUKDQZuJeMMR",
            "standard": "metaplex",
            "name": "Banx",
            "symbol": "BANX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BANXbTpN8U2cU41FjPxe2Ti37PiT5cCxLUKDQZuJeMMR",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/OJzmpcpgo217DCNTydnWgbUFEpXgYMQDfAnQGlsQeDI",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BANXe9cmtM1kUDwnRzzmYAihdmaV1nPhs4ZhvzeGY52z",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "843381.51",
            "totalSupply": "14999582244620430757",
            "totalSupplyFormatted": "14999582244.620430757",
            "links": {
                "twitter": "https://twitter.com/banx_gg",
                "website": "https://www.banx.gg",
                "moralis": "https://moralis.com/chain/solana/token/price/BANXbTpN8U2cU41FjPxe2Ti37PiT5cCxLUKDQZuJeMMR"
            },
            "description": null
        }
    },
    "based": {
        "contract_address": "Em4rcuhX6STfB7mxb66dUXDmZPYCjDiQFthvzSzpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Em4rcuhX6STfB7mxb66dUXDmZPYCjDiQFthvzSzpump",
            "standard": "metaplex",
            "name": "BASED",
            "symbol": "BASED",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Em4rcuhX6STfB7mxb66dUXDmZPYCjDiQFthvzSzpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/uV2pCRnNO4TisurXJyckZ6cvJyabwmHRVmgS86UNEaQ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "884488.47",
            "totalSupply": "989616406327865",
            "totalSupplyFormatted": "989616406.327865",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+1PZ19znmFMxlY2U1",
                "twitter": "https://twitter.com/BASED__SOLANA",
                "website": "https://basedafsolana.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/Em4rcuhX6STfB7mxb66dUXDmZPYCjDiQFthvzSzpump"
            },
            "description": null
        }
    },
    "baskt-fun": {
        "contract_address": "Ejq4Xr7KwHtLPkfGr3DGkKSgyGCuZvsndeyj92yXpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Ejq4Xr7KwHtLPkfGr3DGkKSgyGCuZvsndeyj92yXpump",
            "standard": "metaplex",
            "name": "Baskt.fun",
            "symbol": "BASKT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Ejq4Xr7KwHtLPkfGr3DGkKSgyGCuZvsndeyj92yXpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQGkTVeibDEYMyGKgfcLTXs56j2GazwTL5Bfx562WAbNs",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "421394.27",
            "totalSupply": "999199182892911",
            "totalSupplyFormatted": "999199182.892911",
            "links": {
                "telegram": "https://t.me/basktfun",
                "twitter": "https://twitter.com/basktdotfun",
                "website": "https://www.baskt.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/Ejq4Xr7KwHtLPkfGr3DGkKSgyGCuZvsndeyj92yXpump"
            },
            "description": null
        }
    },
    "bc-token": {
        "contract_address": "BCNT4t3rv5Hva8RnUtJUJLnxzeFAabcYp8CghC1SmWin",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BCNT4t3rv5Hva8RnUtJUJLnxzeFAabcYp8CghC1SmWin",
            "standard": "metaplex",
            "name": "BCGame Coin",
            "symbol": "BC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BCNT4t3rv5Hva8RnUtJUJLnxzeFAabcYp8CghC1SmWin",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/VvxNeXfudYxzuXiZcrV3vsvafctH02uTBv3pMMJxFKs",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HK1nxeYaD4WKCHwJC4NaQNHRtByU6NXCBoFhXPjH4LzA",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "37472777.57",
            "totalSupply": "9998286401749729",
            "totalSupplyFormatted": "9998286401.749729",
            "links": {
                "discord": "https://discord.com/invite/xqUMQesZQq",
                "telegram": "https://t.me/bcgamewin",
                "twitter": "https://twitter.com/bcgameofficial",
                "website": "https://bc.game/",
                "moralis": "https://moralis.com/chain/solana/token/price/BCNT4t3rv5Hva8RnUtJUJLnxzeFAabcYp8CghC1SmWin"
            },
            "description": null
        }
    },
    "bear-in-bathrobe": {
        "contract_address": "PvhC1i1uu1xmB8bsaoTj3mLf1ihYdQo7MtVQebppump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "PvhC1i1uu1xmB8bsaoTj3mLf1ihYdQo7MtVQebppump",
            "standard": "metaplex",
            "name": "Bear in Bathrobe",
            "symbol": "BIB",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_PvhC1i1uu1xmB8bsaoTj3mLf1ihYdQo7MtVQebppump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qme8K4NqnJuKkBazDHFWag8iASuqFuTncezgQ2mc1wjduh",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2423469.32",
            "totalSupply": "999998894085378",
            "totalSupplyFormatted": "999998894.085378",
            "links": {
                "email": "general@bearinbathrobe.com",
                "telegram": "https://t.me/bearinbathrobe",
                "twitter": "https://x.com/bearinbathrobe",
                "website": "https://bearinbathrobe.com",
                "moralis": "https://moralis.com/chain/solana/token/price/PvhC1i1uu1xmB8bsaoTj3mLf1ihYdQo7MtVQebppump"
            },
            "description": null
        }
    },
    "beenz": {
        "contract_address": "9sbrLLnk4vxJajnZWXP9h5qk1NDFw7dz2eHjgemcpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9sbrLLnk4vxJajnZWXP9h5qk1NDFw7dz2eHjgemcpump",
            "standard": "metaplex",
            "name": "Beenz",
            "symbol": "Beenz",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9sbrLLnk4vxJajnZWXP9h5qk1NDFw7dz2eHjgemcpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmVg3grgb57UUFaqP2xTbgCwP1cYRi6LwXkWEjocin9cAD",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "733543.38",
            "totalSupply": "999939171956549",
            "totalSupplyFormatted": "999939171.956549",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/BeenzonSOL",
                "website": "https://beenzonsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/9sbrLLnk4vxJajnZWXP9h5qk1NDFw7dz2eHjgemcpump"
            },
            "description": null
        }
    },
    "beercoin-2": {
        "contract_address": "AujTJJ7aMS8LDo3bFzoyXDwT3jBALUbu4VZhzZdTZLmG",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AujTJJ7aMS8LDo3bFzoyXDwT3jBALUbu4VZhzZdTZLmG",
            "standard": "metaplex",
            "name": "BEER",
            "symbol": "$BEER",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AujTJJ7aMS8LDo3bFzoyXDwT3jBALUbu4VZhzZdTZLmG",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/Ho26uxZTJe_yP1nEVdcZ7vcHUChcrWNGz3CrtsjPFpA",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7yfvQXXhiR8dJx3q94sf1JWWxVFF9va1SWwpQTo9v394",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3873678.36",
            "totalSupply": "872450081243688228",
            "totalSupplyFormatted": "872450081243.688228",
            "links": {
                "reddit": "https://www.reddit.com",
                "website": "https://beercoin.wtf/",
                "moralis": "https://moralis.com/chain/solana/token/price/AujTJJ7aMS8LDo3bFzoyXDwT3jBALUbu4VZhzZdTZLmG"
            },
            "description": null
        }
    },
    "believe-in-something": {
        "contract_address": "2GPJhV9jNrj7TaLYMRgWkcy6sTKLcwntv7nZ7qDyMRGM",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2GPJhV9jNrj7TaLYMRgWkcy6sTKLcwntv7nZ7qDyMRGM",
            "standard": "metaplex",
            "name": "Believe In Something",
            "symbol": "bis",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2GPJhV9jNrj7TaLYMRgWkcy6sTKLcwntv7nZ7qDyMRGM",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/Qmbz41wbF5jmM9hhy3d7xxgsZeViFxSkE5ZsM6CNSxrhWC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "658627.78",
            "totalSupply": "999694577424306",
            "totalSupplyFormatted": "999694577.424306",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/BelieveInSmth",
                "moralis": "https://moralis.com/chain/solana/token/price/2GPJhV9jNrj7TaLYMRgWkcy6sTKLcwntv7nZ7qDyMRGM"
            },
            "description": null
        }
    },
    "ben-the-dog": {
        "contract_address": "AHW5N8iqZobTcBepkSJzZ61XtAuSzBDcpxtrLG6KUKPk",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AHW5N8iqZobTcBepkSJzZ61XtAuSzBDcpxtrLG6KUKPk",
            "standard": "metaplex",
            "name": "Ben the Dog",
            "symbol": "BENDOG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AHW5N8iqZobTcBepkSJzZ61XtAuSzBDcpxtrLG6KUKPk",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/bafkreidz4stoonaemdr7ig624f7xo4g54yvexcl7jdl4zddkzxgol6wudu",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "cjn4dDGXFh64W4Fo7Ykr3KQ48uFEfaMYzJDeGZmvpR9",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2766527.79",
            "totalSupply": "999971729168664441",
            "totalSupplyFormatted": "999971729.168664441",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/AHW5N8iqZobTcBepkSJzZ61XtAuSzBDcpxtrLG6KUKPk"
            },
            "description": null
        }
    },
    "bertram-the-pomeranian": {
        "contract_address": "HgBRWfYxEfvPhtqkaeymCQtHCrKE46qQ43pKe8HCpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HgBRWfYxEfvPhtqkaeymCQtHCrKE46qQ43pKe8HCpump",
            "standard": "metaplex",
            "name": "Bertram The Pomeranian",
            "symbol": "Bert",
            "logo": "https://adds-token-info-29a861f.s3.amazonaws.com/solana/HgBRWfYxEfvPhtqkaeymCQtHCrKE46qQ43pKe8HCpump/logo.webp",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmNxxaTGgX3sTZV6jTgKyy5a33iFpQMjoWmcFUFfhohw5C",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "14997254.47",
            "totalSupply": "979734433777892",
            "totalSupplyFormatted": "979734433.777892",
            "links": {
                "telegram": "https://t.me/bertsolanaportal",
                "moralis": "https://moralis.com/chain/solana/token/price/HgBRWfYxEfvPhtqkaeymCQtHCrKE46qQ43pKe8HCpump"
            },
            "description": "The famous dog abandoned by breeders, adopted and crowned mayor by the people of Solana."
        }
    },
    "bet-more": {
        "contract_address": "5CLSw4viyMLfnRHHxZpDF8CuZt5e1ceq1AJqd4GjAJNX",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5CLSw4viyMLfnRHHxZpDF8CuZt5e1ceq1AJqd4GjAJNX",
            "standard": "metaplex",
            "name": "Bet more",
            "symbol": "BET",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5CLSw4viyMLfnRHHxZpDF8CuZt5e1ceq1AJqd4GjAJNX",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmS1CbJWt57gJZsEUzx5aRmfK9XRF3fD3MariLK6zrGcHa",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "368970.57",
            "totalSupply": "997794846667505",
            "totalSupplyFormatted": "997794846.667505",
            "links": {
                "telegram": "https://t.me/betmoreonsol",
                "twitter": "https://twitter.com/betmoreonsol",
                "website": "https://betmore.lol/",
                "moralis": "https://moralis.com/chain/solana/token/price/5CLSw4viyMLfnRHHxZpDF8CuZt5e1ceq1AJqd4GjAJNX"
            },
            "description": null
        }
    },
    "beth": {
        "contract_address": "7uJrMsDN2Wxdc3VAq1iK9N5AHaTA7wUpbm1wqRonpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7uJrMsDN2Wxdc3VAq1iK9N5AHaTA7wUpbm1wqRonpump",
            "standard": "metaplex",
            "name": "Beth",
            "symbol": "BETH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7uJrMsDN2Wxdc3VAq1iK9N5AHaTA7wUpbm1wqRonpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmd1mperXaP1N5hGv6iXcY5dJVTbY6RR3uMFsgwMCYKc3W",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "332004.02",
            "totalSupply": "989951568597857",
            "totalSupplyFormatted": "989951568.597857",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7uJrMsDN2Wxdc3VAq1iK9N5AHaTA7wUpbm1wqRonpump"
            },
            "description": null
        }
    },
    "biao-on-sol": {
        "contract_address": "2ru87k7yAZnDRsnqVpgJYETFgqVApuBcwB2xDb19pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2ru87k7yAZnDRsnqVpgJYETFgqVApuBcwB2xDb19pump",
            "standard": "metaplex",
            "name": "BIAO",
            "symbol": "BIAO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2ru87k7yAZnDRsnqVpgJYETFgqVApuBcwB2xDb19pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmbw93VjFPE5sDHv6aB82oiJjNCo4JtuTjfEeeAoepHuLt",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "617227.03",
            "totalSupply": "999912562910791",
            "totalSupplyFormatted": "999912562.910791",
            "links": {
                "telegram": "https://t.me/BIAOtokensol",
                "twitter": "https://x.com/BIAO_meme",
                "website": "https://biaotoken.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/2ru87k7yAZnDRsnqVpgJYETFgqVApuBcwB2xDb19pump"
            },
            "description": null
        }
    },
    "big-dog-fink": {
        "contract_address": "CeK6k4BMmiqkxkzYAbQuUp3hrVFSHxuQ1LJXmNybc3vz",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CeK6k4BMmiqkxkzYAbQuUp3hrVFSHxuQ1LJXmNybc3vz",
            "standard": "metaplex",
            "name": "Big Dog Fink",
            "symbol": "BINK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CeK6k4BMmiqkxkzYAbQuUp3hrVFSHxuQ1LJXmNybc3vz",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://arweave.net/PRIQb-BsMGy1CEcxGZR4WfaIZflCXdYS8TTQ6-M2oVs",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BnFy6fs1jJ1AwxEsCXwaeu3UN9NfAaBTRs5MVEKmYdK3",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "38124879.77",
            "totalSupply": "14893927467606261",
            "totalSupplyFormatted": "148939274676.06261",
            "links": {
                "telegram": "https://t.me/bigdogfink",
                "twitter": "https://twitter.com/bigdogfink",
                "website": "https://bigdogfink.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/CeK6k4BMmiqkxkzYAbQuUp3hrVFSHxuQ1LJXmNybc3vz"
            },
            "description": null
        }
    },
    "big-jim": {
        "contract_address": "HbACvu9eKjCJE7h4oGFSnX6fvbDqwugRGYeuJebRVBkR",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HbACvu9eKjCJE7h4oGFSnX6fvbDqwugRGYeuJebRVBkR",
            "standard": "metaplex",
            "name": "BIG JIM",
            "symbol": "BIGJIM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HbACvu9eKjCJE7h4oGFSnX6fvbDqwugRGYeuJebRVBkR",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmNYYp7QgGVNLGoyYHfJHiRr6ryDH8oXqiLqD6Zwp1gAv1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "38VyuFVZgxmpnR55PAYKnMZpWhcpGgZAjcTikJGZAyou",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3783638.32",
            "totalSupply": "98866953837913439",
            "totalSupplyFormatted": "988669538379.13439",
            "links": {
                "telegram": "https://t.me/bigjimsolana",
                "twitter": "https://twitter.com/Bigjim_sol",
                "website": "https://www.bigjim.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/HbACvu9eKjCJE7h4oGFSnX6fvbDqwugRGYeuJebRVBkR"
            },
            "description": null
        }
    },
    "big-pharmai": {
        "contract_address": "CX9YDTED9TWgVXVoFy8JL9gSSAEWcTv4mzjLSv17LQsj",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CX9YDTED9TWgVXVoFy8JL9gSSAEWcTv4mzjLSv17LQsj",
            "standard": "metaplex",
            "name": "Big Pharmai",
            "symbol": "DRUGS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CX9YDTED9TWgVXVoFy8JL9gSSAEWcTv4mzjLSv17LQsj",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1508982.02",
            "totalSupply": "1099999064837886170",
            "totalSupplyFormatted": "1099999064.83788617",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/CX9YDTED9TWgVXVoFy8JL9gSSAEWcTv4mzjLSv17LQsj"
            },
            "description": null
        }
    },
    "bigfacts": {
        "contract_address": "8U5SJfExR7QMhPWWKLFV5F9L8mX3vioEP29GxocBpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8U5SJfExR7QMhPWWKLFV5F9L8mX3vioEP29GxocBpump",
            "standard": "metaplex",
            "name": "BIG FACTS",
            "symbol": "BIGFACTS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8U5SJfExR7QMhPWWKLFV5F9L8mX3vioEP29GxocBpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPH4Dh4Kw7Bk1gXpE3keSbhfMAYdPaoDaQwn2giwG1Bua",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "338242.45",
            "totalSupply": "499999188962927",
            "totalSupplyFormatted": "499999188.962927",
            "links": {
                "email": "team@bigfacts.io",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/BIGFACTSportal",
                "tiktok": "https://www.tiktok.com/@big_facts_on_sol",
                "twitter": "https://x.com/BIGFACTSonSOL",
                "website": "https://www.bigfacts.io",
                "moralis": "https://moralis.com/chain/solana/token/price/8U5SJfExR7QMhPWWKLFV5F9L8mX3vioEP29GxocBpump"
            },
            "description": null
        }
    },
    "billy": {
        "contract_address": "3B5wuUrMEi5yATD7on46hKfej3pfmd7t1RKgrsN3pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3B5wuUrMEi5yATD7on46hKfej3pfmd7t1RKgrsN3pump",
            "standard": "metaplex",
            "name": "BILLY",
            "symbol": "BILLY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3B5wuUrMEi5yATD7on46hKfej3pfmd7t1RKgrsN3pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmY3epPEsekJtJe5wQFcCD5YUowSPE2bkPJ1L6XL8aZimx",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2983289.22",
            "totalSupply": "982911653479571",
            "totalSupplyFormatted": "982911653.479571",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/3B5wuUrMEi5yATD7on46hKfej3pfmd7t1RKgrsN3pump"
            },
            "description": null
        }
    },
    "billy-bets-by-virtuals": {
        "contract_address": "9Rhbn9G5poLvgnFzuYBtJgbzmiipNra35QpnUek9virt",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9Rhbn9G5poLvgnFzuYBtJgbzmiipNra35QpnUek9virt",
            "standard": "metaplex",
            "name": "Billy Bets by VIRTUALS",
            "symbol": "BILLY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9Rhbn9G5poLvgnFzuYBtJgbzmiipNra35QpnUek9virt",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://vpmodels-prod.s3.ap-southeast-1.amazonaws.com/virtual-21045/virtual-21045.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5ZZRXRno4MkLrqQCSvSdZZbaqER2ZEZG7weJKQKzJaVt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4544421.34",
            "totalSupply": "999998533724731",
            "totalSupplyFormatted": "999998533.724731",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/9Rhbn9G5poLvgnFzuYBtJgbzmiipNra35QpnUek9virt"
            },
            "description": null
        }
    },
    "binance-staked-sol": {
        "contract_address": "BNso1VUJnh4zcfpZa6986Ea66P6TCp59hvtNJ8b1X85",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BNso1VUJnh4zcfpZa6986Ea66P6TCp59hvtNJ8b1X85",
            "standard": "metaplex",
            "name": "Binance Staked SOL",
            "symbol": "BNSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BNso1VUJnh4zcfpZa6986Ea66P6TCp59hvtNJ8b1X85",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/27IIs9ILSTPBlDykcWdiM-8WwjXfudFZwnV34C7S2sA",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "75NPzpxoh8sXGuSENFMREidq6FMzEx4g2AfcBEB6qjCV",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "958073246.90",
            "totalSupply": "6726908858836450",
            "totalSupplyFormatted": "6726908.85883645",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/binance",
                "website": "https://www.binance.com/en/solana-staking",
                "moralis": "https://moralis.com/chain/solana/token/price/BNso1VUJnh4zcfpZa6986Ea66P6TCp59hvtNJ8b1X85"
            },
            "description": null
        }
    },
    "bingus-the-cat": {
        "contract_address": "AQuuQ4xktyzGBFnbKHnYsXHxsKVQetAoiPeCEG97NUJw",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AQuuQ4xktyzGBFnbKHnYsXHxsKVQetAoiPeCEG97NUJw",
            "standard": "metaplex",
            "name": "Bingus The Cat",
            "symbol": "BINGUS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AQuuQ4xktyzGBFnbKHnYsXHxsKVQetAoiPeCEG97NUJw",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmXnfrUk9V3od1ZLA6iqG3YBKKeJhXyGm9w2dG129TkUZb",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "d3m6v8Kia8HDpwDAbDad63pjmW4xSdsZeW9ZYrdJ72B",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "551987.53",
            "totalSupply": "999863297609534776",
            "totalSupplyFormatted": "999863297.609534776",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/AQuuQ4xktyzGBFnbKHnYsXHxsKVQetAoiPeCEG97NUJw"
            },
            "description": null
        }
    },
    "birdflu": {
        "contract_address": "EUxS8Kqvbe8zDr8bG1RYtgjVNzEhMTG6B6H3WwrCHfwA",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EUxS8Kqvbe8zDr8bG1RYtgjVNzEhMTG6B6H3WwrCHfwA",
            "standard": "metaplex",
            "name": "Bird Flu ",
            "symbol": "BIRDFLU",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EUxS8Kqvbe8zDr8bG1RYtgjVNzEhMTG6B6H3WwrCHfwA",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcLoLMC3SQuM2n3cZiMmiq8sjABuarZzj4ZPXotRCszZ1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HtLqgXnuGptBRJAgVpHKT16M3bRrt4qhh2uxJ1coE7Ey",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "218033.50",
            "totalSupply": "999768420035962583",
            "totalSupplyFormatted": "999768420.035962583",
            "links": {
                "github": "https://github.com/Metzy88",
                "telegram": "https://t.me/birdflusol",
                "twitter": "https://x.com/BIRDFLUsol",
                "website": "https://birdflusol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/EUxS8Kqvbe8zDr8bG1RYtgjVNzEhMTG6B6H3WwrCHfwA"
            },
            "description": null
        }
    },
    "bitcat-3": {
        "contract_address": "4j9bDg7iWNah1Qa61rrqwWZMtEdqV3fV56SzyhfNpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4j9bDg7iWNah1Qa61rrqwWZMtEdqV3fV56SzyhfNpump",
            "standard": "metaplex",
            "name": "Bitcat",
            "symbol": "BITCAT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4j9bDg7iWNah1Qa61rrqwWZMtEdqV3fV56SzyhfNpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmREMFHqZ3M9HhX1QG7aFYeLZEcB8MQVhf7fR51szTiVHJ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "369617.62",
            "totalSupply": "999909688211945",
            "totalSupplyFormatted": "999909688.211945",
            "links": {
                "email": "mascotbitcat@gmail.com",
                "telegram": "https://t.me/SolanaBitcat",
                "twitter": "https://x.com/BitCat_sol_",
                "website": "https://solanabitcat.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/4j9bDg7iWNah1Qa61rrqwWZMtEdqV3fV56SzyhfNpump"
            },
            "description": null
        }
    },
    "bitget-staked-sol": {
        "contract_address": "bgSoLfRx1wRPehwC9TyG568AGjnf1sQG1MYa8s3FbfY",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "bgSoLfRx1wRPehwC9TyG568AGjnf1sQG1MYa8s3FbfY",
            "standard": "metaplex",
            "name": "Bitget Staked SOL",
            "symbol": "BGSOL",
            "logo": null,
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://img.bgstatic.com/bgsol/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "EVhp44NGYxxrxhv2NyFyErEKcsiffvssju5K7C5xydye",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": null,
            "totalSupply": "107880420775185",
            "totalSupplyFormatted": "107880.420775185",
            "links": null,
            "description": null
        }
    },
    "black-devil": {
        "contract_address": "DjgujfEv2u2qz7PNuS6Ct7bctnxPFihfWE2zBpKZpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DjgujfEv2u2qz7PNuS6Ct7bctnxPFihfWE2zBpKZpump",
            "standard": "metaplex",
            "name": "Black Devil",
            "symbol": "ANGLERFISH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DjgujfEv2u2qz7PNuS6Ct7bctnxPFihfWE2zBpKZpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVk7PPUpUZgvNfEYRrDsBqCYjkLbeFJy6bzrqXV2zKXjH",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5389996.68",
            "totalSupply": "999925734659558",
            "totalSupplyFormatted": "999925734.659558",
            "links": {
                "telegram": "https://t.me/anglerfish_portal",
                "twitter": "https://x.com/anglerfishdevil",
                "website": "https://anglerfishsol.com",
                "moralis": "https://moralis.com/chain/solana/token/price/DjgujfEv2u2qz7PNuS6Ct7bctnxPFihfWE2zBpKZpump"
            },
            "description": null
        }
    },
    "blackrack": {
        "contract_address": "D7yP4ycfsRWUGYionGpi64sLF2ddZ2JXxuRAti2M7uck",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "D7yP4ycfsRWUGYionGpi64sLF2ddZ2JXxuRAti2M7uck",
            "standard": "metaplex",
            "name": "BlackRack",
            "symbol": "RACKS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_D7yP4ycfsRWUGYionGpi64sLF2ddZ2JXxuRAti2M7uck",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmP9am4mLeLAdRtvzF1AEzgPTvU1aPNWqxbkaNEnQ6jsWG",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BEhX8iDgWz8YHDr8dhCQcvxfv2shjxUDxnvnpVsh63XS",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1124692.77",
            "totalSupply": "999987348424170",
            "totalSupplyFormatted": "999987348.42417",
            "links": {
                "telegram": "https://t.me/blackrack_ai",
                "twitter": "https://twitter.com/blackrack_ai",
                "website": "https://blackrack.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/D7yP4ycfsRWUGYionGpi64sLF2ddZ2JXxuRAti2M7uck"
            },
            "description": null
        }
    },
    "blacktail-ai": {
        "contract_address": "tABry1BGSzqx5FAP4fiWo5VYjWEthsPVvi8GJNwpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "tABry1BGSzqx5FAP4fiWo5VYjWEthsPVvi8GJNwpump",
            "standard": "metaplex",
            "name": "Blacktail AI",
            "symbol": "BLACK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_tABry1BGSzqx5FAP4fiWo5VYjWEthsPVvi8GJNwpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmbJDANipcogeUzzKY8JVjX8MuAdbHmXq4EFFezoruPUdt",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "246932.60",
            "totalSupply": "999957893777204",
            "totalSupplyFormatted": "999957893.777204",
            "links": {
                "email": "info@blacktail.ai",
                "github": "https://github.com/BlacktailAI",
                "telegram": "https://t.me/blacktailAI",
                "twitter": "https://x.com/BlackTailAI",
                "website": "https://blacktail.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/tABry1BGSzqx5FAP4fiWo5VYjWEthsPVvi8GJNwpump"
            },
            "description": null
        }
    },
    "blinkdotfun": {
        "contract_address": "b1nkm6skdrwXoMku8CVx8Fk4LfC2jAqxV3m9VDNjYqz",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "b1nkm6skdrwXoMku8CVx8Fk4LfC2jAqxV3m9VDNjYqz",
            "standard": "metaplex",
            "name": "blinkdotfun",
            "symbol": "BLINK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_b1nkm6skdrwXoMku8CVx8Fk4LfC2jAqxV3m9VDNjYqz",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmYJrySyAwvaq3BfbE5N45q7NaVbNYkdtA2BdNLRakaAeq",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "670160.40",
            "totalSupply": "999597869727947",
            "totalSupplyFormatted": "999597869.727947",
            "links": {
                "twitter": "https://twitter.com/blinkdotfun",
                "website": "https://blnk.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/b1nkm6skdrwXoMku8CVx8Fk4LfC2jAqxV3m9VDNjYqz"
            },
            "description": null
        }
    },
    "blinks-gg": {
        "contract_address": "62CsquahdQ3J286G9UTqV6whxryfihdV4yg7kSJnpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "62CsquahdQ3J286G9UTqV6whxryfihdV4yg7kSJnpump",
            "standard": "metaplex",
            "name": "Blinks.gg",
            "symbol": "BGG1",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_62CsquahdQ3J286G9UTqV6whxryfihdV4yg7kSJnpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmXz72Aa4TkZXKKppWmKFJnxztACXHUq4KdesFP1dWV3M7",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1026192.84",
            "totalSupply": "999943326823586",
            "totalSupplyFormatted": "999943326.823586",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/blinks_gg",
                "twitter": "https://twitter.com/blinks_gg",
                "website": "https://www.blinks.gg/",
                "moralis": "https://moralis.com/chain/solana/token/price/62CsquahdQ3J286G9UTqV6whxryfihdV4yg7kSJnpump"
            },
            "description": null
        }
    },
    "blockdrop": {
        "contract_address": "DcJLACAUR25RujgxBVhZtcWPCTjzSw6YDM8E7oipiT3k",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DcJLACAUR25RujgxBVhZtcWPCTjzSw6YDM8E7oipiT3k",
            "standard": "metaplex",
            "name": "BlockDrop",
            "symbol": "BDROP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DcJLACAUR25RujgxBVhZtcWPCTjzSw6YDM8E7oipiT3k",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreiar2pj3g56nzu3bwpi6hia2qjdjllzxlvssjhjpn4t25edb6fpjby.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9NDjmJZNEpSxspnJmSFuofQ7PzC2SitrArzFxXNjRC4C",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "221583.79",
            "totalSupply": "9999904188616",
            "totalSupplyFormatted": "9999904.188616",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/DcJLACAUR25RujgxBVhZtcWPCTjzSw6YDM8E7oipiT3k"
            },
            "description": null
        }
    },
    "blocto-token": {
        "contract_address": "BLT1noyNr3GttckEVrtcfC6oyK6yV1DpPgSyXbncMwef",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BLT1noyNr3GttckEVrtcfC6oyK6yV1DpPgSyXbncMwef",
            "standard": "metaplex",
            "name": "Blocto",
            "symbol": "BLT",
            "logo": null,
            "decimals": "8",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": null,
            "totalSupply": "4587717296345372",
            "totalSupplyFormatted": "45877172.96345372",
            "links": null,
            "description": null
        }
    },
    "bloomsperg-terminal": {
        "contract_address": "4vKEwZ2ZHmHFuQEE69emXV2Zq1EKeJYVCESsMqydpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4vKEwZ2ZHmHFuQEE69emXV2Zq1EKeJYVCESsMqydpump",
            "standard": "metaplex",
            "name": "Bloomsperg Terminal",
            "symbol": "SPERG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4vKEwZ2ZHmHFuQEE69emXV2Zq1EKeJYVCESsMqydpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdGQ4f6a2WMzynJYKnRpXCB67cJfci24YBrK1FQGAzUcY",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "703527.21",
            "totalSupply": "992677208610044",
            "totalSupplyFormatted": "992677208.610044",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/spergai",
                "twitter": "https://twitter.com/sperg_ai",
                "website": "https://sperg.wtf/",
                "moralis": "https://moralis.com/chain/solana/token/price/4vKEwZ2ZHmHFuQEE69emXV2Zq1EKeJYVCESsMqydpump"
            },
            "description": null
        }
    },
    "boba-oppa": {
        "contract_address": "bobaM3u8QmqZhY1HwAtnvze9DLXvkgKYk3td3t8MLva",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "bobaM3u8QmqZhY1HwAtnvze9DLXvkgKYk3td3t8MLva",
            "standard": "metaplex",
            "name": "Boba Oppa",
            "symbol": "BOBAOPPA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_bobaM3u8QmqZhY1HwAtnvze9DLXvkgKYk3td3t8MLva",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreieqhknykslclva5xolq34gbacb63nhragnn4fjviakhfem22yxoua.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "oppaUsfWSPQpK6NT4F6G2jBPxC9arEHeNDpdukT4r2L",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "8125767.49",
            "totalSupply": "19999772309830598",
            "totalSupplyFormatted": "19999772309.830598",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/bobaM3u8QmqZhY1HwAtnvze9DLXvkgKYk3td3t8MLva"
            },
            "description": null
        }
    },
    "boblles": {
        "contract_address": "nnt8dZU4ZSiPXUdcmku4VcJFmhp7SsNDipzBKSppump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "nnt8dZU4ZSiPXUdcmku4VcJFmhp7SsNDipzBKSppump",
            "standard": "metaplex",
            "name": "Boblles",
            "symbol": "BOBLS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_nnt8dZU4ZSiPXUdcmku4VcJFmhp7SsNDipzBKSppump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmU7h69wZxti3C8irPGe2eTTFrcKXtviSaepWuJLB39gHS",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1008280.53",
            "totalSupply": "999988620079475",
            "totalSupplyFormatted": "999988620.079475",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/nnt8dZU4ZSiPXUdcmku4VcJFmhp7SsNDipzBKSppump"
            },
            "description": null
        }
    },
    "bogdanoff-2": {
        "contract_address": "4WMcTsfEMNwhpPhfWDrnKAGintoFhmRcN5p1UDB6pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4WMcTsfEMNwhpPhfWDrnKAGintoFhmRcN5p1UDB6pump",
            "standard": "metaplex",
            "name": "BOGDANOFF",
            "symbol": "PUMPIT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4WMcTsfEMNwhpPhfWDrnKAGintoFhmRcN5p1UDB6pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXLrr1WWMo7DaskAZGust9e7GDtVrmYeiAiBjEpxgBhQZ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2441214.50",
            "totalSupply": "999998566160797",
            "totalSupplyFormatted": "999998566.160797",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4WMcTsfEMNwhpPhfWDrnKAGintoFhmRcN5p1UDB6pump"
            },
            "description": null
        }
    },
    "bonfida": {
        "contract_address": "EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp",
            "standard": "metaplex",
            "name": "Bonfida",
            "symbol": "FIDA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "68imzQS8eMeN9x7EwFYVABVevX8YAPzWqdhUuzPz4C2a",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "111833312.12",
            "totalSupply": "990911775945961",
            "totalSupplyFormatted": "990911775.945961",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp"
            },
            "description": null
        }
    },
    "bongo-cat": {
        "contract_address": "HUdqc5MR5h3FssESabPnQ1GTgTcPvnNudAuLj5J6a9sU",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HUdqc5MR5h3FssESabPnQ1GTgTcPvnNudAuLj5J6a9sU",
            "standard": "metaplex",
            "name": "Bongo Cat",
            "symbol": "BONGO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HUdqc5MR5h3FssESabPnQ1GTgTcPvnNudAuLj5J6a9sU",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://i.degencdn.com/ipfs/bafkreigt34sp6w74arzse454c627qugzinf5xl6ogr2nbaie4w4xbc3jlq",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Akozfyej8oWvTXuia38SX28tvgZawxjbTfPBhZLpHcqZ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4337608.01",
            "totalSupply": "999710295748634797",
            "totalSupplyFormatted": "999710295.748634797",
            "links": {
                "telegram": "https://t.me/thebongocat",
                "twitter": "https://x.com/TheBongoCat",
                "website": "https://thebongocat.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/HUdqc5MR5h3FssESabPnQ1GTgTcPvnNudAuLj5J6a9sU"
            },
            "description": null
        }
    },
    "bonkersmemetoken": {
        "contract_address": "2ztfMWS76tFVd84MNefvjiNHDCNwQ6ShtWXMQGKFQnjL",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2ztfMWS76tFVd84MNefvjiNHDCNwQ6ShtWXMQGKFQnjL",
            "standard": "metaplex",
            "name": "BonkersMemeToken",
            "symbol": "$Bonkers",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2ztfMWS76tFVd84MNefvjiNHDCNwQ6ShtWXMQGKFQnjL",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmeejPKjYEmyhEnBN3jneaf6CfBPnkXzodDe4hC5wgkwK4",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BL83QXypjk8vL4mkmBWK9u2EGtxb1JAdnkDfXuMnosHx",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "297641.67",
            "totalSupply": "977730418956538305",
            "totalSupplyFormatted": "977730418.956538305",
            "links": {
                "discord": "https://discord.gg/KgBF6bkH",
                "telegram": "https://t.me/bonkersmemetoken",
                "twitter": "https://x.com/BonkersMemeTkn",
                "website": "https://bonkersmeme.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/2ztfMWS76tFVd84MNefvjiNHDCNwQ6ShtWXMQGKFQnjL"
            },
            "description": null
        }
    },
    "booh-world-sol": {
        "contract_address": "bttEP13PVTuvGzpNEVhU4Q7FDjBbQx22zXJG38xxMEE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "bttEP13PVTuvGzpNEVhU4Q7FDjBbQx22zXJG38xxMEE",
            "standard": "metaplex",
            "name": "BOOH",
            "symbol": "BOOH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_bttEP13PVTuvGzpNEVhU4Q7FDjBbQx22zXJG38xxMEE",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://raw.githubusercontent.com/Two-Foot-Studios/BoohTokenMetadata/refs/heads/main/metadata.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "LhufrpFbnTaZejwXiXwuDFBMig26Ks7SNYUnTPHKXTm",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2529409.97",
            "totalSupply": "239999662866025924",
            "totalSupplyFormatted": "239999662.866025924",
            "links": {
                "email": "info@boohworld.com",
                "github": "https://github.com/Two-Foot-Studios/",
                "instagram": "https://www.instagram.com/boohworld.io/",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/BOOHWORLD",
                "tiktok": "https://www.tiktok.com/@boohworld",
                "twitter": "https://x.com/boohtoken",
                "website": "https://boohworld.io/",
                "youtube": "https://www.youtube.com/@BOOHWORLD",
                "moralis": "https://moralis.com/chain/solana/token/price/bttEP13PVTuvGzpNEVhU4Q7FDjBbQx22zXJG38xxMEE"
            },
            "description": null
        }
    },
    "booji": {
        "contract_address": "CEvvz6J1NAxyE5uYBdWNqjMVMKCy7wSu5VVaBDN9pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CEvvz6J1NAxyE5uYBdWNqjMVMKCy7wSu5VVaBDN9pump",
            "standard": "metaplex",
            "name": "BOOJI",
            "symbol": "BOOJI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CEvvz6J1NAxyE5uYBdWNqjMVMKCy7wSu5VVaBDN9pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXGFGJoJTJBEbsCdtSLFHCmcthyTYPgqRXySAdERCZEDS",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "285753.36",
            "totalSupply": "999906775775263",
            "totalSupplyFormatted": "999906775.775263",
            "links": {
                "telegram": "https://t.me/boojisol",
                "twitter": "https://twitter.com/boojimemecoin",
                "website": "https://boojimemecoin.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/CEvvz6J1NAxyE5uYBdWNqjMVMKCy7wSu5VVaBDN9pump"
            },
            "description": null
        }
    },
    "book-of-dyor": {
        "contract_address": "DidjvEEFLk31yEjTkxf6CfNi6RcsUjPS6qHNTVzhApNU",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DidjvEEFLk31yEjTkxf6CfNi6RcsUjPS6qHNTVzhApNU",
            "standard": "metaplex",
            "name": "Book of DYOR",
            "symbol": "DYOR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DidjvEEFLk31yEjTkxf6CfNi6RcsUjPS6qHNTVzhApNU",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmTuJ5RsgS65a2zMQyrgeXZnePgwzmR4pmwHH8Q9TpTC8a",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "335796.21",
            "totalSupply": "996984099388780",
            "totalSupplyFormatted": "996984099.38878",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/DidjvEEFLk31yEjTkxf6CfNi6RcsUjPS6qHNTVzhApNU"
            },
            "description": null
        }
    },
    "book-of-meme": {
        "contract_address": "ukHH6c7mMyiWCf1b9pnWe25TSpkDDt3H5pQZgZ74J82",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ukHH6c7mMyiWCf1b9pnWe25TSpkDDt3H5pQZgZ74J82",
            "standard": "metaplex",
            "name": "BOOK OF MEME",
            "symbol": "BOME",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ukHH6c7mMyiWCf1b9pnWe25TSpkDDt3H5pQZgZ74J82",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreifi2rtjfhynuvm423e2655frhjeby3k6hiu64way4wlnehkffscfy.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "E4X8Fihh8RHwwtCPN4XFUFc1F7iygBX3evfLjQnMFak9",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "116330315.44",
            "totalSupply": "68953195433077523",
            "totalSupplyFormatted": "68953195433.077523",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/BOOK_OF_MEME",
                "twitter": "https://x.com/Darkfarms1",
                "website": "https://bomebookofmemes.com",
                "moralis": "https://moralis.com/chain/solana/token/price/ukHH6c7mMyiWCf1b9pnWe25TSpkDDt3H5pQZgZ74J82"
            },
            "description": null
        }
    },
    "bookofbullrun": {
        "contract_address": "BGehTcKraAndWS3B6cq7UVUXQy4uDY49tANEprsTrUo7",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BGehTcKraAndWS3B6cq7UVUXQy4uDY49tANEprsTrUo7",
            "standard": "metaplex",
            "name": "BookOfBullrun",
            "symbol": "$BOOB",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BGehTcKraAndWS3B6cq7UVUXQy4uDY49tANEprsTrUo7",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreigcmphj3scaevob573vwxytxol557jkn6pmrbbbrd4dtmconrx7fi.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "59CC3jDpcypMGwbik2NgZgy95gPtbFhTZ4mNPk4jRB9L",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "289546.44",
            "totalSupply": "979782944035359",
            "totalSupplyFormatted": "979782944.035359",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/bookofbullrunsol",
                "twitter": "https://x.com/BookOfBullrunx",
                "website": "https://bookofbullrun.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/BGehTcKraAndWS3B6cq7UVUXQy4uDY49tANEprsTrUo7"
            },
            "description": null
        }
    },
    "bop-cat": {
        "contract_address": "F5hqdbykXuksp8P78CAZenSvpPShAYKrP2U2MiZMdgFN",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F5hqdbykXuksp8P78CAZenSvpPShAYKrP2U2MiZMdgFN",
            "standard": "metaplex",
            "name": "bop cat",
            "symbol": "bop",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_F5hqdbykXuksp8P78CAZenSvpPShAYKrP2U2MiZMdgFN",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmVY7q2QcJstq4mfRtrguTbcTFDeY9N6qkqhs9tpTk9cGe",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "491133.68",
            "totalSupply": "998736528150420",
            "totalSupplyFormatted": "998736528.15042",
            "links": {
                "telegram": "https://t.me/Bopcatverify",
                "twitter": "https://twitter.com/ogbopcat",
                "website": "https://pump.fun/coin/F5hqdbykXuksp8P78CAZenSvpPShAYKrP2U2MiZMdgFN",
                "moralis": "https://moralis.com/chain/solana/token/price/F5hqdbykXuksp8P78CAZenSvpPShAYKrP2U2MiZMdgFN"
            },
            "description": null
        }
    },
    "borgy": {
        "contract_address": "BorGY4ub2Fz4RLboGxnuxWdZts7EKhUTB624AFmfCgX",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BorGY4ub2Fz4RLboGxnuxWdZts7EKhUTB624AFmfCgX",
            "standard": "metaplex",
            "name": "Borgy",
            "symbol": "BORGY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BorGY4ub2Fz4RLboGxnuxWdZts7EKhUTB624AFmfCgX",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://bafybeid26jqb6tzcywf66zrzraauzo4zjde6pgg2upjpnfaejjiybb5h4y.ipfs.dweb.link/",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Bg8RoERiEQJ3hWRL2x6nfgeTGpNxhF6WfU3D1YKwKEvq",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8752196.06",
            "totalSupply": "7772751623910805",
            "totalSupplyFormatted": "77727516239.10805",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/borgyarmy",
                "twitter": "https://x.com/borgysol",
                "website": "https://borgy.ch",
                "moralis": "https://moralis.com/chain/solana/token/price/BorGY4ub2Fz4RLboGxnuxWdZts7EKhUTB624AFmfCgX"
            },
            "description": null
        }
    },
    "botify": {
        "contract_address": "BYZ9CcZGKAXmN2uDsKcQMM9UnZacija4vWcns9Th69xb",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BYZ9CcZGKAXmN2uDsKcQMM9UnZacija4vWcns9Th69xb",
            "standard": "metaplex",
            "name": "BOTIFY",
            "symbol": "BOTIFY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BYZ9CcZGKAXmN2uDsKcQMM9UnZacija4vWcns9Th69xb",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/L2GAAR3VA7jTthN0WraHYC7PrivYMRIHrjx9tt8nGtA",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HRuLzZkfkmqt3sMRXLoSEA5i58Z4rm7qtPTQZmd14LUx",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5248205.53",
            "totalSupply": "999975902467622",
            "totalSupplyFormatted": "999975902.467622",
            "links": {
                "email": "team@botify.cloud",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/botifycloud",
                "twitter": "https://x.com/botifydotcloud",
                "website": "https://botify.cloud",
                "moralis": "https://moralis.com/chain/solana/token/price/BYZ9CcZGKAXmN2uDsKcQMM9UnZacija4vWcns9Th69xb"
            },
            "description": null
        }
    },
    "bozo-hybrid": {
        "contract_address": "EJPtJEDogxzDbvM8qvAsqYbLmPj5n1vQeqoAzj9Yfv3q",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EJPtJEDogxzDbvM8qvAsqYbLmPj5n1vQeqoAzj9Yfv3q",
            "standard": "metaplex",
            "name": "bozo",
            "symbol": "",
            "logo": "https://adds-token-info-29a861f.s3.amazonaws.com/solana/EJPtJEDogxzDbvM8qvAsqYbLmPj5n1vQeqoAzj9Yfv3q/logo.webp",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://nftstorage.link/ipfs/bafkreidshklx7dkp46i3etxlaxkjdds2dms7kicnf7yjdjzo4ix3ter7gu",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "EXqYZtA1d4Nx2WjYuQ1GvdeujFM8VbvmjfdmJBJj7guc",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3662800.04",
            "totalSupply": "798966421203414185",
            "totalSupplyFormatted": "798966421.203414185",
            "links": {
                "discord": "https://discord.com/invite/pXyRPg3fu2",
                "telegram": "https://t.me/bozoHYBRID",
                "tiktok": "https://www.tiktok.com/@bozofinance",
                "medium": "https://medium.com/bozohybrid-official",
                "moralis": "https://moralis.com/chain/solana/token/price/EJPtJEDogxzDbvM8qvAsqYbLmPj5n1vQeqoAzj9Yfv3q"
            },
            "description": "Welcome to The Bozo Benk where your satisfaction is our priority, how may I help you ser?"
        }
    },
    "brainlet-2": {
        "contract_address": "8NNXWrWVctNw1UFeaBypffimTdcLCcD8XJzHvYsmgwpF",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8NNXWrWVctNw1UFeaBypffimTdcLCcD8XJzHvYsmgwpF",
            "standard": "metaplex",
            "name": "Brainlet",
            "symbol": "BRAINLET",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8NNXWrWVctNw1UFeaBypffimTdcLCcD8XJzHvYsmgwpF",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmUNLYJDydyyym3iV3QUE5pCD9JhxKCwYqcKWi2w7Hm6Rt",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2465551.82",
            "totalSupply": "999823528640551",
            "totalSupplyFormatted": "999823528.640551",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/brainletonsol",
                "twitter": "https://twitter.com/brainletCTO",
                "website": "https://brainlet.community/",
                "moralis": "https://moralis.com/chain/solana/token/price/8NNXWrWVctNw1UFeaBypffimTdcLCcD8XJzHvYsmgwpF"
            },
            "description": null
        }
    },
    "brainrot": {
        "contract_address": "APoM2sXUzdRHTkUjXSsdUheX1wPPdP4HFLotmtRNMU8P",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "APoM2sXUzdRHTkUjXSsdUheX1wPPdP4HFLotmtRNMU8P",
            "standard": "metaplex",
            "name": "brainrot",
            "symbol": "rot",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_APoM2sXUzdRHTkUjXSsdUheX1wPPdP4HFLotmtRNMU8P",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmSswFwtSpQKRuXhENF46wvuRrnGpoJ4mUcNyHK1ToF6HY",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "197714.91",
            "totalSupply": "999337394818785",
            "totalSupplyFormatted": "999337394.818785",
            "links": {
                "reddit": "https://www.reddit.com/r/Brainrotsol",
                "telegram": "https://t.me/brainrot_sol",
                "twitter": "https://twitter.com/brainrot_sol",
                "website": "https://www.brainrotmeme.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/APoM2sXUzdRHTkUjXSsdUheX1wPPdP4HFLotmtRNMU8P"
            },
            "description": null
        }
    },
    "broke-again": {
        "contract_address": "Fgx5MamDtg4x9vC76N1wYep3xUo71vMB5PrvVCjK7629",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Fgx5MamDtg4x9vC76N1wYep3xUo71vMB5PrvVCjK7629",
            "standard": "metaplex",
            "name": "$BROKE again",
            "symbol": "BROKE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Fgx5MamDtg4x9vC76N1wYep3xUo71vMB5PrvVCjK7629",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/bafkreifzhnus4ncwe2crlck27r6wsexolvlgbfyqy7iuwtuckbihmh4y3e",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "99ABBiB5ePTa1S7eYvGUePcynFsGUF6x6KA64iH1yMDh",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "599365.78",
            "totalSupply": "843095378139784",
            "totalSupplyFormatted": "843095378.139784",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Fgx5MamDtg4x9vC76N1wYep3xUo71vMB5PrvVCjK7629"
            },
            "description": null
        }
    },
    "brot": {
        "contract_address": "DdEWen5QEDFZmBJLscgwY81mbZLNZ642zMuR5YLVv8vH",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DdEWen5QEDFZmBJLscgwY81mbZLNZ642zMuR5YLVv8vH",
            "standard": "metaplex",
            "name": "BROT",
            "symbol": "BROT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DdEWen5QEDFZmBJLscgwY81mbZLNZ642zMuR5YLVv8vH",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYPtiF3mP1oDpFcf8raNECME8YHSee3EM6qByL8vd6sHn",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "319441.76",
            "totalSupply": "999974201135575",
            "totalSupplyFormatted": "999974201.135575",
            "links": {
                "telegram": "https://t.me/BROTCult",
                "twitter": "https://x.com/blockrotbot",
                "website": "https://blockrot.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/DdEWen5QEDFZmBJLscgwY81mbZLNZ642zMuR5YLVv8vH"
            },
            "description": null
        }
    },
    "build-3": {
        "contract_address": "AuLFCTA8V8katsgpkFsezQtkHodJby5M4KB2VryTpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AuLFCTA8V8katsgpkFsezQtkHodJby5M4KB2VryTpump",
            "standard": "metaplex",
            "name": "BUILD",
            "symbol": "BUILD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AuLFCTA8V8katsgpkFsezQtkHodJby5M4KB2VryTpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYA9xpT1BYXhyg2zVQ3pBaKqgM2BrMs8BMjzuzk1NoBZu",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "321772.14",
            "totalSupply": "999981791621719",
            "totalSupplyFormatted": "999981791.621719",
            "links": {
                "telegram": "https://t.me/usebuilddotfun",
                "twitter": "https://x.com/usebuildfun",
                "website": "https://usebuild.fun",
                "moralis": "https://moralis.com/chain/solana/token/price/AuLFCTA8V8katsgpkFsezQtkHodJby5M4KB2VryTpump"
            },
            "description": null
        }
    },
    "bunkercoin": {
        "contract_address": "8NCievmJCg2d9Vc2TWgz2HkE6ANeSX7kwvdq5AL7pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8NCievmJCg2d9Vc2TWgz2HkE6ANeSX7kwvdq5AL7pump",
            "standard": "metaplex",
            "name": "BunkerCoin",
            "symbol": "BUNKER",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8NCievmJCg2d9Vc2TWgz2HkE6ANeSX7kwvdq5AL7pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbQbiWwoeY3MT54zBow1gWNbWTFhWnzmwXa8CjftdsKQG",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "326315.67",
            "totalSupply": "999968347911033",
            "totalSupplyFormatted": "999968347.911033",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8NCievmJCg2d9Vc2TWgz2HkE6ANeSX7kwvdq5AL7pump"
            },
            "description": null
        }
    },
    "buttcoin-4": {
        "contract_address": "FasH397CeZLNYWkd3wWK9vrmjd1z93n3b59DssRXpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FasH397CeZLNYWkd3wWK9vrmjd1z93n3b59DssRXpump",
            "standard": "metaplex",
            "name": "The Next Bitcoin",
            "symbol": "BUTTCOIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FasH397CeZLNYWkd3wWK9vrmjd1z93n3b59DssRXpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmc5MwSR4PxHajhDGhvLUFN6sFy44EroewdNLhHfeRZLTt",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3482663.77",
            "totalSupply": "998906279378872",
            "totalSupplyFormatted": "998906279.378872",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/FasH397CeZLNYWkd3wWK9vrmjd1z93n3b59DssRXpump"
            },
            "description": null
        }
    },
    "butthole-coin": {
        "contract_address": "CboMcTUYUcy9E6B3yGdFn6aEsGUnYV6yWeoeukw6pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CboMcTUYUcy9E6B3yGdFn6aEsGUnYV6yWeoeukw6pump",
            "standard": "metaplex",
            "name": "Butthole Coin",
            "symbol": "Butthole",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CboMcTUYUcy9E6B3yGdFn6aEsGUnYV6yWeoeukw6pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmX5Juu4hnnHgd2uMG7YyA1kJ4fmBjt9SUuVacScd5pCa7",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "12928198.27",
            "totalSupply": "999977898883310",
            "totalSupplyFormatted": "999977898.88331",
            "links": {
                "email": "coinbutthole@gmail.com",
                "telegram": "https://t.me/buttholecoin",
                "twitter": "https://x.com/thebuttholecoin",
                "website": "https://buttholecoin.dev/",
                "moralis": "https://moralis.com/chain/solana/token/price/CboMcTUYUcy9E6B3yGdFn6aEsGUnYV6yWeoeukw6pump"
            },
            "description": null
        }
    },
    "buu": {
        "contract_address": "28tVhteKZkzzWjrdHGXzxfm4SQkhrDrjLur9TYCDVULE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "28tVhteKZkzzWjrdHGXzxfm4SQkhrDrjLur9TYCDVULE",
            "standard": "metaplex",
            "name": "BUU",
            "symbol": "BUU",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_28tVhteKZkzzWjrdHGXzxfm4SQkhrDrjLur9TYCDVULE",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/HYFeFbnPtNfBTq9J4iml",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "224099.75",
            "totalSupply": "998355003792294256",
            "totalSupplyFormatted": "998355003.792294256",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+fQ963mTimxw3YWFl",
                "twitter": "https://twitter.com/buu_solana",
                "website": "https://buu.monster",
                "moralis": "https://moralis.com/chain/solana/token/price/28tVhteKZkzzWjrdHGXzxfm4SQkhrDrjLur9TYCDVULE"
            },
            "description": null
        }
    },
    "bybit-staked-sol": {
        "contract_address": "Bybit2vBJGhPF52GBdNaQfUJ6ZpThSgHBobjWZpLPb4B",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Bybit2vBJGhPF52GBdNaQfUJ6ZpThSgHBobjWZpLPb4B",
            "standard": "metaplex",
            "name": "BybitSOL",
            "symbol": "bbSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Bybit2vBJGhPF52GBdNaQfUJ6ZpThSgHBobjWZpLPb4B",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://static.bymj.io/web3/staking/bbsol/off-lst2.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "G7VdgZgVoHzTGZscYvqaKQM9rxaywd4ZioWbsSmuHndn",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "113642739.16",
            "totalSupply": "775478611501323",
            "totalSupplyFormatted": "775478.611501323",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Bybit2vBJGhPF52GBdNaQfUJ6ZpThSgHBobjWZpLPb4B"
            },
            "description": null
        }
    },
    "cainam": {
        "contract_address": "2mhszy8YHwqs1fxruVHQQAUmNcfq31mtkmYYtNZNpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2mhszy8YHwqs1fxruVHQQAUmNcfq31mtkmYYtNZNpump",
            "standard": "metaplex",
            "name": "Cainam Ventures",
            "symbol": "CAINAM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2mhszy8YHwqs1fxruVHQQAUmNcfq31mtkmYYtNZNpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQZRZSfspsB8dUdFiD8epmfF8GTgQhQn74WX7dQH5aU11",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1684823.83",
            "totalSupply": "974990090675120",
            "totalSupplyFormatted": "974990090.67512",
            "links": {
                "telegram": "https://t.me/cainamventurestoken",
                "twitter": "https://twitter.com/cainamventures",
                "website": "https://cainamventures.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/2mhszy8YHwqs1fxruVHQQAUmNcfq31mtkmYYtNZNpump"
            },
            "description": null
        }
    },
    "calicoin-2": {
        "contract_address": "6sSKobm4TSRqJuXMuczGdV2BZityP76PGBJJ2ALHpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6sSKobm4TSRqJuXMuczGdV2BZityP76PGBJJ2ALHpump",
            "standard": "metaplex",
            "name": "Calico",
            "symbol": "Calicoin",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6sSKobm4TSRqJuXMuczGdV2BZityP76PGBJJ2ALHpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbKnvH7WqmiXvNFTdgiEQcNQegyA3MngK1MZ1Csi15NxT",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "360932.77",
            "totalSupply": "959460605593218",
            "totalSupplyFormatted": "959460605.593218",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://x.com/BCIcanDoBetter",
                "website": "https://www.bcicandobetter.com/coin",
                "moralis": "https://moralis.com/chain/solana/token/price/6sSKobm4TSRqJuXMuczGdV2BZityP76PGBJJ2ALHpump"
            },
            "description": null
        }
    },
    "calvin-in-the-cabal": {
        "contract_address": "229vWzBTiUNdraYpVtSH9usTwwVxcyPDbBWf1zEPpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "229vWzBTiUNdraYpVtSH9usTwwVxcyPDbBWf1zEPpump",
            "standard": "metaplex",
            "name": "Calvin in the Cabal",
            "symbol": "CALVIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_229vWzBTiUNdraYpVtSH9usTwwVxcyPDbBWf1zEPpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmaDhL4veRGbSXVCDJyBL7mAyr9xcivZPdmmEwTqFgjTww",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "918736.79",
            "totalSupply": "999943170816128",
            "totalSupplyFormatted": "999943170.816128",
            "links": {
                "telegram": "https://t.me/CalvinOnSolana",
                "twitter": "https://twitter.com/cabalcalvin",
                "website": "https://www.cabalcalvin.com",
                "moralis": "https://moralis.com/chain/solana/token/price/229vWzBTiUNdraYpVtSH9usTwwVxcyPDbBWf1zEPpump"
            },
            "description": null
        }
    },
    "camel-dad": {
        "contract_address": "AHeSgUwaAqXLXuoidLWeHMeYVH8SgaHB7QjwG3DZZDw6",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AHeSgUwaAqXLXuoidLWeHMeYVH8SgaHB7QjwG3DZZDw6",
            "standard": "metaplex",
            "name": "Camel Dad",
            "symbol": "CAMEL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AHeSgUwaAqXLXuoidLWeHMeYVH8SgaHB7QjwG3DZZDw6",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmWMdV43J9za1iSNobJ6Ep5ikh9FS8dHnyR1buTsit8zop",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GBGtfTuHx6mX46Ff61TcVuBXQq18rGh3kXZDujfgvp3w",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4206725.73",
            "totalSupply": "7859968215612911",
            "totalSupplyFormatted": "7859968215.612911",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/AHeSgUwaAqXLXuoidLWeHMeYVH8SgaHB7QjwG3DZZDw6"
            },
            "description": null
        }
    },
    "cancer": {
        "contract_address": "CmomKM8iPKRSMN7y1jqyW1QKj5bGoZmbvNZXWBJSUdnZ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CmomKM8iPKRSMN7y1jqyW1QKj5bGoZmbvNZXWBJSUdnZ",
            "standard": "metaplex",
            "name": "Cancer",
            "symbol": "CANCER",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CmomKM8iPKRSMN7y1jqyW1QKj5bGoZmbvNZXWBJSUdnZ",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/DmDTgRojiYaL5zuGV0pjxBX1MKUSQ57ZJ23lT8Nwfac",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DUK1VN3WatYKsVLwRX2JxfJfaKX6bDXvijpPtT28ed13",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "356861.20",
            "totalSupply": "999955729650250",
            "totalSupplyFormatted": "999955729.65025",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/CmomKM8iPKRSMN7y1jqyW1QKj5bGoZmbvNZXWBJSUdnZ"
            },
            "description": null
        }
    },
    "capricorn-2": {
        "contract_address": "3C2SN1FjzE9MiLFFVRp7Jhkp8Gjwpk29S2TCSJ2jkHn2",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3C2SN1FjzE9MiLFFVRp7Jhkp8Gjwpk29S2TCSJ2jkHn2",
            "standard": "metaplex",
            "name": "Capricorn",
            "symbol": "CAPRICORN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3C2SN1FjzE9MiLFFVRp7Jhkp8Gjwpk29S2TCSJ2jkHn2",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/SNGeLSZjcgNOAxvdNaU1wXDSxICxyVEZbiWgBLFqJgQ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DUK1VN3WatYKsVLwRX2JxfJfaKX6bDXvijpPtT28ed13",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "344943.55",
            "totalSupply": "999998688419244",
            "totalSupplyFormatted": "999998688.419244",
            "links": {
                "telegram": "https://t.me/astrofoliosol",
                "twitter": "https://twitter.com/astrofoliosol",
                "website": "https://astrofolio.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/3C2SN1FjzE9MiLFFVRp7Jhkp8Gjwpk29S2TCSJ2jkHn2"
            },
            "description": null
        }
    },
    "carrot-2": {
        "contract_address": "CRTx1JouZhzSU6XytsE42UQraoGqiHgxabocVfARTy2s",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CRTx1JouZhzSU6XytsE42UQraoGqiHgxabocVfARTy2s",
            "standard": "metaplex",
            "name": "Carrot",
            "symbol": "CRT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CRTx1JouZhzSU6XytsE42UQraoGqiHgxabocVfARTy2s",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "16286001.64",
            "totalSupply": "152331781968901",
            "totalSupplyFormatted": "152331.781968901",
            "links": {
                "discord": "https://discord.com/invite/defi-carrot",
                "github": "https://github.com/DeFi-Carrot",
                "telegram": "https://t.me/deficarrot",
                "twitter": "https://twitter.com/DeFiCarrot",
                "website": "https://deficarrot.com",
                "moralis": "https://moralis.com/chain/solana/token/price/CRTx1JouZhzSU6XytsE42UQraoGqiHgxabocVfARTy2s"
            },
            "description": null
        }
    },
    "cas9": {
        "contract_address": "3up9oA3hqCYRoxXhnAeUBfLv3oNrTCyAqL44t82qpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3up9oA3hqCYRoxXhnAeUBfLv3oNrTCyAqL44t82qpump",
            "standard": "metaplex",
            "name": "Cas9",
            "symbol": "CRISPR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3up9oA3hqCYRoxXhnAeUBfLv3oNrTCyAqL44t82qpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXRkee5ppBiUZBpPNPMH17KVRTvFFMZHXbqasjGmhMjdk",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1279661.37",
            "totalSupply": "999987005662150",
            "totalSupplyFormatted": "999987005.66215",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/3up9oA3hqCYRoxXhnAeUBfLv3oNrTCyAqL44t82qpump"
            },
            "description": null
        }
    },
    "cat-dog": {
        "contract_address": "CATTzAwLyADd2ekzVjTjX8tVUBYfrozdkJBkutJggdB7",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CATTzAwLyADd2ekzVjTjX8tVUBYfrozdkJBkutJggdB7",
            "standard": "metaplex",
            "name": "CatDog",
            "symbol": "CATDOG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CATTzAwLyADd2ekzVjTjX8tVUBYfrozdkJBkutJggdB7",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://arweave.net/YMmsApkSkZSkMY5isbOlPMvAh2VATyaeraalApzotR8",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DoGyGbA45LY2JBsrBC5Lte4ojuEvyYiz4rYZLpi8KLDe",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "297676.85",
            "totalSupply": "8686222713821308733",
            "totalSupplyFormatted": "86862227138.21308733",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/catdog_meme",
                "twitter": "https://x.com/catdog_meme",
                "website": "https://www.cat-dog.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/CATTzAwLyADd2ekzVjTjX8tVUBYfrozdkJBkutJggdB7"
            },
            "description": null
        }
    },
    "cat-in-a-dogs-world": {
        "contract_address": "MEW1gQWJ3nEXg2qgERiKu7FAFj79PHvQVREQUzScPP5",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "MEW1gQWJ3nEXg2qgERiKu7FAFj79PHvQVREQUzScPP5",
            "standard": "metaplex",
            "name": "cat in a dogs world",
            "symbol": "MEW",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_MEW1gQWJ3nEXg2qgERiKu7FAFj79PHvQVREQUzScPP5",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://bafkreieuo5b7aavvm4u2eaffwhzn53g7t45ac26isovfwluv653lvc5u4i.ipfs.nftstorage.link/",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "4JuRBGQHVBgNECy1msYwKBngpcn1BkXbvngLyM9Hc5y7",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "188170902.98",
            "totalSupply": "8888618729304103",
            "totalSupplyFormatted": "88886187293.04103",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/MewsWorld",
                "twitter": "https://x.com/mew",
                "website": "https://mew.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/MEW1gQWJ3nEXg2qgERiKu7FAFj79PHvQVREQUzScPP5"
            },
            "description": null
        }
    },
    "catana": {
        "contract_address": "GmbC2HgWpHpq9SHnmEXZNT5e1zgcU9oASDqbAkGTpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GmbC2HgWpHpq9SHnmEXZNT5e1zgcU9oASDqbAkGTpump",
            "standard": "metaplex",
            "name": "Catana",
            "symbol": "CATANA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GmbC2HgWpHpq9SHnmEXZNT5e1zgcU9oASDqbAkGTpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSZ3VrWvLunXxEqTSmdzb9yepswYmj6fMX69Ds6PsBRDe",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "841073.18",
            "totalSupply": "999974055465659",
            "totalSupplyFormatted": "999974055.465659",
            "links": {
                "telegram": "https://t.me/solanacatana",
                "twitter": "https://twitter.com/SolanaCatana",
                "website": "https://solanacatana.com",
                "moralis": "https://moralis.com/chain/solana/token/price/GmbC2HgWpHpq9SHnmEXZNT5e1zgcU9oASDqbAkGTpump"
            },
            "description": null
        }
    },
    "catbat": {
        "contract_address": "mo7mapMrCsyci5w1td1wgrKPtNeCfjfkKi96DknWi5N",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "mo7mapMrCsyci5w1td1wgrKPtNeCfjfkKi96DknWi5N",
            "standard": "metaplex",
            "name": "CATBAT",
            "symbol": "CATBAT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_mo7mapMrCsyci5w1td1wgrKPtNeCfjfkKi96DknWi5N",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/h0Uw3uMAGEFlZuJMATcw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2235055.82",
            "totalSupply": "935448866613431288",
            "totalSupplyFormatted": "935448866.613431288",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/catbatcoin",
                "twitter": "https://x.com/catbatcoin",
                "website": "https://www.catbat.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/mo7mapMrCsyci5w1td1wgrKPtNeCfjfkKi96DknWi5N"
            },
            "description": null
        }
    },
    "catgpt": {
        "contract_address": "FGf1Us3kqu9AXu2x1yWKfiKE8uSx42ACvRiUrbuAodzq",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FGf1Us3kqu9AXu2x1yWKfiKE8uSx42ACvRiUrbuAodzq",
            "standard": "metaplex",
            "name": "CatGPT",
            "symbol": "CatGPT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FGf1Us3kqu9AXu2x1yWKfiKE8uSx42ACvRiUrbuAodzq",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/vcFGNiURzJUTOKb-WU5i6lpclBYEY5ITnEYkkiKeqcY",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5jAMQk2f1s9xpiwBRn1JE4qeAwzPmKLf28Kc162K3UuX",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "495516.08",
            "totalSupply": "4830627233438174350",
            "totalSupplyFormatted": "4830627233.43817435",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/FGf1Us3kqu9AXu2x1yWKfiKE8uSx42ACvRiUrbuAodzq"
            },
            "description": null
        }
    },
    "0chain": {
        "contract_address": "0xb9ef770b6a5e12e45983c5d80545258aa38f3b78, 0x8bb30e0e67b11b978a5040144c410e1ccddcba30",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0xb9ef770b6a5e12e45983c5d80545258aa38f3b78": "pragma solidity 0.4.21;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/ZerochainToken.sol\r\n\r\ncontract ZerochainToken is MintableToken {\r\n    string public constant name = \"0chain\";\r\n    string public constant symbol = \"ZCN\";\r\n    uint8 public constant decimals = 10;\r\n}"
        }
    },
    "0x": {
        "contract_address": "0xe41d2489571d322189246dafa5ebde1f4699f498, 0x8143e2a1085939caa9cef6665c2ff32f7bc08435, 0x591c19dc0821704bedaa5bbc6a66fee277d9437e, 0x596fa47043f99a4e0f122243b841e55375cde0d2",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0xe41d2489571d322189246dafa5ebde1f4699f498": "/*\r\n\r\n  Copyright 2017 ZeroEx Intl.\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.4.11;\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint _value) returns (bool) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint _value) returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n    uint public totalSupply;\r\n}\r\n\r\ncontract UnlimitedAllowanceToken is StandardToken {\r\n\r\n    uint constant MAX_UINT = 2**256 - 1;\r\n    \r\n    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited allowance.\r\n    /// @param _from Address to transfer from.\r\n    /// @param _to Address to transfer to.\r\n    /// @param _value Amount to transfer.\r\n    /// @return Success of transfer.\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint allowance = allowed[_from][msg.sender];\r\n        if (balances[_from] >= _value\r\n            && allowance >= _value\r\n            && balances[_to] + _value >= balances[_to]\r\n        ) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            if (allowance < MAX_UINT) {\r\n                allowed[_from][msg.sender] -= _value;\r\n            }\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ZRXToken is UnlimitedAllowanceToken {\r\n\r\n    uint8 constant public decimals = 18;\r\n    uint public totalSupply = 10**27; // 1 billion tokens, 18 decimal places\r\n    string constant public name = \"0x Protocol Token\";\r\n    string constant public symbol = \"ZRX\";\r\n\r\n    function ZRXToken() {\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n}"
        }
    },
    "0x0-ai-ai-smart-contract": {
        "contract_address": "0x5a3e6a77ba2f983ec0d371ea3b475f8bc0811ad5",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x5a3e6a77ba2f983ec0d371ea3b475f8bc0811ad5": "/**\r\n\r\n                                                                                                    \r\n        ((((((((   .((((\"/(((       (((((,                 .((((/        /(((((((   *((((((((       \r\n     ,/(((((((((   .((((\"//(((/*    (((((((,             (((((((/     ./(((((((((   /((((((((((*    \r\n    ((((((                 ((((**       ((((((.       *((((((       .(((((                  /((((   \r\n    (((/((                 (((((*          .#####   ,##((           ,(/(((                 ./\"/\"/   \r\n    ((((((                 (((((/             *#####((              .((((/                 .////(   \r\n    ((((((                 (((((*             ,((####(              .(((((                 ./((/(   \r\n    ((((((                 (((((*             ,((((###/             ./((((                 .((((/   \r\n    ((((((                 (((/(*           \"//(((((/(#(/           .(###(                 .((((/   \r\n    *(((((                 (((((/          *####...*\"/###           .(####                 ./((((   \r\n    (((((/                 ###((/       (####.          (###(       ,((#((                  (((#(   \r\n     \"/((######(    ((#######/*,    (((##( .             . *#((((     .,(((((((#(   ,((##((((((*    \r\n        (######(    (#######(       (#(#(*                 .(((((        ((((((##   *(#((##((*      \r\n                                                                                                    \r\n\r\n    ?? ??-??????? ???????? ????? ???????? ??????? ???? ???? ?? ?? ??????? ??? ????? ????? \r\n    ???????? ????, ????? ?????? ??? ???????????????, ??? ???????? ???????? ??????? ??? \r\n    ?????? ??? ?????-???? ????? ?????????.\r\n\r\n    > https://0x0.ai\r\n    > https://t.me/Portal0x0\r\n    > https://twitter.com/0x0audits\r\n    > https://medium.com/@privacy0x0\r\n\r\n*/\r\n\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract OxO is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialTax=25;\r\n    uint256 private _finalTax=15;\r\n    uint256 private _reduceTaxAt=60;\r\n    uint256 private _preventSwapBefore=30;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 1000000000 * 10**_decimals;\r\n    string private constant _name = unicode\"0x0.ai: AI Smart Contract Auditor\";\r\n    string private constant _symbol = unicode\"0x0\";\r\n    uint256 public _maxTxAmount = 20000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 20000000 * 10**_decimals;\r\n    uint256 public _taxSwap = 10000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n            if(!inSwap){\r\n              taxAmount = amount.mul((_buyCount>_reduceTaxAt)?_finalTax:_initialTax).div(100);\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                _buyCount++;\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && from != uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwap && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(_taxSwap>amount?amount:_taxSwap);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function addBots(address[] memory bots_) public onlyOwner {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function delBots(address[] memory notbot) public onlyOwner {\r\n      for (uint i = 0; i < notbot.length; i++) {\r\n          bots[notbot[i]] = false;\r\n      }\r\n    }\r\n\r\n    function enableTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"Trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n    }\r\n\r\n    function reduceFee(uint256 _newFee) external{\r\n      require(_msgSender()==_taxWallet);\r\n      require(_newFee<6);\r\n      _finalTax=_newFee;\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == _taxWallet);\r\n        swapTokensForEth(balanceOf(address(this)));\r\n    }\r\n\r\n    function manualSend() external {\r\n        require(_msgSender() == _taxWallet);\r\n        sendETHToFee(address(this).balance);\r\n    }\r\n\r\n    function manualSendToken() external {\r\n        require(_msgSender() == _taxWallet);\r\n        IERC20(address(this)).transfer(msg.sender, balanceOf(address(this)));\r\n    }\r\n}"
        }
    },
    "0xgasless-2": {
        "contract_address": "0x5fc111f3fa4c6b32eaf65659cfebdeed57234069",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x5fc111f3fa4c6b32eaf65659cfebdeed57234069": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"token1.sol\": {\r\n      \"content\": \"pragma solidity 0.8.20;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\nWebsite: https://0xgasless.com\\nX (Twitter): https://x.com/0xGasless\\nTG: https://t.me/Gasless0x\\n\\n**/\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\n\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IERC20Metadata is IERC20{\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    \\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() external virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        return account.code.length > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n}\\n\\ninterface ILpPair {\\n    function sync() external;\\n}\\n\\ninterface IDexRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IDexFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n    /**\\n     * @dev Multiplies two int256 variables and fails on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        // Detect overflow when multiplying MIN_INT256 with -1\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Division of two int256 variables and fails on overflow.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when dividing MIN_INT256 by -1\\n        require(b != -1 || a != MIN_INT256);\\n\\n        // Solidity already throws when dividing by 0.\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two int256 variables and fails on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two int256 variables and fails on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Converts to absolute value, and fails on overflow.\\n     */\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != MIN_INT256);\\n        return a < 0 ? -a : a;\\n    }\\n\\n\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a >= 0);\\n        return uint256(a);\\n    }\\n}\\n\\nlibrary SafeMathUint {\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\n    int256 b = int256(a);\\n    require(b >= 0);\\n    return b;\\n  }\\n}\\n\\ninterface DividendPayingContractOptionalInterface {\\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\\n}\\n\\ninterface DividendPayingContractInterface {\\n  function dividendOf(address _owner) external view returns(uint256);\\n  function distributeDividends() external payable;\\n  function withdrawDividend() external;\\n  event DividendsDistributed(\\n    address indexed from,\\n    uint256 weiAmount\\n  );\\n  event DividendWithdrawn(\\n    address indexed to,\\n    uint256 weiAmount\\n  );\\n}\\n\\ncontract DividendPayingContract is DividendPayingContractInterface, DividendPayingContractOptionalInterface, Ownable {\\n    using SafeMath for uint256;\\n    using SafeMathUint for uint256;\\n    using SafeMathInt for int256;\\n\\n    uint256 constant internal magnitude = 2**128;\\n\\n    uint256 internal magnifiedDividendPerShare;\\n                                                                            \\n    mapping(address => int256) internal magnifiedDividendCorrections;\\n    mapping(address => uint256) internal withdrawnDividends;\\n    \\n    mapping (address => uint256) public holderBalance;\\n    uint256 public totalBalance;\\n\\n    uint256 public totalDividendsDistributed;\\n\\n    receive() external payable {\\n        distributeDividends();\\n    }\\n\\n    function distributeDividends() public override payable {\\n        if(totalBalance > 0 && msg.value > 0){\\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\n                (msg.value).mul(magnitude) / totalBalance\\n            );\\n            emit DividendsDistributed(msg.sender, msg.value);\\n\\n            totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\\n        }\\n    }\\n\\n    function withdrawDividend() external virtual override {\\n        _withdrawDividendOfUser(payable(msg.sender));\\n    }\\n\\n    function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\\n        if (_withdrawableDividend > 0) {\\n        withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\\n\\n        emit DividendWithdrawn(user, _withdrawableDividend);\\n        (bool success,) = user.call{value: _withdrawableDividend}(\\\"\\\");\\n\\n        if(!success) {\\n            withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\\n            return 0;\\n        }\\n\\n        return _withdrawableDividend;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function withdrawDividendOfUserForCompound(address payable user) external onlyOwner returns (uint256 _withdrawableDividend) {\\n        _withdrawableDividend = withdrawableDividendOf(user);\\n        if (_withdrawableDividend > 0) {\\n            withdrawnDividends[user] = withdrawnDividends[user] + _withdrawableDividend;\\n            emit DividendWithdrawn(user, _withdrawableDividend);\\n        }\\n        (bool success,) = owner().call{value: _withdrawableDividend}(\\\"\\\");\\n        if(!success) {\\n            withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\\n            return 0;\\n        }\\n    }\\n\\n    function dividendOf(address _owner) external view override returns(uint256) {\\n        return withdrawableDividendOf(_owner);\\n    }\\n\\n    function withdrawableDividendOf(address _owner) public view override returns(uint256) {\\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\n    }\\n\\n    function withdrawnDividendOf(address _owner) external view override returns(uint256) {\\n        return withdrawnDividends[_owner];\\n    }\\n\\n    function accumulativeDividendOf(address _owner) public view override returns(uint256) {\\n        return magnifiedDividendPerShare.mul(holderBalance[_owner]).toInt256Safe()\\n        .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\\n    }\\n\\n    function _increase(address account, uint256 value) internal {\\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\n        .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\n    }\\n\\n    function _reduce(address account, uint256 value) internal {\\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\n        .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\n    }\\n\\n    function _setBalance(address account, uint256 newBalance) internal {\\n        uint256 currentBalance = holderBalance[account];\\n        holderBalance[account] = newBalance;\\n        if(newBalance > currentBalance) {\\n        uint256 increaseAmount = newBalance.sub(currentBalance);\\n        _increase(account, increaseAmount);\\n        totalBalance += increaseAmount;\\n        } else if(newBalance < currentBalance) {\\n        uint256 reduceAmount = currentBalance.sub(newBalance);\\n        _reduce(account, reduceAmount);\\n        totalBalance -= reduceAmount;\\n        }\\n    }\\n}\\n\\n\\ncontract RevShare is DividendPayingContract {\\n\\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\\n\\n    mapping (address => bool) public excludedFromDividends;\\n\\n    constructor() {}\\n\\n    function getAccount(address _account)\\n        public view returns (\\n            address account,\\n            uint256 withdrawableDividends,\\n            uint256 totalDividends,\\n            uint256 balance) {\\n        account = _account;\\n\\n        withdrawableDividends = withdrawableDividendOf(account);\\n        totalDividends = accumulativeDividendOf(account);\\n\\n        balance = holderBalance[account];\\n    }\\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\\n        if(excludedFromDividends[account]) {\\n    \\t\\treturn;\\n    \\t}\\n\\n        _setBalance(account, newBalance);\\n\\n    \\tprocessAccount(account, true);\\n    }\\n    \\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\\n        uint256 amount = _withdrawDividendOfUser(account);\\n\\n    \\tif(amount > 0) {\\n            emit Claim(account, amount, automatic);\\n    \\t\\treturn true;\\n    \\t}\\n\\n    \\treturn false;\\n    }\\n\\n    function getTotalDividendsDistributed() external view returns (uint256) {\\n        return totalDividendsDistributed;\\n    }\\n\\n\\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\\n\\t\\treturn holderBalance[account];\\n\\t}\\n\\n    function getNumberOfDividends() external view returns(uint256) {\\n        return totalBalance;\\n    }\\n\\n    function excludeFromDividends(address account) external onlyOwner {\\n    \\texcludedFromDividends[account] = true;\\n\\n    \\t_setBalance(account, 0);\\n    }\\n\\n    function includeInDividends(address account) external onlyOwner {\\n    \\trequire(excludedFromDividends[account]);\\n    \\texcludedFromDividends[account] = false;\\n        _setBalance(account, IERC20(owner()).balanceOf(account)); // sets balance back to token balance\\n    }\\n}\\n\\ncontract OxGasless is ERC20, Ownable, EIP712 {\\n\\n    mapping (address => bool) public excludedFromFees;\\n    mapping (address => bool) public excludedFromLimits;\\n    string private constant SIGNING_DOMAIN = \\\"0xGasless\\\";\\n    string private constant SIGNATURE_VERSION = \\\"1\\\";\\n\\n    bool public launched;\\n\\n    mapping (address => bool) public isAMMPair;\\n\\n    address public mktingAddress;\\n    address public devAddress;\\n\\n    Tax public buyTax;\\n    Tax public sellTax;\\n\\n    RevShare public revShare;\\n\\n    TokenDistributionForTax public tokensForTax;\\n\\n    TxLimits public txLimits;\\n    bool public txLimitsActive = true;\\n\\n    mapping(address => uint256) private _holderLastTransferBlock; // MEV protection\\n    bool public antiSandwichEnabled = true;\\n\\n    uint256 public swapTokensAtAmount;\\n\\n    address public pair;\\n    IDexRouter public dexRouter;\\n    address public immutable WETH;\\n\\n\\n    uint64 public constant FEE_DIVISOR = 10000;\\n\\n    // structs\\n\\n    struct TxLimits {\\n        uint128 transactionLimit;\\n        uint128 walletLimit;\\n    }\\n\\n    struct Tax {\\n        uint48 mktingTax;\\n        uint48 devTax;\\n        uint48 lpTax;\\n        uint48 revShareTax;\\n        uint48 totalTax;\\n    }\\n\\n    struct TokenDistributionForTax {\\n        uint64 tokensForMkting;\\n        uint64 tokensForLP;\\n        uint64 tokensForDev;\\n        uint64 tokensForRevShare;\\n        bool gasSaver;\\n    }\\n\\n    // events\\n\\n    event UpdatedTransactionLimit(uint newMax);\\n    event UpdatedWalletLimit(uint newMax);\\n    event SetExcludedFromFees(address _address, bool _isExcluded);\\n    event SetExcludedFromLimits(address _address, bool _isExcluded);\\n    event RemovedLimits();\\n    event BuyTaxUpdated(uint newAmount);\\n    event SellTaxUpdated(uint newAmount);\\n\\n    // constructor\\n\\n    constructor()\\n        ERC20(\\\"0xGasless\\\", \\\"$0xGas\\\")\\n        EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION)\\n    {   \\n        _mint(msg.sender, 11_000_000 * 1e18);\\n\\n        address _v2Router;\\n\\n        // @dev assumes WETH pair\\n        if(block.chainid == 1){\\n            _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n        } else if(block.chainid == 5){\\n            _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n        } else {\\n            revert(\\\"Chain not configured\\\");\\n        }\\n\\n        revShare = new RevShare();\\n\\n        dexRouter = IDexRouter(_v2Router);\\n\\n        txLimits.transactionLimit = uint128(totalSupply() * 20 / 1000);\\n        txLimits.walletLimit = uint128(totalSupply() * 2 / 100);\\n        swapTokensAtAmount = totalSupply() * 25 / 100000;\\n\\n        mktingAddress = 0x87369cf387905EAB08A832F05a36E442C6EaE1A5; // update\\n        devAddress = 0x87369cf387905EAB08A832F05a36E442C6EaE1A5; // update\\n\\n        buyTax.mktingTax = 400;\\n        buyTax.lpTax = 100;\\n        buyTax.devTax = 0;\\n        buyTax.revShareTax = 0;\\n        buyTax.totalTax = buyTax.mktingTax + buyTax.lpTax + buyTax.devTax + buyTax.revShareTax;\\n\\n        sellTax.mktingTax = 400;\\n        sellTax.lpTax = 100;\\n        sellTax.devTax = 0;\\n        sellTax.revShareTax = 0;\\n        sellTax.totalTax = sellTax.mktingTax + sellTax.lpTax + sellTax.devTax + buyTax.revShareTax + sellTax.revShareTax;\\n\\n        tokensForTax.gasSaver = true;\\n\\n        WETH = dexRouter.WETH();\\n        pair = IDexFactory(dexRouter.factory()).createPair(address(this), WETH);\\n\\n        isAMMPair[pair] = true;\\n\\n        excludedFromLimits[pair] = true;\\n        excludedFromLimits[msg.sender] = true;\\n        excludedFromLimits[address(this)] = true;\\n        excludedFromLimits[_v2Router] = true;\\n\\n        excludedFromFees[msg.sender] = true;\\n        excludedFromFees[address(this)] = true;\\n        excludedFromFees[address(0xdead)] = true;\\n        excludedFromFees[_v2Router] = true;\\n\\n        revShare.excludeFromDividends(address(this));\\n        revShare.excludeFromDividends(address(pair));\\n        revShare.excludeFromDividends(address(0xdead));\\n \\n        _approve(address(this), address(dexRouter), type(uint256).max);\\n        _approve(address(msg.sender), address(dexRouter), totalSupply());\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        \\n        if(!excludedFromFees[from] && !excludedFromFees[to]){\\n            require(launched, \\\"Trading not active\\\");\\n            checkLimits(from, to, amount);\\n            amount -= handleTax(from, to, amount);\\n        }\\n\\n        super._transfer(from,to,amount);\\n\\n        revShare.setBalance(payable(to), balanceOf(to));\\n        revShare.setBalance(payable(from), balanceOf(from));\\n    }\\n\\n    function checkLimits(address from, address to, uint256 amount) internal {\\n        if(txLimitsActive){\\n            bool exFromLimitsTo = excludedFromLimits[to];\\n            uint256 balanceOfTo = balanceOf(to);\\n            TxLimits memory _txLimits = txLimits;\\n            // buy\\n            if (isAMMPair[from] && !exFromLimitsTo) {\\n                require(amount <= _txLimits.transactionLimit, \\\"Max Txn\\\");\\n                require(amount + balanceOfTo <= _txLimits.walletLimit, \\\"Max Wallet\\\");\\n            } \\n            // sell\\n            else if (isAMMPair[to] && !excludedFromLimits[from]) {\\n                require(amount <= _txLimits.transactionLimit, \\\"Max Txn\\\");\\n            }\\n            else if(!exFromLimitsTo) {\\n                require(amount + balanceOfTo <= _txLimits.walletLimit, \\\"Max Wallet\\\");\\n            }\\n        }\\n\\n        if (antiSandwichEnabled){\\n            if(isAMMPair[to]){\\n                require(_holderLastTransferBlock[from] < block.number, \\\"Anti MEV\\\");\\n            } else {\\n                _holderLastTransferBlock[to] = block.number;\\n                _holderLastTransferBlock[tx.origin] = block.number;\\n            }\\n        }\\n    }\\n\\n    function handleTax(address from, address to, uint256 amount) internal returns (uint256){\\n\\n        if(balanceOf(address(this)) >= swapTokensAtAmount && !isAMMPair[from]) {\\n            convertTax();\\n        }\\n        \\n        uint128 tax = 0;\\n\\n        Tax memory taxes;\\n\\n        if (isAMMPair[to]){\\n            taxes = sellTax;\\n        } else if(isAMMPair[from]){\\n            taxes = buyTax;\\n        }\\n\\n        if(taxes.totalTax > 0){\\n            TokenDistributionForTax memory tokensForTaxUpdate = tokensForTax;\\n            tax = uint128(amount * taxes.totalTax / FEE_DIVISOR);\\n            tokensForTaxUpdate.tokensForLP += uint64(tax * taxes.lpTax / taxes.totalTax / 1e9);\\n            tokensForTaxUpdate.tokensForMkting += uint64(tax * taxes.mktingTax / taxes.totalTax / 1e9);\\n            tokensForTaxUpdate.tokensForDev += uint64(tax * taxes.devTax / taxes.totalTax / 1e9);\\n            tokensForTaxUpdate.tokensForRevShare += uint64(tax * taxes.revShareTax / taxes.totalTax / 1e9);\\n            tokensForTax = tokensForTaxUpdate;\\n            super._transfer(from, address(this), tax);\\n        }\\n        \\n        return tax;\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) private {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = WETH;\\n\\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function convertTax() private {\\n\\n        uint256 contractBalance = balanceOf(address(this));\\n        TokenDistributionForTax memory tokensForTaxMem = tokensForTax;\\n        uint256 totalTokensToSwap = tokensForTaxMem.tokensForLP + tokensForTaxMem.tokensForMkting + tokensForTaxMem.tokensForDev + tokensForTaxMem.tokensForRevShare;\\n        \\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\\n\\n        if(contractBalance > swapTokensAtAmount * 20){\\n            contractBalance = swapTokensAtAmount * 20;\\n        }\\n\\n        if(tokensForTaxMem.tokensForLP > 0){\\n            uint256 lpTokens = contractBalance * tokensForTaxMem.tokensForLP / totalTokensToSwap;\\n            super._transfer(address(this), pair, lpTokens);\\n            try ILpPair(pair).sync(){} catch {}\\n            contractBalance -= lpTokens;\\n            totalTokensToSwap -= tokensForTaxMem.tokensForLP;\\n        }\\n\\n        if(contractBalance > 0){\\n\\n            swapTokensForETH(contractBalance);\\n            \\n            uint256 ethBalance = address(this).balance;\\n\\n            bool success;\\n\\n            if(tokensForTaxMem.tokensForDev > 0){\\n                (success,) = devAddress.call{value: ethBalance * tokensForTaxMem.tokensForDev / totalTokensToSwap}(\\\"\\\");  \\n            }\\n\\n            if(tokensForTaxMem.tokensForRevShare > 0){\\n                (success,) = address(revShare).call{value: ethBalance * tokensForTaxMem.tokensForRevShare/ totalTokensToSwap}(\\\"\\\");  \\n            }\\n\\n            ethBalance = address(this).balance;\\n\\n            if(ethBalance > 0){\\n                (success,) = mktingAddress.call{value: ethBalance}(\\\"\\\");  \\n            }\\n        }\\n\\n        tokensForTaxMem.tokensForLP = 0;\\n        tokensForTaxMem.tokensForMkting = 0;\\n        tokensForTaxMem.tokensForDev = 0;\\n        tokensForTaxMem.tokensForRevShare = 0;\\n\\n        tokensForTax = tokensForTaxMem;\\n    }\\n\\n    // owner functions\\n    function setExcludedFromFee(address _address, bool _isExcluded) external onlyOwner {\\n        require(_address != address(0), \\\"Zero Address\\\");\\n        require(_address != address(this), \\\"Cannot unexcluded contract\\\");\\n        excludedFromFees[_address] = _isExcluded;\\n        emit SetExcludedFromFees(_address, _isExcluded);\\n    }\\n\\n    function setExcludedFromLimit(address _address, bool _isExcluded) external onlyOwner {\\n        require(_address != address(0), \\\"Zero Address\\\");\\n        if(!_isExcluded){\\n            require(_address != pair, \\\"Cannot remove pair\\\");\\n        }\\n        excludedFromLimits[_address] = _isExcluded;\\n        emit SetExcludedFromLimits(_address, _isExcluded);\\n    }\\n\\n    function changeTransactionLimit(uint128 newNumInTokens) external onlyOwner {\\n        require(newNumInTokens >= (totalSupply() * 1 / 1000)/(10**decimals()), \\\"Too low\\\");\\n        txLimits.transactionLimit = uint128(newNumInTokens * (10**decimals()));\\n        emit UpdatedTransactionLimit(txLimits.transactionLimit);\\n    }\\n\\n    function changeWalletLimit(uint128 newNumInTokens) external onlyOwner {\\n        require(newNumInTokens >= (totalSupply() * 1 / 1000)/(10**decimals()), \\\"Too low\\\");\\n        txLimits.walletLimit = uint128(newNumInTokens * (10**decimals()));\\n        emit UpdatedWalletLimit(txLimits.walletLimit);\\n    }\\n\\n    function changeSwapTokensAmount(uint256 newAmount) external onlyOwner {\\n        require(newAmount >= (totalSupply() * 1) / 100000, \\\"Swap amount cannot be lower than 0.001% total supply.\\\");\\n        require(newAmount <= (totalSupply() * 5) / 1000, \\\"Swap amount cannot be higher than 0.5% total supply.\\\");\\n        swapTokensAtAmount = newAmount;\\n    }\\n\\n    function changeSellTax(uint48 _mktingTax, uint48 _lpTax, uint48 _devTax, uint48 _revShareTax) external onlyOwner {\\n        Tax memory taxes;\\n        taxes.mktingTax = _mktingTax;\\n        taxes.lpTax = _lpTax;\\n        taxes.devTax = _devTax;\\n        taxes.revShareTax = _revShareTax;\\n        taxes.totalTax = _mktingTax + _lpTax + _devTax + _revShareTax;\\n        require(taxes.totalTax  <= 1000, \\\"Keep tax below 10%\\\");\\n        emit SellTaxUpdated(taxes.totalTax);\\n        sellTax = taxes;\\n    }\\n\\n    function changeBuyTax(uint48 _mktingTax, uint48 _lpTax, uint48 _devTax, uint48 _revShareTax) external onlyOwner {\\n        Tax memory taxes;\\n        taxes.mktingTax = _mktingTax;\\n        taxes.lpTax = _lpTax;\\n        taxes.devTax = _devTax;\\n        taxes.revShareTax = _revShareTax;\\n        taxes.totalTax = _mktingTax + _lpTax + _devTax + _revShareTax;\\n        require(taxes.totalTax  <= 1000, \\\"Keep tax below 10%\\\");\\n        emit BuyTaxUpdated(taxes.totalTax);\\n        buyTax = taxes;\\n    }\\n\\n    function setLaunched() external onlyOwner {\\n        require(!launched, \\\"Trading already live\\\");\\n        launched = true;\\n    }\\n\\n    function removeTxLimits() external onlyOwner {\\n        txLimitsActive = false;\\n        TxLimits memory _txLimits;\\n        uint256 supply = totalSupply();\\n        _txLimits.transactionLimit = uint128(supply);\\n        _txLimits.walletLimit = uint128(supply);\\n        txLimits = _txLimits;\\n        emit RemovedLimits();\\n    }\\n\\n    function updateSandwichBlockerEnabled(bool _enabled) external onlyOwner {\\n        antiSandwichEnabled = _enabled;\\n    }\\n\\n    function updateMktingAddress(address _address) external onlyOwner {\\n        require(_address != address(0), \\\"zero address\\\");\\n        mktingAddress = _address;\\n    }\\n\\n    function updateDevAddress(address _address) external onlyOwner {\\n        require(_address != address(0), \\\"zero address\\\");\\n        devAddress = _address;\\n    }\\n\\n    receive() payable external {}\\n\\n    // dividend functions\\n\\n    function claim() external {\\n        revShare.processAccount(payable(msg.sender), false);\\n    }\\n\\n    function getTotalDividendsDistributed() external view returns (uint256) {\\n        return revShare.totalDividendsDistributed();\\n    }\\n\\n    function withdrawableDividendOf(address account) public view returns(uint256) {\\n    \\treturn revShare.withdrawableDividendOf(account);\\n  \\t}\\n\\n\\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\\n\\t\\treturn revShare.holderBalance(account);\\n\\t}\\n\\n    function getAccountDividendsInfo(address account)\\n        external view returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256) {\\n        return revShare.getAccount(account);\\n    }\\n    \\n    function getNumberOfDividends() external view returns(uint256) {\\n        return revShare.totalBalance();\\n    }\\n\\n    function excludeFromDividends(address _wallet) external onlyOwner {\\n        revShare.excludeFromDividends(_wallet);\\n    }\\n\\n     function includeInDividends(address _wallet) external onlyOwner {\\n        revShare.includeInDividends(_wallet);\\n    }\\n\\n    function compound(uint256 minOutput) external {\\n        uint256 amountEthForCompound = revShare.withdrawDividendOfUserForCompound(payable(msg.sender));\\n        if(amountEthForCompound > 0){\\n            buyBackTokens(amountEthForCompound, minOutput, msg.sender);\\n        } else {\\n            revert(\\\"No rewards\\\");\\n        }\\n    }\\n\\n    function buyBackTokens(uint256 ethAmountInWei, uint256 minOut, address to) internal {\\n        // generate the uniswap pair path of weth -> eth\\n        address[] memory path = new address[](2);\\n        path[0] = dexRouter.WETH();\\n        path[1] = address(this);\\n\\n        // make the swap\\n        dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmountInWei}(\\n            minOut,\\n            path,\\n            address(to),\\n            block.timestamp\\n        );\\n    }\\n\\n    // helper views\\n\\n    function getCompoundOutputByEthAmount(uint256 rewardAmount) external view returns(uint256) {\\n        address[] memory path = new address[](2);\\n        path[0] = dexRouter.WETH();\\n        path[1] = address(this);\\n        uint256[] memory amounts = dexRouter.getAmountsOut(rewardAmount, path);\\n        return amounts[1] - (amounts[1] * (buyTax.totalTax + 50) / FEE_DIVISOR);\\n    }\\n\\n    function getCompoundOutputByWallet(address wallet) external view returns(uint256) {\\n        uint256 rewardAmount = withdrawableDividendOf(wallet);\\n        address[] memory path = new address[](2);\\n        path[0] = dexRouter.WETH();\\n        path[1] = address(this);\\n        uint256[] memory amounts = dexRouter.getAmountsOut(rewardAmount, path);\\n        return amounts[1] - (amounts[1] * (buyTax.totalTax + 50) / FEE_DIVISOR);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\\n\\nimport \\\"./EIP712.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ShortStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}"
        }
    },
    "1inch": {
        "contract_address": "0x111111111117dc0aa78b770fa6a738034120c302, 111111111117dc0aa78b770fa6a738034120c302.factory.bridge.near, 0x58f1b044d8308812881a1433d9bbeff99975e70c, 0xdda6205dc3f47e5280eb726613b27374eee9d130, 0x111111111117dc0aa78b770fa6a738034120c302, 0xd501281565bf7789224523144fe5d98e8b28f267, 0x9c2c5fd7b07e95ee044ddeba0e97a665f142394f",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x111111111117dc0aa78b770fa6a738034120c302": "/*\r\n                                        ,\u2584m    ,\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2556\r\n                                    \u2553\u2584\u2593\u2588\u2588\u258c\u2553\u2584\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2514\r\n                                  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2584\u2584\u2584,\r\n              \u2553,              ,\u2584\u2584\u2588\u2588\u2588\u2593\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2584,\r\n               \u2580\u2588\u2593\u2584\u2565       x\u0398\u2559\u2560\u2560\u2588\u2588\u2588\u2593\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u2593\u2580  \u2590\u2588\u256c\u256c\u256c\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2556\r\n                 \u2559\u2588\u2588\u2588\u2588\u2593\u2584Q  ,\u03c6\u2592\u2592\u2592\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2593\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u2593\u2593\u2580  \u2555 \u2590\u2588\u2593\u2593\u2593\u256c\u256c\u256c\u256c\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2584\r\n                   \u2559\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2584\u2584\u2592\u2592\u2588\u2588\u2588\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u256c\u256c\u2563\u2588\u2588\u2588\u256c\u256c\u2593\u2588\u2588\u2588\u2580  \u2584\u2588\u2310 \u256b\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u258c\r\n                   /  \u2580\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u2593\u2588\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2588\u2580  \u2584\u2588\u2588\u2580 \u2554\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2588\u2588\u2588\u2584\r\n                 \u2584\u2559     \u2559\u2588\u2588\u2593\u2584\u2559\u2580\u2593\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u00aa\u2580\u2580\u2514 ,\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\r\n               ,\u2593   \u2553\u2560\u2592\u2265  \u2559\u2593\u2588\u2588\u2593\u2556 \u2514\u2580\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2593\u2559       \u2584\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\r\n              \u2584\u2588   \u2554\u2592\u2592\u2592\u2592\"   \u2514\u2580\u2588\u2588\u2588\u258c,  \u2559\u2588\u2588\u2588\u2588\u2580         ~\u03a6\u2593\u2588\u2588\u2593\u2580\u2580\u2569\u2593\u2588\u2588\u2559\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u258c\r\n             \u2593\u2588   \u03c6\u2592\u2592\u2592\u2559    \u2554\u2554  \u2559\u2588\u2588\u2588\u2588\u2584\u2584\u2588\u2588\u2588\u2580          ,         \u2588\u2588\u258c   \u2559\u2593\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u2593\u2588\u2588\u2593\u2514\u2580b\r\n            \u2593\u2588   \u2554\u2592\u2592\u2592`    \u03c6\u2592\u2592\u2592\u207f  \u256b\u2588\u2588\u2588\u2588\u2588\u2588`         ,\u258c          \u256b\u2588\u2588      \u2559\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u2588\u2588\u2593\r\n           \u256b\u2588\u2500  .\u2592\u2592\u2592     \u2560\u2592\u2592\u255a   ]\u2588\u2588\u2588\u2588\u2588\u2588\u00ac         \u2593\u2588            \u2588\u2588\u258c       \u2514\u2593\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u2588\u2588\u2593\r\n          \u2590\u2588\u258c   \u2560\u2592\u2592     \u03c6\u2592\u2592\"    \u2590\u2588\u2588\u2588\u2588\u2588\u2500        \u2593\u2588\u2580\u2588\u2588\u258c          \u2588\u2588\u2588       \u256c \u2514\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u258c\r\n          \u2588\u2588   ]\u2592\u2592\u2310    .\u2592\u2592       \u2593\u2588\u2588\u2588\u2588       \u2584\u2588\u2580\u2524\u2591\u2590\u2588\u2588        \u2553\u2588\u2588\u2588\u2580      /\u256b\u2592\u03b5 \u2559\u2588\u2588\u2588\u256c\u256c\u2563\u2588\u2588\r\n         \u2590\u2588\u2588   \u255a\u2592\u255a     \u2560\u2592        \u2551\u2588\u2588\u2588\u2588\u2310 \u255f\u2584,\u2593\u2588\u2593\u2524Q\u2584\u2593\u2588\u2580        \u2584\u2580\u2593\u2593`      \u2553\u2592\u2593\u258c\u2592\u2554 \u2514\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u258c\r\n         \u2593\u2588\u258c   \u2592\u2592      \u2592\u2559        \u2588\u2588\u2588\u2588\u2588\u2588 \u256b\u2588\u2588\u2588\u2588\u2593\u2580\u2580\u2559          \u2593         ,\u03c6\u2592\u2551\u2588\u258c\u2592\u2592\u2265  \u2588\u2588\u2588\u256c\u2593\u2588\u2588\r\n         \u2588\u2588\u258c   \u2592\u2592      \u2592        \u2590\u2588\u2588\u2588\u2559\u2588\u2588b \u2514\u2559          \u2584\u00c6R\u2580\u2580\u2580       \u2553\u03c6\u2560\u2592\u2592\u2584\u2588\u2588\u2592\u2592\u2592\u2592  \u2559\u2588\u2588\u2588\u2563\u2588\u2588\r\n         \u2588\u2588\u258c   \u2592\u0393      \u2559        \u2588\u2588\u2588\u258c \u255f\u2588            ,\u2593,\u03c6\u03c6\u2560\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2593\u2588\u2588\u2588\u2580\u2592\u2592\u2592\u2592\u2560  \u2593\u2588\u2588\u2593\u2588\u2588\u2500\r\n         \u2588\u2588\u258c   \u255a\u2310      \u2310       \u2593\u2588\u2588\u2588               \u2554\u258c\u00ab\u2592\u2592\u2592\u2592\u2584\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2591\u2592\u2592\u2592\u2592\u2592\u2592  \u2590\u2588\u2588\u2588\u2588\u2588\r\n         \u2588\u2588\u2588   '\u03b5             ]\u2588\u2588\u2588\u2310             \u2553\u2584\u2580\u03c6\u2592\u2592\u2592\u2584\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2580\u256c\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592   \u2588\u2588\u2588\u2588\u2588\r\n         \u256b\u2588\u2588\u00b5   \u03c6             \u2588\u2588\u2588\u258c        \u2553\u2554\u03c6\u2560\u2592\u2591\u2593,\u2560\u2592\u2592\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2559\u2588\u2593\u2584`\u2559\u2560\u2592\u2592\u2592\u2592\u2592\u2592\u2592   \u2588\u2588\u2588\u2588\u2588\r\n         \u2514\u2588\u2588\u2588                \u256b\u2588\u2588\u2588       ,\u2560\u2592\u2592\u2584\u2593\u2593\u2588\u2593\u2593\u2593\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580      \u2593\u2588\u2588\u258c,`\u255a\u2592\u2592\u2592\u2592\u2592  ]\u2588\u2588\u2588\u2588\u258c\r\n          \u2593\u2588\u2588\u258c              \u2593\u2588\u2588\u2588\u00ac   \u2554  \u03c6\u2592\u2592\u2592\u2560\u2560\u2560\u2560\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2559         \u2588\u2588\u2588\u2588\u258c  \u255a\u2592\u2592\u2559  \u2593\u2588\u2588\u2588\u2588\r\n           \u2588\u2588\u2588\u2584           \u2584\u2588\u2588\u2588\u2580  \u2552  \u2560\u2265\u2560\u2592\u2592\u2592\u2591\u2584\u2593\u258c\u2568\u255a\u2592\u255a\u2593\u2588\u2588\u2588\u2588\u2588\u2514           \u2551\u2588\u2588\u2588\u2588\u2588  \u2514\u2592  ]\u2588\u2588\u2588\u2588`\r\n           \u2514\u2588\u2588\u2588\u258c         \u2593\u2588\u2588\u2588\u2559  \u2593\u2584  \u2560\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2559\u2559\u2593\u2593 \u2592\u2592\u2588\u2588\u2588\u2588             \u2590\u2588\u2588\u2588\u2588\u2588\u2588    ,\u2588\u2588\u2588\u2588\u2568\r\n            \u2514\u2588\u2588\u2588\u258c       \u2590\u2588\u2588\u2588  \u2554\u2588\u2588\u2588  \u2560\u2592\u2592\u2592\u2592\u256b\u2588\u2310,\u2584\u2593\u2593 \u2592\u2592\u2593\u2588\u2588\u258c             \u256b\u2588\u2588\u2588\u2588\u2588\u2588\u2593  \u2553\u2588\u2588\u2588\u2588\u2580\r\n              \u2588\u2588\u2588\u2588\u00b5      \u2588\u2588\u2588b  \u2580\u2559  \u03c6\u2592\u2592\u2592\u2592\u2584\u2588\u2588\u2593\u2593\u2560\u03c6\u2560\u2592\u2592\u2593\u2588\u2588\u2588             ]\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310\u2584\u2588\u2588\u2588\u2588\u2518\r\n               \u2580\u2588\u2588\u2588\u258c     \u256b\u2588\u2588\u2588  .\u2554\u03c6\u2592\u2592\u2592\u2592\u2592\u2593\u2588\u2593\u256c\u2591\u2592\u2592\u2584\u2593\u2588\u2588\u2588\u2588\u2580              \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\r\n                \u2559\u2588\u2588\u2588\u2588\u258c    \u2593\u2588\u2588\u2593\u2584,   \u2590\u2593\u2593\u2588\u2588\u2584\u2584\u2584\u2584\u2593\u2588\u2588\u2588\u2588\u2580\u2514              ,\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\r\n                  \u2559\u2588\u2588\u2588\u2588\u258c\u00b5  \u2559\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2580                 \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\r\n                    \u2559\u2588\u2588\u2588\u2588\u2588\u2584,   \u2514\u2559\u2559\u2580\u2580\u2559                         \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\r\n                      \u2514\u2580\u2588\u2588\u2588\u2588\u2588\u2593\u2584                            \u2584\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2559\r\n                         \u2559\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2584\u2584,                 ,\u2584\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2559\r\n                             \u2559\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2514\r\n                                 \u2559\u2559\u2580\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2559\r\n                                        \u2514\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2559\u2559\u2514\r\n\r\n         \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\r\n        \u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551  \u2588\u2588\u2551    \u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\r\n        \u255a\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551       \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\r\n         \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551       \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\r\n         \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551       \u2588\u2588\u2551   \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\r\n         \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d       \u255a\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\r\n*/\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\n// File: contracts/IERC20Permit.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// A copy of https://github.com/OpenZeppelin/openzeppelin-contracts/blob/ecc66719bd7681ed4eb8bf406f89a7408569ba9b/contracts/drafts/IERC20Permit.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\r\n     * given `owner`'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: contracts/ECDSA.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// A copy of https://github.com/OpenZeppelin/openzeppelin-contracts/blob/ecc66719bd7681ed4eb8bf406f89a7408569ba9b/contracts/cryptography/ECDSA.sol\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        return recover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature s value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature v value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: contracts/EIP712.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// A copy of https://github.com/OpenZeppelin/openzeppelin-contracts/blob/ecc66719bd7681ed4eb8bf406f89a7408569ba9b/contracts/drafts/EIP712.sol\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\r\n *\r\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\r\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\r\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\r\n *\r\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n * ({_hashTypedDataV4}).\r\n *\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n *\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n */\r\nabstract contract EIP712 {\r\n    /* solhint-disable var-name-mixedcase */\r\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\r\n    // invalidate the cached domain separator if the chain id changes.\r\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\r\n    uint256 private immutable _CACHED_CHAIN_ID;\r\n\r\n    bytes32 private immutable _HASHED_NAME;\r\n    bytes32 private immutable _HASHED_VERSION;\r\n    bytes32 private immutable _TYPE_HASH;\r\n    /* solhint-enable var-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Initializes the domain separator and parameter caches.\r\n     *\r\n     * The meaning of `name` and `version` is specified in\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\r\n     *\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n     * - `version`: the current major version of the signing domain.\r\n     *\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n     * contract upgrade].\r\n     */\r\n    constructor(string memory name, string memory version) internal {\r\n        bytes32 hashedName = keccak256(bytes(name));\r\n        bytes32 hashedVersion = keccak256(bytes(version));\r\n        bytes32 typeHash = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n        _HASHED_NAME = hashedName;\r\n        _HASHED_VERSION = hashedVersion;\r\n        _CACHED_CHAIN_ID = _getChainId();\r\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\r\n        _TYPE_HASH = typeHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view returns (bytes32) {\r\n        if (_getChainId() == _CACHED_CHAIN_ID) {\r\n            return _CACHED_DOMAIN_SEPARATOR;\r\n        } else {\r\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\r\n        }\r\n    }\r\n\r\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                typeHash,\r\n                name,\r\n                version,\r\n                _getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n     *\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n     *\r\n     * ```solidity\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n     *     mailTo,\r\n     *     keccak256(bytes(mailContents))\r\n     * )));\r\n     * address signer = ECDSA.recover(digest, signature);\r\n     * ```\r\n     */\r\n    function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\r\n    }\r\n\r\n    function _getChainId() private pure returns (uint256 chainId) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20Permit.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// An adapted copy of https://github.com/OpenZeppelin/openzeppelin-contracts/blob/ecc66719bd7681ed4eb8bf406f89a7408569ba9b/contracts/drafts/ERC20Permit.sol\r\n\r\n/**\r\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\r\n    using Counters for Counters.Counter;\r\n\r\n    mapping (address => Counters.Counter) private _nonces;\r\n\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    bytes32 private immutable _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-permit}.\r\n     */\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(\r\n                _PERMIT_TYPEHASH,\r\n                owner,\r\n                spender,\r\n                value,\r\n                _nonces[owner].current(),\r\n                deadline\r\n            )\r\n        );\r\n\r\n        bytes32 hash = _hashTypedDataV4(structHash);\r\n\r\n        address signer = ECDSA.recover(hash, v, r, s);\r\n        require(signer == owner, \"ERC20Permit: invalid signature\");\r\n\r\n        _nonces[owner].increment();\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-nonces}.\r\n     */\r\n    function nonces(address owner) public view override returns (uint256) {\r\n        return _nonces[owner].current();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\r\n        return _domainSeparatorV4();\r\n    }\r\n}\r\n\r\n// File: contracts/OneInch.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract OneInch is ERC20Permit, ERC20Burnable, Ownable {\r\n    constructor(address _owner) public ERC20(\"1INCH Token\", \"1INCH\") EIP712(\"1INCH Token\", \"1\") {\r\n        _mint(_owner, 1.5e9 ether);\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    function mint(address to, uint256 amount) external onlyOwner {\r\n        _mint(to, amount);\r\n    }\r\n}"
        }
    },
    "1million-nfts": {
        "contract_address": "0xa4ef4b0b23c1fc81d3f9ecf93510e64f58a4a016, a4ef4b0b23c1fc81d3f9ecf93510e64f58a4a016.factory.bridge.near",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0xa4ef4b0b23c1fc81d3f9ecf93510e64f58a4a016": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/1MIL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\\\";\\nimport \\\"./interfaces/I1MIL.sol\\\";\\n\\ncontract MIL1 is I1MIL, ERC20PresetMinterPauser {\\n    \\n    uint public constant override INITIAL_SUPPLY = 1_000_000 * DECIMAL_MULTIPLIER;\\n    uint public constant override MAX_SUPPLY = 10_000_000 * DECIMAL_MULTIPLIER;\\n    uint private constant DECIMAL_MULTIPLIER = 10**18;\\n\\n    constructor() ERC20PresetMinterPauser(\\\"1MILNFT\\\", \\\"1MIL\\\") public {\\n        _mint(msg.sender, INITIAL_SUPPLY);\\n    }\\n\\n    function _mint(address account, uint amount) internal virtual override {\\n        require(totalSupply().add(amount) <= MAX_SUPPLY, \\\"1MIL: MAX_SUPPLY\\\");\\n        super._mint(account, amount);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../token/ERC20/ERC20.sol\\\";\\nimport \\\"../token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"../token/ERC20/ERC20Pausable.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControl, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) public ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/I1MIL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.6;\\n\\ninterface I1MIL {\\n    function INITIAL_SUPPLY() external view returns (uint);\\n    function MAX_SUPPLY() external view returns (uint);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}"
        }
    },
    "2dai-io": {
        "contract_address": "0xb44b653f147569d88a684cbf6549e1968e8b2a1d",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0xb44b653f147569d88a684cbf6549e1968e8b2a1d": "/**\r\n * 2DAI.io\r\n * Telegram: https://t.me/Token2dAI\r\n * Ready to unleash your creativity with the power of AI? Let's generate the visuals of your dreams.\r\n * Total Supply: 1 Billion Tokens\r\n * Initial Max Wallet: 2% (>20000000 Tokens)\r\n * Set slippage to 3-4% : 1% to LP, 2% tax for Marketing & Hosting costs.\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n    unchecked {\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[sender] = senderBalance - amount;\r\n    }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _createInitialSupply(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ncontract io2DAIToken is ERC20, Ownable {\r\n\r\n    uint256 public maxBuyAmount;\r\n    uint256 public maxSellAmount;\r\n    uint256 public maxWalletAmount;\r\n\r\n    IDexRouter public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    bool private swapping;\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    address public TreasuryAddress;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = false;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 public buyTreasuryFee;\r\n    uint256 public buyLiquidityFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 public sellTreasuryFee;\r\n    uint256 public sellLiquidityFee;\r\n\r\n    uint256 public tokensForTreasury;\r\n    uint256 public tokensForLiquidity;\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event EnabledTrading(bool tradingActive);\r\n    event RemovedLimits();\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event UpdatedMaxBuyAmount(uint256 newAmount);\r\n    event UpdatedMaxSellAmount(uint256 newAmount);\r\n    event UpdatedMaxWalletAmount(uint256 newAmount);\r\n    event UpdatedTreasuryAddress(address indexed newWallet);\r\n    event UpdatedRewardsAddress(address indexed newWallet);\r\n    event MaxTransactionExclusion(address _address, bool excluded);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    constructor() ERC20(\"2DAI.io\", \"2DAI\") {\r\n\r\n        address newOwner = msg.sender; \r\n\r\n        IDexRouter _uniswapV2Router = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        _excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        uniswapV2Pair = IDexFactory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n\r\n        uint256 totalSupply = 1000000000 * 1e18;\r\n\r\n        maxBuyAmount = totalSupply *  20 / 1000;\r\n        maxSellAmount = totalSupply *  20 / 1000;\r\n        maxWalletAmount = totalSupply * 20 / 1000;\r\n        swapTokensAtAmount = totalSupply * 50 / 100000; \r\n\r\n        buyTreasuryFee = 2;\r\n        buyLiquidityFee = 1;\r\n        buyTotalFees = buyTreasuryFee + buyLiquidityFee;\r\n\r\n        sellTreasuryFee = 2;\r\n        sellLiquidityFee = 1;\r\n        sellTotalFees = sellTreasuryFee + sellLiquidityFee;\r\n\r\n        _excludeFromMaxTransaction(newOwner, true);\r\n        _excludeFromMaxTransaction(address(this), true);\r\n        _excludeFromMaxTransaction(address(0xdead), true);\r\n\r\n        TreasuryAddress = address(0x7cDEfde9fb25b015220c27d69d04b9362912AE6a);\r\n\r\n        excludeFromFees(newOwner, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n        _createInitialSupply(newOwner, totalSupply);\r\n        transferOwnership(newOwner);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function updateMaxBuyAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 1 / 1000)/1e18, \"Cannot set max buy amount lower than 0.1%\");\r\n        maxBuyAmount = newNum * (10**18);\r\n        emit UpdatedMaxBuyAmount(maxBuyAmount);\r\n    }\r\n\r\n    function updateMaxSellAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 1 / 1000)/1e18, \"Cannot set max sell amount lower than 0.1%\");\r\n        maxSellAmount = newNum * (10**18);\r\n        emit UpdatedMaxSellAmount(maxSellAmount);\r\n    }\r\n\r\n    // remove limits after token is stable\r\n    function removeLimits() external onlyOwner {\r\n        limitsInEffect = false;\r\n        emit RemovedLimits();\r\n    }\r\n\r\n    function _excludeFromMaxTransaction(address updAds, bool isExcluded) private {\r\n        _isExcludedMaxTransactionAmount[updAds] = isExcluded;\r\n        emit MaxTransactionExclusion(updAds, isExcluded);\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx) external onlyOwner {\r\n        if(!isEx){\r\n            require(updAds != uniswapV2Pair, \"Cannot remove uniswap pair from max txn\");\r\n        }\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 3 / 1000)/1e18, \"Cannot set max wallet amount lower than 0.3%\");\r\n        maxWalletAmount = newNum * (10**18);\r\n        emit UpdatedMaxWalletAmount(maxWalletAmount);\r\n    }\r\n\r\n    // change the minimum amount of tokens to sell from fees\r\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner {\r\n        require(newAmount >= totalSupply() * 1 / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\r\n        require(newAmount <= totalSupply() * 1 / 1000, \"Swap amount cannot be higher than 0.1% total supply.\");\r\n        swapTokensAtAmount = newAmount;\r\n    }\r\n\r\n    function updateBuyFees(uint256 _treasuryFee, uint256 _liquidityFee) external onlyOwner {\r\n        buyTreasuryFee = _treasuryFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyTotalFees = buyTreasuryFee + buyLiquidityFee;\r\n        require(buyTotalFees <= 15, \"Must keep fees at 15% or less\");\r\n    }\r\n\r\n    function updateSellFees(uint256 _treasuryFee, uint256 _liquidityFee) external onlyOwner {\r\n        sellTreasuryFee = _treasuryFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellTotalFees = sellTreasuryFee + sellLiquidityFee;\r\n        require(sellTotalFees <= 30, \"Must keep fees at 30% or less\");\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"amount must be greater than 0\");\r\n\r\n        if(limitsInEffect){\r\n            if (from != owner() && to != owner() && to != address(0) && to != address(0xdead)){\r\n                if(!tradingActive){\r\n                    require(_isExcludedMaxTransactionAmount[from] || _isExcludedMaxTransactionAmount[to], \"Trading is not active.\");\r\n                    require(from == owner(), \"Trading is enabled\");\r\n                }\r\n\r\n                //when buy\r\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\r\n                    require(amount <= maxBuyAmount, \"Buy transfer amount exceeds the max buy.\");\r\n                    require(amount + balanceOf(to) <= maxWalletAmount, \"Cannot Exceed max wallet\");\r\n                }\r\n                //when sell\r\n                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\r\n                    require(amount <= maxSellAmount, \"Sell transfer amount exceeds the max sell.\");\r\n                }\r\n                else if (!_isExcludedMaxTransactionAmount[to] && !_isExcludedMaxTransactionAmount[from]){\r\n                    require(amount + balanceOf(to) <= maxWalletAmount, \"Cannot Exceed max wallet\");\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if(canSwap && swapEnabled && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            swapping = true;\r\n            swapBack();\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = true;\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        // only take fees on Trades, not on wallet transfers\r\n\r\n        if(takeFee){\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0){\r\n                fees = amount * sellTotalFees /100;\r\n                tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees;\r\n                tokensForTreasury += fees * sellTreasuryFee / sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n                fees = amount * buyTotalFees / 100;\r\n                tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;\r\n                tokensForTreasury += fees * buyTreasuryFee / buyTotalFees;\r\n            }\r\n\r\n            if(fees > 0){\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\r\n        require(pair != uniswapV2Pair, \"The pair cannot be removed from automatedMarketMakerPairs\");\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        _excludeFromMaxTransaction(pair, value);\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    // once enabled, can never be turned off\r\n    function enableTrading(bool _status) external onlyOwner {\r\n        require(!tradingActive, \"Cannot re enable trading\");\r\n        tradingActive = _status;\r\n        swapEnabled = true;\r\n        emit EnabledTrading(tradingActive);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(owner()),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function multiSend(address[] calldata addresses, uint256[] calldata tokens) external onlyOwner {\r\n\r\n        require(addresses.length < 801,\"GAS Error: max airdrop limit is 500 addresses\"); // to prevent overflow\r\n        require(addresses.length == tokens.length,\"Mismatch between Address and token count\");\r\n\r\n        uint256 SCCC = 0;\r\n\r\n        for(uint i=0; i < addresses.length; i++){\r\n            SCCC = SCCC + (tokens[i] * 10**decimals());\r\n        }\r\n\r\n        require(balanceOf(msg.sender) >= SCCC, \"Not enough tokens in wallet\");\r\n\r\n        for(uint i=0; i < addresses.length; i++){\r\n            _transfer(msg.sender,addresses[i],(tokens[i] * 10**decimals()));\r\n        }\r\n    }\r\n\r\n    function setTreasuryAddress(address _TreasuryAddress) external onlyOwner {\r\n        require(_TreasuryAddress != address(0), \"_TreasuryAddress address cannot be 0\");\r\n        TreasuryAddress = payable(_TreasuryAddress);\r\n        emit UpdatedTreasuryAddress(_TreasuryAddress);\r\n    }\r\n\r\n   \r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForTreasury;\r\n\r\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\r\n\r\n        if(contractBalance > swapTokensAtAmount * 10){\r\n            contractBalance = swapTokensAtAmount * 10;\r\n        }\r\n\r\n        bool success;\r\n\r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\r\n\r\n        swapTokensForEth(contractBalance - liquidityTokens);\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 ethForLiquidity = ethBalance;\r\n\r\n        uint256 ethForTreasury = ethBalance * tokensForTreasury / (totalTokensToSwap - (tokensForLiquidity/2));\r\n\r\n        ethForLiquidity -= ethForTreasury;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForTreasury = 0;\r\n\r\n        if(liquidityTokens > 0 && ethForLiquidity > 0){\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n        }\r\n\r\n        (success,) = address(TreasuryAddress).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function claimStuckTokens(address _token) external onlyOwner {\r\n        if (_token == address(0x0)) {\r\n            payable(owner()).transfer(address(this).balance);\r\n            return;\r\n        }\r\n        IERC20 erc20token = IERC20(_token);\r\n        uint256 balance = erc20token.balanceOf(address(this));\r\n        erc20token.transfer(owner(), balance);\r\n    }\r\n    \r\n}"
        }
    },
    "3space-art": {
        "contract_address": "0x8bc2bcb1b1896291942c36f3cca3c1afa0aaa7fd",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x8bc2bcb1b1896291942c36f3cca3c1afa0aaa7fd": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        _approve(account, _msgSender(), currentAllowance - amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/Pace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol';\\n\\ncontract Pace is ERC20Burnable {\\n  uint256 internal constant TOTAL_SUPPLY = 100000000 ether;\\n\\n  constructor() ERC20('3SPACE ART', 'PACE') {\\n    _mint(msg.sender, TOTAL_SUPPLY);\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}"
        }
    },
    "4chan": {
        "contract_address": "0xe0a458bf4acf353cb45e211281a334bb1d837885",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0xe0a458bf4acf353cb45e211281a334bb1d837885": "/**\r\n\r\nHello I am 12 and what is this?\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.14;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract FourChan is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"4CHAN\";\r\n    string private constant _symbol = \"4CHAN\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 100000000000000000000     * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _redisFeeOnBuy = 0;\r\n    uint256 private _taxFeeOnBuy = 20;\r\n    uint256 private _redisFeeOnSell = 0;\r\n    uint256 private _taxFeeOnSell = 35;\r\n\r\n    //Original Fee\r\n    uint256 private _redisFee = _redisFeeOnSell;\r\n    uint256 private _taxFee = _taxFeeOnSell;\r\n\r\n    uint256 private _previousredisFee = _redisFee;\r\n    uint256 private _previoustaxFee = _taxFee;\r\n\r\n    mapping(address => bool) public bots; mapping (address => uint256) public _buyMap;\r\n    mapping (address => bool) public preTrader;\r\n    address payable private _developmentAddress = payable(0xB2e08Df39B176EfB731732664B6E5Ef5b9f43FCD);\r\n    address payable private _marketingAddress = payable(0xB2e08Df39B176EfB731732664B6E5Ef5b9f43FCD);\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = true;\r\n\r\n    uint256 public _maxTxAmount = 1000000000000000000 * 10**9;\r\n    uint256 public _maxWalletSize = 1000000000000000000 * 10**9;\r\n    uint256 public _swapTokensAtAmount = 50000000000000 * 10**9;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);//\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_developmentAddress] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_redisFee == 0 && _taxFee == 0) return;\r\n\r\n        _previousredisFee = _redisFee;\r\n        _previoustaxFee = _taxFee;\r\n\r\n        _redisFee = 0;\r\n        _taxFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _redisFee = _previousredisFee;\r\n        _taxFee = _previoustaxFee;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        \tif (from != owner() && to != owner() && !preTrader[from] && !preTrader[to]) {\r\n\r\n            //Trade start check\r\n            if (!tradingOpen) {\r\n                require(preTrader[from], \"TOKEN: This account cannot send tokens until trading is enabled\");\r\n            }\r\n\r\n            require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\n            require(!bots[from] && !bots[to], \"TOKEN: Your account is blacklisted!\");\r\n\r\n            if(to != uniswapV2Pair) {\r\n                require(balanceOf(to) + amount < _maxWalletSize, \"TOKEN: Balance exceeds wallet size!\");\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\r\n\r\n            if(contractTokenBalance >= _maxTxAmount)\r\n            {\r\n                contractTokenBalance = _maxTxAmount;\r\n            }\r\n\r\n            if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        //Transfer Tokens\r\n        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n            takeFee = false;\r\n        } else {\r\n\r\n            //Set Fee for Buys\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                _redisFee = _redisFeeOnBuy;\r\n                _taxFee = _taxFeeOnBuy;\r\n            }\r\n\r\n            //Set Fee for Sells\r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                _redisFee = _redisFeeOnSell;\r\n                _taxFee = _taxFeeOnSell;\r\n            }\r\n\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _marketingAddress.transfer(amount);\r\n    }\r\n\r\n    function setTrading(bool _tradingOpen) public onlyOwner {\r\n        tradingOpen = _tradingOpen;\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function manualsend() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function blockBots(address[] memory bots_) public onlyOwner {\r\n        for (uint256 i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function unblockBot(address notbot) public onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =\r\n            _getTValues(tAmount, _redisFee, _taxFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n            _getRValues(tAmount, tFee, tTeam, currentRate);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        uint256 redisFee,\r\n        uint256 taxFee\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = tAmount.mul(redisFee).div(100);\r\n        uint256 tTeam = tAmount.mul(taxFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTeam,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {\r\n        _redisFeeOnBuy = redisFeeOnBuy;\r\n        _redisFeeOnSell = redisFeeOnSell;\r\n        _taxFeeOnBuy = taxFeeOnBuy;\r\n        _taxFeeOnSell = taxFeeOnSell;\r\n    }\r\n\r\n    //Set minimum tokens required to swap.\r\n    function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {\r\n        _swapTokensAtAmount = swapTokensAtAmount;\r\n    }\r\n\r\n    //Set minimum tokens required to swap.\r\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n\r\n    //Set maximum transaction\r\n    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n        _maxTxAmount = maxTxAmount;\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\r\n        _maxWalletSize = maxWalletSize;\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    function allowPreTrading(address[] calldata accounts) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n                 preTrader[accounts[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removePreTrading(address[] calldata accounts) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n                 delete preTrader[accounts[i]];\r\n        }\r\n    }\r\n}"
        }
    },
    "5ire": {
        "contract_address": "0x3bd7d4f524d09f4e331577247a048d56e4b67a7f",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x3bd7d4f524d09f4e331577247a048d56e4b67a7f": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FireErc20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @author 5ire Team [5ire](https://github.com/5ire-org)\\n */\\ncontract FireErc20 is ERC20 {\\n    uint256 private constant _INITIAL_SUPPLY = 1500000000 * 1e18;\\n    uint256 private constant _DISTRIBUTION_PERCENT_BASE = 10000000000; // lowest possible percent value is 0.00000001%\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address[] memory _addresses,\\n        uint256[] memory _distributionPercents\\n    ) ERC20(_name, _symbol) {\\n        uint256 totalAddresses = _addresses.length;\\n        require(\\n            totalAddresses == _distributionPercents.length,\\n            \\\"5ire: Inequal array\\\"\\n        );\\n\\n        uint256 percentSum;\\n        for (uint256 index; index < totalAddresses; ++index) {\\n            percentSum += _distributionPercents[index];\\n            require(_addresses[index] != address(0), \\\"5ire: zero address\\\");\\n            _mint(\\n                _addresses[index],\\n                (_INITIAL_SUPPLY * _distributionPercents[index]) /\\n                    _DISTRIBUTION_PERCENT_BASE\\n            );\\n        }\\n\\n        require(\\n            percentSum == _DISTRIBUTION_PERCENT_BASE,\\n            \\\"5ire: bad percentages\\\"\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}"
        }
    },
    "88mph": {
        "contract_address": "0x8888801af4d980682e47f1a9036e589479e835c5",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x8888801af4d980682e47f1a9036e589479e835c5": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DInterest.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"./libs/DecMath.sol\\\";\\nimport \\\"./moneymarkets/IMoneyMarket.sol\\\";\\nimport \\\"./models/fee/IFeeModel.sol\\\";\\nimport \\\"./models/interest/IInterestModel.sol\\\";\\nimport \\\"./NFT.sol\\\";\\nimport \\\"./rewards/MPHMinter.sol\\\";\\nimport \\\"./models/interest-oracle/IInterestOracle.sol\\\";\\n\\n// DeLorean Interest -- It's coming back from the future!\\n// EL PSY CONGROO\\n// Author: Zefram Lou\\n// Contact: zefram@baconlabs.dev\\ncontract DInterest is ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n    using DecMath for uint256;\\n    using SafeERC20 for ERC20;\\n    using Address for address;\\n\\n    // Constants\\n    uint256 internal constant PRECISION = 10**18;\\n    uint256 internal constant ONE = 10**18;\\n\\n    // User deposit data\\n    // Each deposit has an ID used in the depositNFT, which is equal to its index in `deposits` plus 1\\n    struct Deposit {\\n        uint256 amount; // Amount of stablecoin deposited\\n        uint256 maturationTimestamp; // Unix timestamp after which the deposit may be withdrawn, in seconds\\n        uint256 interestOwed; // Deficit incurred to the pool at time of deposit\\n        uint256 initialMoneyMarketIncomeIndex; // Money market's income index at time of deposit\\n        bool active; // True if not yet withdrawn, false if withdrawn\\n        bool finalSurplusIsNegative;\\n        uint256 finalSurplusAmount; // Surplus remaining after withdrawal\\n        uint256 mintMPHAmount; // Amount of MPH minted to user\\n        uint256 depositTimestamp; // Unix timestamp at time of deposit, in seconds\\n    }\\n    Deposit[] internal deposits;\\n    uint256 public latestFundedDepositID; // the ID of the most recently created deposit that was funded\\n    uint256 public unfundedUserDepositAmount; // the deposited stablecoin amount whose deficit hasn't been funded\\n\\n    // Funding data\\n    // Each funding has an ID used in the fundingNFT, which is equal to its index in `fundingList` plus 1\\n    struct Funding {\\n        // deposits with fromDepositID < ID <= toDepositID are funded\\n        uint256 fromDepositID;\\n        uint256 toDepositID;\\n        uint256 recordedFundedDepositAmount;\\n        uint256 recordedMoneyMarketIncomeIndex;\\n    }\\n    Funding[] internal fundingList;\\n\\n    // Params\\n    uint256 public MinDepositPeriod; // Minimum deposit period, in seconds\\n    uint256 public MaxDepositPeriod; // Maximum deposit period, in seconds\\n    uint256 public MinDepositAmount; // Minimum deposit amount for each deposit, in stablecoins\\n    uint256 public MaxDepositAmount; // Maximum deposit amount for each deposit, in stablecoins\\n\\n    // Instance variables\\n    uint256 public totalDeposit;\\n    uint256 public totalInterestOwed;\\n\\n    // External smart contracts\\n    IMoneyMarket public moneyMarket;\\n    ERC20 public stablecoin;\\n    IFeeModel public feeModel;\\n    IInterestModel public interestModel;\\n    IInterestOracle public interestOracle;\\n    NFT public depositNFT;\\n    NFT public fundingNFT;\\n    MPHMinter public mphMinter;\\n\\n    // Events\\n    event EDeposit(\\n        address indexed sender,\\n        uint256 indexed depositID,\\n        uint256 amount,\\n        uint256 maturationTimestamp,\\n        uint256 interestAmount,\\n        uint256 mintMPHAmount\\n    );\\n    event EWithdraw(\\n        address indexed sender,\\n        uint256 indexed depositID,\\n        uint256 indexed fundingID,\\n        bool early,\\n        uint256 takeBackMPHAmount\\n    );\\n    event EFund(\\n        address indexed sender,\\n        uint256 indexed fundingID,\\n        uint256 deficitAmount\\n    );\\n    event ESetParamAddress(\\n        address indexed sender,\\n        string indexed paramName,\\n        address newValue\\n    );\\n    event ESetParamUint(\\n        address indexed sender,\\n        string indexed paramName,\\n        uint256 newValue\\n    );\\n\\n    struct DepositLimit {\\n        uint256 MinDepositPeriod;\\n        uint256 MaxDepositPeriod;\\n        uint256 MinDepositAmount;\\n        uint256 MaxDepositAmount;\\n    }\\n\\n    constructor(\\n        DepositLimit memory _depositLimit,\\n        address _moneyMarket, // Address of IMoneyMarket that's used for generating interest (owner must be set to this DInterest contract)\\n        address _stablecoin, // Address of the stablecoin used to store funds\\n        address _feeModel, // Address of the FeeModel contract that determines how fees are charged\\n        address _interestModel, // Address of the InterestModel contract that determines how much interest to offer\\n        address _interestOracle, // Address of the InterestOracle contract that provides the average interest rate\\n        address _depositNFT, // Address of the NFT representing ownership of deposits (owner must be set to this DInterest contract)\\n        address _fundingNFT, // Address of the NFT representing ownership of fundings (owner must be set to this DInterest contract)\\n        address _mphMinter // Address of the contract for handling minting MPH to users\\n    ) public {\\n        // Verify input addresses\\n        require(\\n            _moneyMarket.isContract() &&\\n                _stablecoin.isContract() &&\\n                _feeModel.isContract() &&\\n                _interestModel.isContract() &&\\n                _interestOracle.isContract() &&\\n                _depositNFT.isContract() &&\\n                _fundingNFT.isContract() &&\\n                _mphMinter.isContract(),\\n            \\\"DInterest: An input address is not a contract\\\"\\n        );\\n\\n        moneyMarket = IMoneyMarket(_moneyMarket);\\n        stablecoin = ERC20(_stablecoin);\\n        feeModel = IFeeModel(_feeModel);\\n        interestModel = IInterestModel(_interestModel);\\n        interestOracle = IInterestOracle(_interestOracle);\\n        depositNFT = NFT(_depositNFT);\\n        fundingNFT = NFT(_fundingNFT);\\n        mphMinter = MPHMinter(_mphMinter);\\n\\n        // Ensure moneyMarket uses the same stablecoin\\n        require(\\n            moneyMarket.stablecoin() == _stablecoin,\\n            \\\"DInterest: moneyMarket.stablecoin() != _stablecoin\\\"\\n        );\\n\\n        // Ensure interestOracle uses the same moneyMarket\\n        require(\\n            interestOracle.moneyMarket() == _moneyMarket,\\n            \\\"DInterest: interestOracle.moneyMarket() != _moneyMarket\\\"\\n        );\\n\\n        // Verify input uint256 parameters\\n        require(\\n            _depositLimit.MaxDepositPeriod > 0 &&\\n                _depositLimit.MaxDepositAmount > 0,\\n            \\\"DInterest: An input uint256 is 0\\\"\\n        );\\n        require(\\n            _depositLimit.MinDepositPeriod <= _depositLimit.MaxDepositPeriod,\\n            \\\"DInterest: Invalid DepositPeriod range\\\"\\n        );\\n        require(\\n            _depositLimit.MinDepositAmount <= _depositLimit.MaxDepositAmount,\\n            \\\"DInterest: Invalid DepositAmount range\\\"\\n        );\\n\\n        MinDepositPeriod = _depositLimit.MinDepositPeriod;\\n        MaxDepositPeriod = _depositLimit.MaxDepositPeriod;\\n        MinDepositAmount = _depositLimit.MinDepositAmount;\\n        MaxDepositAmount = _depositLimit.MaxDepositAmount;\\n        totalDeposit = 0;\\n    }\\n\\n    /**\\n        Public actions\\n     */\\n\\n    function deposit(uint256 amount, uint256 maturationTimestamp)\\n        external\\n        nonReentrant\\n    {\\n        _deposit(amount, maturationTimestamp);\\n    }\\n\\n    function withdraw(uint256 depositID, uint256 fundingID)\\n        external\\n        nonReentrant\\n    {\\n        _withdraw(depositID, fundingID, false);\\n    }\\n\\n    function earlyWithdraw(uint256 depositID, uint256 fundingID)\\n        external\\n        nonReentrant\\n    {\\n        _withdraw(depositID, fundingID, true);\\n    }\\n\\n    function multiDeposit(\\n        uint256[] calldata amountList,\\n        uint256[] calldata maturationTimestampList\\n    ) external nonReentrant {\\n        require(\\n            amountList.length == maturationTimestampList.length,\\n            \\\"DInterest: List lengths unequal\\\"\\n        );\\n        for (uint256 i = 0; i < amountList.length; i = i.add(1)) {\\n            _deposit(amountList[i], maturationTimestampList[i]);\\n        }\\n    }\\n\\n    function multiWithdraw(\\n        uint256[] calldata depositIDList,\\n        uint256[] calldata fundingIDList\\n    ) external nonReentrant {\\n        require(\\n            depositIDList.length == fundingIDList.length,\\n            \\\"DInterest: List lengths unequal\\\"\\n        );\\n        for (uint256 i = 0; i < depositIDList.length; i = i.add(1)) {\\n            _withdraw(depositIDList[i], fundingIDList[i], false);\\n        }\\n    }\\n\\n    function multiEarlyWithdraw(\\n        uint256[] calldata depositIDList,\\n        uint256[] calldata fundingIDList\\n    ) external nonReentrant {\\n        require(\\n            depositIDList.length == fundingIDList.length,\\n            \\\"DInterest: List lengths unequal\\\"\\n        );\\n        for (uint256 i = 0; i < depositIDList.length; i = i.add(1)) {\\n            _withdraw(depositIDList[i], fundingIDList[i], true);\\n        }\\n    }\\n\\n    /**\\n        Deficit funding\\n     */\\n\\n    function fundAll() external nonReentrant {\\n        // Calculate current deficit\\n        (bool isNegative, uint256 deficit) = surplus();\\n        require(isNegative, \\\"DInterest: No deficit available\\\");\\n        require(\\n            !depositIsFunded(deposits.length),\\n            \\\"DInterest: All deposits funded\\\"\\n        );\\n\\n        // Create funding struct\\n        uint256 incomeIndex = moneyMarket.incomeIndex();\\n        require(incomeIndex > 0, \\\"DInterest: incomeIndex == 0\\\");\\n        fundingList.push(\\n            Funding({\\n                fromDepositID: latestFundedDepositID,\\n                toDepositID: deposits.length,\\n                recordedFundedDepositAmount: unfundedUserDepositAmount,\\n                recordedMoneyMarketIncomeIndex: incomeIndex\\n            })\\n        );\\n\\n        // Update relevant values\\n        latestFundedDepositID = deposits.length;\\n        unfundedUserDepositAmount = 0;\\n\\n        _fund(deficit);\\n    }\\n\\n    function fundMultiple(uint256 toDepositID) external nonReentrant {\\n        require(\\n            toDepositID > latestFundedDepositID,\\n            \\\"DInterest: Deposits already funded\\\"\\n        );\\n        require(\\n            toDepositID <= deposits.length,\\n            \\\"DInterest: Invalid toDepositID\\\"\\n        );\\n\\n        (bool isNegative, uint256 surplus) = surplus();\\n        require(isNegative, \\\"DInterest: No deficit available\\\");\\n\\n        uint256 totalDeficit = 0;\\n        uint256 totalSurplus = 0;\\n        uint256 totalDepositToFund = 0;\\n        // Deposits with ID [latestFundedDepositID+1, toDepositID] will be funded\\n        for (\\n            uint256 id = latestFundedDepositID.add(1);\\n            id <= toDepositID;\\n            id = id.add(1)\\n        ) {\\n            Deposit storage depositEntry = _getDeposit(id);\\n            if (depositEntry.active) {\\n                // Deposit still active, use current surplus\\n                (isNegative, surplus) = surplusOfDeposit(id);\\n            } else {\\n                // Deposit has been withdrawn, use recorded final surplus\\n                (isNegative, surplus) = (\\n                    depositEntry.finalSurplusIsNegative,\\n                    depositEntry.finalSurplusAmount\\n                );\\n            }\\n\\n            if (isNegative) {\\n                // Add on deficit to total\\n                totalDeficit = totalDeficit.add(surplus);\\n            } else {\\n                // Has surplus\\n                totalSurplus = totalSurplus.add(surplus);\\n            }\\n\\n            if (depositEntry.active) {\\n                totalDepositToFund = totalDepositToFund.add(\\n                    depositEntry.amount\\n                );\\n            }\\n        }\\n        if (totalSurplus >= totalDeficit) {\\n            // Deposits selected have a surplus as a whole, revert\\n            revert(\\\"DInterest: Selected deposits in surplus\\\");\\n        } else {\\n            // Deduct surplus from totalDeficit\\n            totalDeficit = totalDeficit.sub(totalSurplus);\\n        }\\n\\n        // Create funding struct\\n        uint256 incomeIndex = moneyMarket.incomeIndex();\\n        require(incomeIndex > 0, \\\"DInterest: incomeIndex == 0\\\");\\n        fundingList.push(\\n            Funding({\\n                fromDepositID: latestFundedDepositID,\\n                toDepositID: toDepositID,\\n                recordedFundedDepositAmount: totalDepositToFund,\\n                recordedMoneyMarketIncomeIndex: incomeIndex\\n            })\\n        );\\n\\n        // Update relevant values\\n        latestFundedDepositID = toDepositID;\\n        unfundedUserDepositAmount = unfundedUserDepositAmount.sub(\\n            totalDepositToFund\\n        );\\n\\n        _fund(totalDeficit);\\n    }\\n\\n    /**\\n        Public getters\\n     */\\n\\n    function calculateInterestAmount(\\n        uint256 depositAmount,\\n        uint256 depositPeriodInSeconds\\n    ) public returns (uint256 interestAmount) {\\n        (, uint256 moneyMarketInterestRatePerSecond) = interestOracle\\n            .updateAndQuery();\\n        (bool surplusIsNegative, uint256 surplusAmount) = surplus();\\n\\n        return\\n            interestModel.calculateInterestAmount(\\n                depositAmount,\\n                depositPeriodInSeconds,\\n                moneyMarketInterestRatePerSecond,\\n                surplusIsNegative,\\n                surplusAmount\\n            );\\n    }\\n\\n    function surplus() public returns (bool isNegative, uint256 surplusAmount) {\\n        uint256 totalValue = moneyMarket.totalValue();\\n        uint256 totalOwed = totalDeposit.add(totalInterestOwed);\\n        if (totalValue >= totalOwed) {\\n            // Locked value more than owed deposits, positive surplus\\n            isNegative = false;\\n            surplusAmount = totalValue.sub(totalOwed);\\n        } else {\\n            // Locked value less than owed deposits, negative surplus\\n            isNegative = true;\\n            surplusAmount = totalOwed.sub(totalValue);\\n        }\\n    }\\n\\n    function surplusOfDeposit(uint256 depositID)\\n        public\\n        returns (bool isNegative, uint256 surplusAmount)\\n    {\\n        Deposit storage depositEntry = _getDeposit(depositID);\\n        uint256 currentMoneyMarketIncomeIndex = moneyMarket.incomeIndex();\\n        uint256 currentDepositValue = depositEntry\\n            .amount\\n            .mul(currentMoneyMarketIncomeIndex)\\n            .div(depositEntry.initialMoneyMarketIncomeIndex);\\n        uint256 owed = depositEntry.amount.add(depositEntry.interestOwed);\\n        if (currentDepositValue >= owed) {\\n            // Locked value more than owed deposits, positive surplus\\n            isNegative = false;\\n            surplusAmount = currentDepositValue.sub(owed);\\n        } else {\\n            // Locked value less than owed deposits, negative surplus\\n            isNegative = true;\\n            surplusAmount = owed.sub(currentDepositValue);\\n        }\\n    }\\n\\n    function depositIsFunded(uint256 id) public view returns (bool) {\\n        return (id <= latestFundedDepositID);\\n    }\\n\\n    function depositsLength() external view returns (uint256) {\\n        return deposits.length;\\n    }\\n\\n    function fundingListLength() external view returns (uint256) {\\n        return fundingList.length;\\n    }\\n\\n    function getDeposit(uint256 depositID)\\n        external\\n        view\\n        returns (Deposit memory)\\n    {\\n        return deposits[depositID.sub(1)];\\n    }\\n\\n    function getFunding(uint256 fundingID)\\n        external\\n        view\\n        returns (Funding memory)\\n    {\\n        return fundingList[fundingID.sub(1)];\\n    }\\n\\n    function moneyMarketIncomeIndex() external returns (uint256) {\\n        return moneyMarket.incomeIndex();\\n    }\\n\\n    /**\\n        Param setters\\n     */\\n    function setFeeModel(address newValue) external onlyOwner {\\n        require(newValue.isContract(), \\\"DInterest: not contract\\\");\\n        feeModel = IFeeModel(newValue);\\n        emit ESetParamAddress(msg.sender, \\\"feeModel\\\", newValue);\\n    }\\n\\n    function setInterestModel(address newValue) external onlyOwner {\\n        require(newValue.isContract(), \\\"DInterest: not contract\\\");\\n        interestModel = IInterestModel(newValue);\\n        emit ESetParamAddress(msg.sender, \\\"interestModel\\\", newValue);\\n    }\\n\\n    function setInterestOracle(address newValue) external onlyOwner {\\n        require(newValue.isContract(), \\\"DInterest: not contract\\\");\\n        interestOracle = IInterestOracle(newValue);\\n        emit ESetParamAddress(msg.sender, \\\"interestOracle\\\", newValue);\\n    }\\n\\n    function setRewards(address newValue) external onlyOwner {\\n        require(newValue.isContract(), \\\"DInterest: not contract\\\");\\n        moneyMarket.setRewards(newValue);\\n        emit ESetParamAddress(msg.sender, \\\"moneyMarket.rewards\\\", newValue);\\n    }\\n\\n    function setMPHMinter(address newValue) external onlyOwner {\\n        require(newValue.isContract(), \\\"DInterest: not contract\\\");\\n        mphMinter = MPHMinter(newValue);\\n        emit ESetParamAddress(msg.sender, \\\"mphMinter\\\", newValue);\\n    }\\n\\n    function setMinDepositPeriod(uint256 newValue) external onlyOwner {\\n        require(newValue <= MaxDepositPeriod, \\\"DInterest: invalid value\\\");\\n        MinDepositPeriod = newValue;\\n        emit ESetParamUint(msg.sender, \\\"MinDepositPeriod\\\", newValue);\\n    }\\n\\n    function setMaxDepositPeriod(uint256 newValue) external onlyOwner {\\n        require(\\n            newValue >= MinDepositPeriod && newValue > 0,\\n            \\\"DInterest: invalid value\\\"\\n        );\\n        MaxDepositPeriod = newValue;\\n        emit ESetParamUint(msg.sender, \\\"MaxDepositPeriod\\\", newValue);\\n    }\\n\\n    function setMinDepositAmount(uint256 newValue) external onlyOwner {\\n        require(newValue <= MaxDepositAmount, \\\"DInterest: invalid value\\\");\\n        MinDepositAmount = newValue;\\n        emit ESetParamUint(msg.sender, \\\"MinDepositAmount\\\", newValue);\\n    }\\n\\n    function setMaxDepositAmount(uint256 newValue) external onlyOwner {\\n        require(\\n            newValue >= MinDepositAmount && newValue > 0,\\n            \\\"DInterest: invalid value\\\"\\n        );\\n        MaxDepositAmount = newValue;\\n        emit ESetParamUint(msg.sender, \\\"MaxDepositAmount\\\", newValue);\\n    }\\n\\n    function setDepositNFTTokenURI(uint256 tokenId, string calldata newURI)\\n        external\\n        onlyOwner\\n    {\\n        depositNFT.setTokenURI(tokenId, newURI);\\n    }\\n\\n    function setDepositNFTBaseURI(string calldata newURI) external onlyOwner {\\n        depositNFT.setBaseURI(newURI);\\n    }\\n\\n    function setDepositNFTContractURI(string calldata newURI)\\n        external\\n        onlyOwner\\n    {\\n        depositNFT.setContractURI(newURI);\\n    }\\n\\n    function setFundingNFTTokenURI(uint256 tokenId, string calldata newURI)\\n        external\\n        onlyOwner\\n    {\\n        fundingNFT.setTokenURI(tokenId, newURI);\\n    }\\n\\n    function setFundingNFTBaseURI(string calldata newURI) external onlyOwner {\\n        fundingNFT.setBaseURI(newURI);\\n    }\\n\\n    function setFundingNFTContractURI(string calldata newURI)\\n        external\\n        onlyOwner\\n    {\\n        fundingNFT.setContractURI(newURI);\\n    }\\n\\n    /**\\n        Internal getters\\n     */\\n\\n    function _getDeposit(uint256 depositID)\\n        internal\\n        view\\n        returns (Deposit storage)\\n    {\\n        return deposits[depositID.sub(1)];\\n    }\\n\\n    function _getFunding(uint256 fundingID)\\n        internal\\n        view\\n        returns (Funding storage)\\n    {\\n        return fundingList[fundingID.sub(1)];\\n    }\\n\\n    /**\\n        Internals\\n     */\\n\\n    function _deposit(uint256 amount, uint256 maturationTimestamp) internal {\\n        // Cannot deposit 0\\n        require(amount > 0, \\\"DInterest: Deposit amount is 0\\\");\\n\\n        // Ensure deposit amount is not more than maximum\\n        require(\\n            amount >= MinDepositAmount && amount <= MaxDepositAmount,\\n            \\\"DInterest: Deposit amount out of range\\\"\\n        );\\n\\n        // Ensure deposit period is at least MinDepositPeriod\\n        uint256 depositPeriod = maturationTimestamp.sub(now);\\n        require(\\n            depositPeriod >= MinDepositPeriod &&\\n                depositPeriod <= MaxDepositPeriod,\\n            \\\"DInterest: Deposit period out of range\\\"\\n        );\\n\\n        // Update totalDeposit\\n        totalDeposit = totalDeposit.add(amount);\\n\\n        // Update funding related data\\n        uint256 id = deposits.length.add(1);\\n        unfundedUserDepositAmount = unfundedUserDepositAmount.add(amount);\\n\\n        // Calculate interest\\n        uint256 interestAmount = calculateInterestAmount(amount, depositPeriod);\\n        require(interestAmount > 0, \\\"DInterest: interestAmount == 0\\\");\\n\\n        // Update totalInterestOwed\\n        totalInterestOwed = totalInterestOwed.add(interestAmount);\\n\\n        // Mint MPH for msg.sender\\n        uint256 mintMPHAmount = mphMinter.mintDepositorReward(\\n            msg.sender,\\n            interestAmount\\n        );\\n\\n        // Record deposit data for `msg.sender`\\n        deposits.push(\\n            Deposit({\\n                amount: amount,\\n                maturationTimestamp: maturationTimestamp,\\n                interestOwed: interestAmount,\\n                initialMoneyMarketIncomeIndex: moneyMarket.incomeIndex(),\\n                active: true,\\n                finalSurplusIsNegative: false,\\n                finalSurplusAmount: 0,\\n                mintMPHAmount: mintMPHAmount,\\n                depositTimestamp: now\\n            })\\n        );\\n\\n        // Transfer `amount` stablecoin to DInterest\\n        stablecoin.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Lend `amount` stablecoin to money market\\n        stablecoin.safeIncreaseAllowance(address(moneyMarket), amount);\\n        moneyMarket.deposit(amount);\\n\\n        // Mint depositNFT\\n        depositNFT.mint(msg.sender, id);\\n\\n        // Emit event\\n        emit EDeposit(\\n            msg.sender,\\n            id,\\n            amount,\\n            maturationTimestamp,\\n            interestAmount,\\n            mintMPHAmount\\n        );\\n    }\\n\\n    function _withdraw(\\n        uint256 depositID,\\n        uint256 fundingID,\\n        bool early\\n    ) internal {\\n        Deposit storage depositEntry = _getDeposit(depositID);\\n\\n        // Verify deposit is active and set to inactive\\n        require(depositEntry.active, \\\"DInterest: Deposit not active\\\");\\n        depositEntry.active = false;\\n\\n        if (early) {\\n            // Verify `now < depositEntry.maturationTimestamp`\\n            require(\\n                now < depositEntry.maturationTimestamp,\\n                \\\"DInterest: Deposit mature, use withdraw() instead\\\"\\n            );\\n            // Verify `now > depositEntry.depositTimestamp`\\n            require(\\n                now > depositEntry.depositTimestamp,\\n                \\\"DInterest: Deposited in same block\\\"\\n            );\\n        } else {\\n            // Verify `now >= depositEntry.maturationTimestamp`\\n            require(\\n                now >= depositEntry.maturationTimestamp,\\n                \\\"DInterest: Deposit not mature\\\"\\n            );\\n        }\\n\\n        // Verify msg.sender owns the depositNFT\\n        require(\\n            depositNFT.ownerOf(depositID) == msg.sender,\\n            \\\"DInterest: Sender doesn't own depositNFT\\\"\\n        );\\n\\n        // Take back MPH\\n        uint256 takeBackMPHAmount = mphMinter.takeBackDepositorReward(\\n            msg.sender,\\n            depositEntry.mintMPHAmount,\\n            early\\n        );\\n\\n        // Update totalDeposit\\n        totalDeposit = totalDeposit.sub(depositEntry.amount);\\n\\n        // Update totalInterestOwed\\n        totalInterestOwed = totalInterestOwed.sub(depositEntry.interestOwed);\\n\\n        uint256 feeAmount;\\n        uint256 withdrawAmount;\\n        if (early) {\\n            // Withdraw the principal of the deposit from money market\\n            withdrawAmount = depositEntry.amount;\\n        } else {\\n            // Withdraw the principal & the interest from money market\\n            feeAmount = feeModel.getFee(depositEntry.interestOwed);\\n            withdrawAmount = depositEntry.amount.add(depositEntry.interestOwed);\\n        }\\n        withdrawAmount = moneyMarket.withdraw(withdrawAmount);\\n\\n        (bool depositIsNegative, uint256 depositSurplus) = surplusOfDeposit(\\n            depositID\\n        );\\n\\n        // If deposit was funded, payout interest to funder\\n        if (depositIsFunded(depositID)) {\\n            Funding storage f = _getFunding(fundingID);\\n            require(\\n                depositID > f.fromDepositID && depositID <= f.toDepositID,\\n                \\\"DInterest: Deposit not funded by fundingID\\\"\\n            );\\n            uint256 currentMoneyMarketIncomeIndex = moneyMarket.incomeIndex();\\n            require(\\n                currentMoneyMarketIncomeIndex > 0,\\n                \\\"DInterest: currentMoneyMarketIncomeIndex == 0\\\"\\n            );\\n            uint256 interestAmount = f\\n                .recordedFundedDepositAmount\\n                .mul(currentMoneyMarketIncomeIndex)\\n                .div(f.recordedMoneyMarketIncomeIndex)\\n                .sub(f.recordedFundedDepositAmount);\\n\\n            // Update funding values\\n            f.recordedFundedDepositAmount = f.recordedFundedDepositAmount.sub(\\n                depositEntry.amount\\n            );\\n            f.recordedMoneyMarketIncomeIndex = currentMoneyMarketIncomeIndex;\\n\\n            // Send interest to funder\\n            uint256 transferToFunderAmount = (early && depositIsNegative)\\n                ? interestAmount.add(depositSurplus)\\n                : interestAmount;\\n            if (transferToFunderAmount > 0) {\\n                transferToFunderAmount = moneyMarket.withdraw(\\n                    transferToFunderAmount\\n                );\\n                stablecoin.safeTransfer(\\n                    fundingNFT.ownerOf(fundingID),\\n                    transferToFunderAmount\\n                );\\n            }\\n        } else {\\n            // Remove deposit from future deficit fundings\\n            unfundedUserDepositAmount = unfundedUserDepositAmount.sub(\\n                depositEntry.amount\\n            );\\n\\n            // Record remaining surplus\\n            depositEntry.finalSurplusIsNegative = depositIsNegative;\\n            depositEntry.finalSurplusAmount = depositSurplus;\\n        }\\n\\n        // Send `withdrawAmount - feeAmount` stablecoin to `msg.sender`\\n        stablecoin.safeTransfer(msg.sender, withdrawAmount.sub(feeAmount));\\n\\n        // Send `feeAmount` stablecoin to feeModel beneficiary\\n        stablecoin.safeTransfer(feeModel.beneficiary(), feeAmount);\\n\\n        // Emit event\\n        emit EWithdraw(\\n            msg.sender,\\n            depositID,\\n            fundingID,\\n            early,\\n            takeBackMPHAmount\\n        );\\n    }\\n\\n    function _fund(uint256 totalDeficit) internal {\\n        // Transfer `totalDeficit` stablecoins from msg.sender\\n        stablecoin.safeTransferFrom(msg.sender, address(this), totalDeficit);\\n\\n        // Deposit `totalDeficit` stablecoins into moneyMarket\\n        stablecoin.safeIncreaseAllowance(address(moneyMarket), totalDeficit);\\n        moneyMarket.deposit(totalDeficit);\\n\\n        // Mint fundingNFT\\n        fundingNFT.mint(msg.sender, fundingList.length);\\n\\n        // Emit event\\n        uint256 fundingID = fundingList.length;\\n        emit EFund(msg.sender, fundingID, totalDeficit);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/DecMath.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Decimal math library\\nlibrary DecMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant PRECISION = 10**18;\\n\\n    function decmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISION);\\n    }\\n\\n    function decdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISION).div(b);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/moneymarkets/IMoneyMarket.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n// Interface for money market protocols (Compound, Aave, bZx, etc.)\\ninterface IMoneyMarket {\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 amountInUnderlying)\\n        external\\n        returns (uint256 actualAmountWithdrawn);\\n\\n    function claimRewards() external; // Claims farmed tokens (e.g. COMP, CRV) and sends it to the rewards pool\\n\\n    function totalValue() external returns (uint256); // The total value locked in the money market, in terms of the underlying stablecoin\\n\\n    function incomeIndex() external returns (uint256); // Used for calculating the interest generated (e.g. cDai's price for the Compound market)\\n\\n    function stablecoin() external view returns (address);\\n\\n    function setRewards(address newValue) external;\\n\\n    event ESetParamAddress(\\n        address indexed sender,\\n        string indexed paramName,\\n        address newValue\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/models/fee/IFeeModel.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\ninterface IFeeModel {\\n    function beneficiary() external view returns (address payable);\\n\\n    function getFee(uint256 _txAmount)\\n        external\\n        pure\\n        returns (uint256 _feeAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/models/interest/IInterestModel.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\ninterface IInterestModel {\\n    function calculateInterestAmount(\\n        uint256 depositAmount,\\n        uint256 depositPeriodInSeconds,\\n        uint256 moneyMarketInterestRatePerSecond,\\n        bool surplusIsNegative,\\n        uint256 surplusAmount\\n    ) external view returns (uint256 interestAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/NFT.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\n\\ncontract NFT is ERC721Metadata, Ownable {\\n    string internal _contractURI;\\n\\n    constructor(string memory name, string memory symbol)\\n        public\\n        ERC721Metadata(name, symbol)\\n    {}\\n\\n    function contractURI() external view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    function mint(address to, uint256 tokenId) external onlyOwner {\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function burn(uint256 tokenId) external onlyOwner {\\n        _burn(tokenId);\\n    }\\n\\n    function setContractURI(string calldata newURI) external onlyOwner {\\n        _contractURI = newURI;\\n    }\\n\\n    function setTokenURI(uint256 tokenId, string calldata newURI)\\n        external\\n        onlyOwner\\n    {\\n        _setTokenURI(tokenId, newURI);\\n    }\\n\\n    function setBaseURI(string calldata newURI) external onlyOwner {\\n        _setBaseURI(newURI);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721Metadata.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\n\\ncontract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /**\\n     * @dev Constructor function\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n    }\\n\\n    /**\\n     * @dev Gets the token name.\\n     * @return string representing the token name\\n     */\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Gets the token symbol.\\n     * @return string representing the token symbol\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the URI for a given token ID. May return an empty string.\\n     *\\n     * If the token's URI is non-empty and a base URI was set (via\\n     * {_setBaseURI}), it will be added to the token ID's URI as a prefix.\\n     *\\n     * Reverts if the token ID does not exist.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        // Even if there is a base URI, it is only appended to non-empty token-specific URIs\\n        if (bytes(_tokenURI).length == 0) {\\n            return \\\"\\\";\\n        } else {\\n            // abi.encodePacked is being used to concatenate strings\\n            return string(abi.encodePacked(_baseURI, _tokenURI));\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to set the token URI for a given token.\\n     *\\n     * Reverts if the token ID does not exist.\\n     *\\n     * TIP: if all token IDs share a prefix (e.g. if your URIs look like\\n     * `http://api.myproject.com/token/<id>`), use {_setBaseURI} to store\\n     * it and save gas.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI}.\\n     *\\n     * _Available since v2.5.0._\\n     */\\n    function _setBaseURI(string memory baseURI) internal {\\n        _baseURI = baseURI;\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a preffix in {tokenURI} to each token's URI, when\\n    * they are non-empty.\\n    *\\n    * _Available since v2.5.0._\\n    */\\n    function baseURI() external view returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token.\\n     * Reverts if the token does not exist.\\n     * Deprecated, use _burn(uint256) instead.\\n     * @param owner owner of the token to burn\\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\\n     */\\n    function _burn(address owner, uint256 tokenId) internal {\\n        super._burn(owner, tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../drafts/Counters.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using Counters for Counters.Counter;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from token ID to owner\\n    mapping (uint256 => address) private _tokenOwner;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to number of owned token\\n    mapping (address => Counters.Counter) private _ownedTokensCount;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    constructor () public {\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param owner address to query the balance of\\n     * @return uint256 representing the amount owned by the passed address\\n     */\\n    function balanceOf(address owner) public view returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\n        return _ownedTokensCount[owner].current();\\n    }\\n\\n    /**\\n     * @dev Gets the owner of the specified token ID.\\n     * @param tokenId uint256 ID of the token to query the owner of\\n     * @return address currently marked as the owner of the given token ID\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        address owner = _tokenOwner[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Approves another address to transfer the given token ID\\n     * The zero address indicates there is no approved address.\\n     * There can only be one approved address per token at a given time.\\n     * Can only be called by the token owner or an approved operator.\\n     * @param to address to be approved for the given token ID\\n     * @param tokenId uint256 ID of the token to be approved\\n     */\\n    function approve(address to, uint256 tokenId) public {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Gets the approved address for a token ID, or zero if no address set\\n     * Reverts if the token ID does not exist.\\n     * @param tokenId uint256 ID of the token to query the approval of\\n     * @return address currently approved for the given token ID\\n     */\\n    function getApproved(uint256 tokenId) public view returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Sets or unsets the approval of a given operator\\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\\n     * @param to operator address to set the approval\\n     * @param approved representing the status of the approval to be set\\n     */\\n    function setApprovalForAll(address to, bool approved) public {\\n        require(to != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][to] = approved;\\n        emit ApprovalForAll(_msgSender(), to, approved);\\n    }\\n\\n    /**\\n     * @dev Tells whether an operator is approved by a given owner.\\n     * @param owner owner address which you want to query the approval of\\n     * @param operator operator address which you want to query the approval of\\n     * @return bool whether the given operator is approved by the given owner\\n     */\\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Transfers the ownership of a given token ID to another address.\\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     * Requires the msg.sender to be the owner, approved, or operator.\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the msg.sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the _msgSender() to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransferFrom(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the msg.sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\\n        _transferFrom(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether the specified token exists.\\n     * @param tokenId uint256 ID of the token to query the existence of\\n     * @return bool whether the token exists\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        address owner = _tokenOwner[tokenId];\\n        return owner != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether the given spender can transfer a given token ID.\\n     * @param spender address of the spender to query\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the msg.sender is approved for the given token ID,\\n     * is an operator of the owner, or is the owner of the token\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Internal function to safely mint a new token.\\n     * Reverts if the given token ID already exists.\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * @param to The address that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to safely mint a new token.\\n     * Reverts if the given token ID already exists.\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * @param to The address that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to mint a new token.\\n     * Reverts if the given token ID already exists.\\n     * @param to The address that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _tokenOwner[tokenId] = to;\\n        _ownedTokensCount[to].increment();\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token.\\n     * Reverts if the token does not exist.\\n     * Deprecated, use {_burn} instead.\\n     * @param owner owner of the token to burn\\n     * @param tokenId uint256 ID of the token being burned\\n     */\\n    function _burn(address owner, uint256 tokenId) internal {\\n        require(ownerOf(tokenId) == owner, \\\"ERC721: burn of token that is not own\\\");\\n\\n        _clearApproval(tokenId);\\n\\n        _ownedTokensCount[owner].decrement();\\n        _tokenOwner[tokenId] = address(0);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token.\\n     * Reverts if the token does not exist.\\n     * @param tokenId uint256 ID of the token being burned\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        _burn(ownerOf(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer ownership of a given token ID to another address.\\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _clearApproval(tokenId);\\n\\n        _ownedTokensCount[from].decrement();\\n        _ownedTokensCount[to].increment();\\n\\n        _tokenOwner[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * This is an internal detail of the `ERC721` contract and its use is deprecated.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        internal returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ));\\n        if (!success) {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n            }\\n        } else {\\n            bytes4 retval = abi.decode(returndata, (bytes4));\\n            return (retval == _ERC721_RECEIVED);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to clear current approval of a given token ID.\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function _clearApproval(uint256 tokenId) private {\\n        if (_tokenApprovals[tokenId] != address(0)) {\\n            _tokenApprovals[tokenId] = address(0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ncontract IERC721 is IERC165 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of NFTs in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public;\\n    function approve(address to, uint256 tokenId) public;\\n    function getApproved(uint256 tokenId) public view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) public;\\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\\n\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ncontract IERC721Receiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\\n     * otherwise the caller will revert the transaction. The selector to be\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\n     * function MAY throw to revert and reject the transfer.\\n     * Note: the ERC721 contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\\n    public returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/drafts/Counters.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/MPHMinter.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../libs/DecMath.sol\\\";\\nimport \\\"./MPHToken.sol\\\";\\n\\ncontract MPHMinter is Ownable {\\n    using Address for address;\\n    using DecMath for uint256;\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant PRECISION = 10**18;\\n\\n    /**\\n        @notice The multiplier applied to the interest generated by a pool when minting MPH\\n     */\\n    mapping(address => uint256) public poolMintingMultiplier;\\n    /**\\n        @notice The multiplier applied to the interest generated by a pool when letting depositors keep MPH\\n     */\\n    mapping(address => uint256) public poolDepositorRewardMultiplier;\\n    /**\\n        @notice Multiplier used for calculating dev reward\\n     */\\n    uint256 public devRewardMultiplier;\\n\\n    event ESetParamAddress(\\n        address indexed sender,\\n        string indexed paramName,\\n        address newValue\\n    );\\n    event ESetParamUint(\\n        address indexed sender,\\n        string indexed paramName,\\n        address indexed pool,\\n        uint256 newValue\\n    );\\n\\n    /**\\n        External contracts\\n     */\\n    MPHToken public mph;\\n    address public govTreasury;\\n    address public devWallet;\\n\\n    constructor(\\n        address _mph,\\n        address _govTreasury,\\n        address _devWallet,\\n        uint256 _devRewardMultiplier\\n    ) public {\\n        mph = MPHToken(_mph);\\n        govTreasury = _govTreasury;\\n        devWallet = _devWallet;\\n        devRewardMultiplier = _devRewardMultiplier;\\n    }\\n\\n    function mintDepositorReward(address to, uint256 interestAmount)\\n        external\\n        returns (uint256)\\n    {\\n        uint256 multiplier = poolMintingMultiplier[msg.sender];\\n        uint256 mintAmount = interestAmount.decmul(multiplier);\\n        if (mintAmount == 0) {\\n            // sender is not a pool/has been deactivated\\n            return 0;\\n        }\\n\\n        mph.ownerMint(to, mintAmount);\\n        mph.ownerMint(devWallet, mintAmount.decmul(devRewardMultiplier));\\n        return mintAmount;\\n    }\\n\\n    function takeBackDepositorReward(\\n        address from,\\n        uint256 mintMPHAmount,\\n        bool early\\n    ) external returns (uint256) {\\n        if (poolMintingMultiplier[msg.sender] == 0) {\\n            return 0;\\n        }\\n        uint256 takeBackAmount = early\\n            ? mintMPHAmount\\n            : mintMPHAmount.decmul(\\n                PRECISION.sub(poolDepositorRewardMultiplier[msg.sender])\\n            );\\n\\n        if (early) {\\n            // burn all MPH\\n            mph.burnFrom(from, takeBackAmount);\\n        } else {\\n            // transfer to gov treasury\\n            mph.transferFrom(from, address(this), takeBackAmount);\\n            mph.transfer(govTreasury, takeBackAmount);\\n        }\\n        return takeBackAmount;\\n    }\\n\\n    /**\\n        Param setters\\n     */\\n    function setGovTreasury(address newValue) external onlyOwner {\\n        require(newValue != address(0), \\\"MPHMinter: 0 address\\\");\\n        govTreasury = newValue;\\n        emit ESetParamAddress(msg.sender, \\\"govTreasury\\\", newValue);\\n    }\\n\\n    function setDevWallet(address newValue) external onlyOwner {\\n        require(newValue != address(0), \\\"MPHMinter: 0 address\\\");\\n        devWallet = newValue;\\n        emit ESetParamAddress(msg.sender, \\\"devWallet\\\", newValue);\\n    }\\n\\n    function setMPHTokenOwner(address newValue) external onlyOwner {\\n        require(newValue != address(0), \\\"MPHMinter: 0 address\\\");\\n        mph.transferOwnership(newValue);\\n        emit ESetParamAddress(msg.sender, \\\"mphTokenOwner\\\", newValue);\\n    }\\n\\n    function setMPHTokenOwnerToZero() external onlyOwner {\\n        mph.renounceOwnership();\\n        emit ESetParamAddress(msg.sender, \\\"mphTokenOwner\\\", address(0));\\n    }\\n\\n    function setPoolMintingMultiplier(address pool, uint256 newMultiplier)\\n        external\\n        onlyOwner\\n    {\\n        require(pool.isContract(), \\\"MPHMinter: pool not contract\\\");\\n        poolMintingMultiplier[pool] = newMultiplier;\\n        emit ESetParamUint(\\n            msg.sender,\\n            \\\"poolMintingMultiplier\\\",\\n            pool,\\n            newMultiplier\\n        );\\n    }\\n\\n    function setPoolDepositorRewardMultiplier(\\n        address pool,\\n        uint256 newMultiplier\\n    ) external onlyOwner {\\n        require(pool.isContract(), \\\"MPHMinter: pool not contract\\\");\\n        require(newMultiplier <= PRECISION, \\\"MPHMinter: invalid multiplier\\\");\\n        poolDepositorRewardMultiplier[pool] = newMultiplier;\\n        emit ESetParamUint(\\n            msg.sender,\\n            \\\"poolDepositorRewardMultiplier\\\",\\n            pool,\\n            newMultiplier\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/MPHToken.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\n\\ncontract MPHToken is ERC20, ERC20Burnable, Ownable {\\n    string public constant name = \\\"88mph.app\\\";\\n    string public constant symbol = \\\"MPH\\\";\\n    uint8 public constant decimals = 18;\\n    \\n    bool public initialized;\\n\\n    function init() public {\\n        require(!initialized, \\\"MPHToken: initialized\\\");\\n        initialized = true;\\n\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    function ownerMint(address account, uint256 amount)\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        _mint(account, amount);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\ncontract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_burnFrom}.\\n     */\\n    function burnFrom(address account, uint256 amount) public {\\n        _burnFrom(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/models/interest-oracle/IInterestOracle.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\ninterface IInterestOracle {\\n    function updateAndQuery() external returns (bool updated, uint256 value);\\n\\n    function query() external view returns (uint256 value);\\n\\n    function moneyMarket() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/ATokenMock.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../libs/DecMath.sol\\\";\\n\\ncontract ATokenMock is ERC20, ERC20Detailed {\\n    using SafeMath for uint256;\\n    using DecMath for uint256;\\n\\n    uint256 internal constant YEAR = 31556952; // Number of seconds in one Gregorian calendar year (365.2425 days)\\n\\n    ERC20 public dai;\\n    uint256 public liquidityRate;\\n    uint256 public normalizedIncome;\\n    address[] public users;\\n    mapping(address => bool) public isUser;\\n\\n    constructor(address _dai)\\n        public\\n        ERC20Detailed(\\\"aDAI\\\", \\\"aDAI\\\", 18)\\n    {\\n        dai = ERC20(_dai);\\n\\n        liquidityRate = 10 ** 26; // 10% APY\\n        normalizedIncome = 10 ** 27;\\n    }\\n\\n    function redeem(uint256 _amount) external {\\n        _burn(msg.sender, _amount);\\n        dai.transfer(msg.sender, _amount);\\n    }\\n\\n    function mint(address _user, uint256 _amount) external {\\n        _mint(_user, _amount);\\n        if (!isUser[_user]) {\\n            users.push(_user);\\n            isUser[_user] = true;\\n        }\\n    }\\n\\n    function mintInterest(uint256 _seconds) external {\\n        uint256 interest;\\n        address user;\\n        for (uint256 i = 0; i < users.length; i++) {\\n            user = users[i];\\n            interest = balanceOf(user).mul(_seconds).mul(liquidityRate).div(YEAR.mul(10**27));\\n            _mint(user, interest);\\n        }\\n        normalizedIncome = normalizedIncome.mul(_seconds).mul(liquidityRate).div(YEAR.mul(10**27)).add(normalizedIncome);\\n    }\\n\\n    function setLiquidityRate(uint256 _liquidityRate) external {\\n        liquidityRate = _liquidityRate;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/CERC20Mock.sol\": {\r\n      \"content\": \"/**\\n    Modified from https://github.com/bugduino/idle-contracts/blob/master/contracts/mocks/cDAIMock.sol\\n    at commit b85dafa8e55e053cb2d403fc4b28cfe86f2116d4\\n\\n    Original license:\\n    Copyright 2020 Idle Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n        http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n */\\n\\npragma solidity 0.5.17;\\n\\n// interfaces\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\\";\\n\\n\\ncontract CERC20Mock is ERC20, ERC20Detailed {\\n    address public dai;\\n\\n    uint256 internal _supplyRate;\\n    uint256 internal _exchangeRate;\\n\\n    constructor(address _dai) public ERC20Detailed(\\\"cDAI\\\", \\\"cDAI\\\", 8) {\\n        dai = _dai;\\n        uint256 daiDecimals = ERC20Detailed(_dai).decimals();\\n        _exchangeRate = 2 * (10**(daiDecimals + 8)); // 1 cDAI = 0.02 DAI\\n        _supplyRate = 45290900000; // 10% supply rate per year\\n    }\\n\\n    function mint(uint256 amount) external returns (uint256) {\\n        require(\\n            ERC20(dai).transferFrom(msg.sender, address(this), amount),\\n            \\\"Error during transferFrom\\\"\\n        ); // 1 DAI\\n        _mint(msg.sender, (amount * 10**18) / _exchangeRate);\\n        return 0;\\n    }\\n\\n    function redeemUnderlying(uint256 amount) external returns (uint256) {\\n        _burn(msg.sender, (amount * 10**18) / _exchangeRate);\\n        require(\\n            ERC20(dai).transfer(msg.sender, amount),\\n            \\\"Error during transfer\\\"\\n        ); // 1 DAI\\n        return 0;\\n    }\\n\\n    function exchangeRateStored() external view returns (uint256) {\\n        return _exchangeRate;\\n    }\\n\\n    function exchangeRateCurrent() external view returns (uint256) {\\n        return _exchangeRate;\\n    }\\n\\n    function _setExchangeRateStored(uint256 _rate) external returns (uint256) {\\n        _exchangeRate = _rate;\\n    }\\n\\n    function supplyRatePerBlock() external view returns (uint256) {\\n        return _supplyRate;\\n    }\\n\\n    function _setSupplyRatePerBlock(uint256 _rate) external {\\n        _supplyRate = _rate;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/ComptrollerMock.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n// interfaces\\nimport \\\"./ERC20Mock.sol\\\";\\n\\ncontract ComptrollerMock {\\n    uint256 public constant CLAIM_AMOUNT = 10**18;\\n    ERC20Mock public comp;\\n\\n    constructor (address _comp) public {\\n        comp = ERC20Mock(_comp);\\n    }\\n\\n    function claimComp(address holder) external {\\n        comp.mint(holder, CLAIM_AMOUNT);\\n    }\\n\\n    function getCompAddress() external view returns (address) {\\n        return address(comp);\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/ERC20Mock.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\\";\\n\\ncontract ERC20Mock is ERC20, ERC20Detailed(\\\"\\\", \\\"\\\", 6) {\\n    function mint(address to, uint256 amount) public {\\n        _mint(to, amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/LendingPoolAddressesProviderMock.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\ncontract LendingPoolAddressesProviderMock {\\n    address internal pool;\\n    address internal core;\\n\\n    function getLendingPool() external view returns (address) {\\n        return pool;\\n    }\\n\\n    function setLendingPoolImpl(address _pool) external {\\n        pool = _pool;\\n    }\\n\\n    function getLendingPoolCore() external view returns (address) {\\n        return core;\\n    }\\n\\n    function setLendingPoolCoreImpl(address _pool) external {\\n        core = _pool;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/LendingPoolCoreMock.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./ATokenMock.sol\\\";\\nimport \\\"./LendingPoolMock.sol\\\";\\n\\ncontract LendingPoolCoreMock {\\n    LendingPoolMock internal lendingPool;\\n\\n    function setLendingPool(address lendingPoolAddress) public {\\n        lendingPool = LendingPoolMock(lendingPoolAddress);\\n    }\\n\\n    function bounceTransfer(address _reserve, address _sender, uint256 _amount)\\n        external\\n    {\\n        ERC20 token = ERC20(_reserve);\\n        token.transferFrom(_sender, address(this), _amount);\\n\\n        token.transfer(msg.sender, _amount);\\n    }\\n\\n    // The equivalent of exchangeRateStored() for Compound cTokens\\n    function getReserveNormalizedIncome(address _reserve) external view returns (uint256) {\\n        (, , , , , , , , , , , address aTokenAddress, ) = lendingPool\\n            .getReserveData(_reserve);\\n        ATokenMock aToken = ATokenMock(aTokenAddress);\\n        return aToken.normalizedIncome();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/LendingPoolMock.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./ATokenMock.sol\\\";\\nimport \\\"./LendingPoolCoreMock.sol\\\";\\n\\ncontract LendingPoolMock {\\n    mapping(address => address) internal reserveAToken;\\n    LendingPoolCoreMock public core;\\n\\n    constructor(address _core) public {\\n        core = LendingPoolCoreMock(_core);\\n    }\\n\\n    function setReserveAToken(address _reserve, address _aTokenAddress) external {\\n        reserveAToken[_reserve] = _aTokenAddress;\\n    }\\n\\n    function deposit(address _reserve, uint256 _amount, uint16)\\n        external\\n    {\\n        ERC20 token = ERC20(_reserve);\\n        core.bounceTransfer(_reserve, msg.sender, _amount);\\n\\n        // Mint aTokens\\n        address aTokenAddress = reserveAToken[_reserve];\\n        ATokenMock aToken = ATokenMock(aTokenAddress);\\n        aToken.mint(msg.sender, _amount);\\n        token.transfer(aTokenAddress, _amount);\\n    }\\n\\n    function getReserveData(address _reserve)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256 liquidityRate,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address aTokenAddress,\\n            uint40\\n        )\\n    {\\n        aTokenAddress = reserveAToken[_reserve];\\n        ATokenMock aToken = ATokenMock(aTokenAddress);\\n        liquidityRate = aToken.liquidityRate();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/VaultMock.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../libs/DecMath.sol\\\";\\n\\ncontract VaultMock is ERC20, ERC20Detailed {\\n    using SafeMath for uint256;\\n    using DecMath for uint256;\\n\\n    ERC20 public underlying;\\n\\n    constructor(address _underlying) public ERC20Detailed(\\\"yUSD\\\", \\\"yUSD\\\", 18) {\\n        underlying = ERC20(_underlying);\\n    }\\n\\n    function deposit(uint256 tokenAmount) public {\\n        uint256 sharePrice = getPricePerFullShare();\\n        _mint(msg.sender, tokenAmount.decdiv(sharePrice));\\n\\n        underlying.transferFrom(msg.sender, address(this), tokenAmount);\\n    }\\n\\n    function withdraw(uint256 sharesAmount) public {\\n        uint256 sharePrice = getPricePerFullShare();\\n        uint256 underlyingAmount = sharesAmount.decmul(sharePrice);\\n        _burn(msg.sender, sharesAmount);\\n\\n        underlying.transfer(msg.sender, underlyingAmount);\\n    }\\n\\n    function getPricePerFullShare() public view returns (uint256) {\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply == 0) {\\n            return 10**18;\\n        }\\n        return underlying.balanceOf(address(this)).decdiv(_totalSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/models/fee/PercentageFeeModel.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./IFeeModel.sol\\\";\\n\\ncontract PercentageFeeModel is IFeeModel {\\n    using SafeMath for uint256;\\n\\n    address payable public beneficiary;\\n\\n    constructor(address payable _beneficiary) public {\\n        beneficiary = _beneficiary;\\n    }\\n\\n    function getFee(uint256 _txAmount)\\n        external\\n        pure\\n        returns (uint256 _feeAmount)\\n    {\\n        _feeAmount = _txAmount.div(10); // Precision is decreased by 1 decimal place\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/models/interest-oracle/EMAOracle.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../moneymarkets/IMoneyMarket.sol\\\";\\nimport \\\"../../libs/DecMath.sol\\\";\\nimport \\\"./IInterestOracle.sol\\\";\\n\\ncontract EMAOracle is IInterestOracle {\\n    using SafeMath for uint256;\\n    using DecMath for uint256;\\n\\n    uint256 internal constant PRECISION = 10**18;\\n\\n    /**\\n        Immutable parameters\\n     */\\n    uint256 public UPDATE_INTERVAL;\\n    uint256 public UPDATE_MULTIPLIER;\\n    uint256 public ONE_MINUS_UPDATE_MULTIPLIER;\\n\\n    /**\\n        Public variables\\n     */\\n    uint256 public emaStored;\\n    uint256 public lastIncomeIndex;\\n    uint256 public lastUpdateTimestamp;\\n\\n    /**\\n        External contracts\\n     */\\n    IMoneyMarket public moneyMarket;\\n\\n    constructor(\\n        uint256 _emaInitial,\\n        uint256 _updateInterval,\\n        uint256 _smoothingFactor,\\n        uint256 _averageWindowInIntervals,\\n        address _moneyMarket\\n    ) public {\\n        emaStored = _emaInitial;\\n        UPDATE_INTERVAL = _updateInterval;\\n        lastUpdateTimestamp = now;\\n\\n        uint256 updateMultiplier = _smoothingFactor.div(_averageWindowInIntervals.add(1));\\n        UPDATE_MULTIPLIER = updateMultiplier;\\n        ONE_MINUS_UPDATE_MULTIPLIER = PRECISION.sub(updateMultiplier);\\n\\n        moneyMarket = IMoneyMarket(_moneyMarket);\\n        lastIncomeIndex = moneyMarket.incomeIndex();\\n    }\\n\\n    function updateAndQuery() public returns (bool updated, uint256 value) {\\n        uint256 timeElapsed = now - lastUpdateTimestamp;\\n        if (timeElapsed < UPDATE_INTERVAL) {\\n            return (false, emaStored);\\n        }\\n\\n        // save gas by loading storage variables to memory\\n        uint256 _lastIncomeIndex = lastIncomeIndex;\\n        uint256 _emaStored = emaStored;\\n\\n        uint256 newIncomeIndex = moneyMarket.incomeIndex();\\n        uint256 incomingValue = newIncomeIndex.sub(_lastIncomeIndex).decdiv(_lastIncomeIndex).div(timeElapsed);\\n\\n        updated = true;\\n        value = incomingValue.mul(UPDATE_MULTIPLIER).add(_emaStored.mul(ONE_MINUS_UPDATE_MULTIPLIER)).div(PRECISION);\\n        emaStored = value;\\n        lastIncomeIndex = newIncomeIndex;\\n        lastUpdateTimestamp = now;\\n    }\\n\\n    function query() public view returns (uint256 value) {\\n        return emaStored;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/models/interest/LinearInterestModel.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../libs/DecMath.sol\\\";\\n\\ncontract LinearInterestModel {\\n    using SafeMath for uint256;\\n    using DecMath for uint256;\\n\\n    uint256 public constant PRECISION = 10**18;\\n    uint256 public IRMultiplier;\\n\\n    constructor(uint256 _IRMultiplier) public {\\n        IRMultiplier = _IRMultiplier;\\n    }\\n\\n    function calculateInterestAmount(\\n        uint256 depositAmount,\\n        uint256 depositPeriodInSeconds,\\n        uint256 moneyMarketInterestRatePerSecond,\\n        bool, /*surplusIsNegative*/\\n        uint256 /*surplusAmount*/\\n    ) external view returns (uint256 interestAmount) {\\n        // interestAmount = depositAmount * moneyMarketInterestRatePerSecond * IRMultiplier * depositPeriodInSeconds\\n        interestAmount = depositAmount\\n            .mul(PRECISION)\\n            .decmul(moneyMarketInterestRatePerSecond)\\n            .decmul(IRMultiplier)\\n            .mul(depositPeriodInSeconds)\\n            .div(PRECISION);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/moneymarkets/aave/AaveMarket.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../IMoneyMarket.sol\\\";\\nimport \\\"./imports/IAToken.sol\\\";\\nimport \\\"./imports/ILendingPool.sol\\\";\\nimport \\\"./imports/ILendingPoolAddressesProvider.sol\\\";\\nimport \\\"./imports/ILendingPoolCore.sol\\\";\\n\\ncontract AaveMarket is IMoneyMarket, Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n    using Address for address;\\n\\n    uint16 internal constant REFERRALCODE = 20; // Aave referral program code\\n\\n    ILendingPoolAddressesProvider public provider; // Used for fetching the current address of LendingPool\\n    ERC20 public stablecoin;\\n\\n    constructor(address _provider, address _stablecoin) public {\\n        // Verify input addresses\\n        require(\\n            _provider != address(0) && _stablecoin != address(0),\\n            \\\"AaveMarket: An input address is 0\\\"\\n        );\\n        require(\\n            _provider.isContract() && _stablecoin.isContract(),\\n            \\\"AaveMarket: An input address is not a contract\\\"\\n        );\\n\\n        provider = ILendingPoolAddressesProvider(_provider);\\n        stablecoin = ERC20(_stablecoin);\\n    }\\n\\n    function deposit(uint256 amount) external onlyOwner {\\n        require(amount > 0, \\\"AaveMarket: amount is 0\\\");\\n\\n        ILendingPool lendingPool = ILendingPool(provider.getLendingPool());\\n        address lendingPoolCore = provider.getLendingPoolCore();\\n\\n        // Transfer `amount` stablecoin from `msg.sender`\\n        stablecoin.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Approve `amount` stablecoin to lendingPool\\n        stablecoin.safeIncreaseAllowance(lendingPoolCore, amount);\\n\\n        // Deposit `amount` stablecoin to lendingPool\\n        lendingPool.deposit(address(stablecoin), amount, REFERRALCODE);\\n    }\\n\\n    function withdraw(uint256 amountInUnderlying)\\n        external\\n        onlyOwner\\n        returns (uint256 actualAmountWithdrawn)\\n    {\\n        require(amountInUnderlying > 0, \\\"AaveMarket: amountInUnderlying is 0\\\");\\n\\n        ILendingPool lendingPool = ILendingPool(provider.getLendingPool());\\n\\n        // Initialize aToken\\n        (, , , , , , , , , , , address aTokenAddress, ) = lendingPool\\n            .getReserveData(address(stablecoin));\\n        IAToken aToken = IAToken(aTokenAddress);\\n\\n        // Redeem `amountInUnderlying` aToken, since 1 aToken = 1 stablecoin\\n        aToken.redeem(amountInUnderlying);\\n\\n        // Transfer `amountInUnderlying` stablecoin to `msg.sender`\\n        stablecoin.safeTransfer(msg.sender, amountInUnderlying);\\n\\n        return amountInUnderlying;\\n    }\\n\\n    function claimRewards() external {}\\n\\n    function totalValue() external returns (uint256) {\\n        ILendingPool lendingPool = ILendingPool(provider.getLendingPool());\\n\\n        // Initialize aToken\\n        (, , , , , , , , , , , address aTokenAddress, ) = lendingPool\\n            .getReserveData(address(stablecoin));\\n        IAToken aToken = IAToken(aTokenAddress);\\n\\n        return aToken.balanceOf(address(this));\\n    }\\n\\n    function incomeIndex() external returns (uint256) {\\n        ILendingPoolCore lendingPoolCore = ILendingPoolCore(\\n            provider.getLendingPoolCore()\\n        );\\n        return lendingPoolCore.getReserveNormalizedIncome(address(stablecoin));\\n    }\\n\\n    function setRewards(address newValue) external {}\\n}\\n\"\r\n    },\r\n    \"contracts/moneymarkets/aave/imports/IAToken.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n\\n// Aave aToken interface\\n// Documentation: https://docs.aave.com/developers/developing-on-aave/the-protocol/atokens\\ninterface IAToken {\\n    function redeem(uint256 _amount) external;\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/moneymarkets/aave/imports/ILendingPool.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n\\n// Aave lending pool interface\\n// Documentation: https://docs.aave.com/developers/developing-on-aave/the-protocol/lendingpool\\ninterface ILendingPool {\\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode)\\n        external;\\n\\n    function getReserveData(address _reserve)\\n        external\\n        view\\n        returns (\\n            uint256 totalLiquidity,\\n            uint256 availableLiquidity,\\n            uint256 totalBorrowsStable,\\n            uint256 totalBorrowsVariable,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 utilizationRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            address aTokenAddress,\\n            uint40 lastUpdateTimestamp\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/moneymarkets/aave/imports/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n\\n// Aave lending pool addresses provider interface\\n// Documentation: https://docs.aave.com/developers/developing-on-aave/the-protocol/lendingpooladdressesprovider\\ninterface ILendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function setLendingPoolImpl(address _pool) external;\\n\\n    function getLendingPoolCore() external view returns (address payable);\\n\\n    function setLendingPoolCoreImpl(address _lendingPoolCore) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n\\n    function setLendingPoolConfiguratorImpl(address _configurator) external;\\n\\n    function getLendingPoolDataProvider() external view returns (address);\\n\\n    function setLendingPoolDataProviderImpl(address _provider) external;\\n\\n    function getLendingPoolParametersProvider() external view returns (address);\\n\\n    function setLendingPoolParametersProviderImpl(address _parametersProvider)\\n        external;\\n\\n    function getTokenDistributor() external view returns (address);\\n\\n    function setTokenDistributor(address _tokenDistributor) external;\\n\\n    function getFeeProvider() external view returns (address);\\n\\n    function setFeeProviderImpl(address _feeProvider) external;\\n\\n    function getLendingPoolLiquidationManager() external view returns (address);\\n\\n    function setLendingPoolLiquidationManager(address _manager) external;\\n\\n    function getLendingPoolManager() external view returns (address);\\n\\n    function setLendingPoolManager(address _lendingPoolManager) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n\\n    function setLendingRateOracle(address _lendingRateOracle) external;\\n}\\n\"\r\n    },\r\n    \"contracts/moneymarkets/aave/imports/ILendingPoolCore.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n\\n// Aave lending pool core interface\\n// Documentation: https://github.com/aave/aave-protocol/blob/master/contracts/lendingpool/LendingPoolCore.sol#L615\\ninterface ILendingPoolCore {\\n    // The equivalent of exchangeRateStored() for Compound cTokens\\n    function getReserveNormalizedIncome(address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/moneymarkets/compound/CompoundERC20Market.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../IMoneyMarket.sol\\\";\\nimport \\\"../../libs/DecMath.sol\\\";\\nimport \\\"./imports/ICERC20.sol\\\";\\nimport \\\"./imports/IComptroller.sol\\\";\\n\\ncontract CompoundERC20Market is IMoneyMarket, Ownable {\\n    using DecMath for uint256;\\n    using SafeERC20 for ERC20;\\n    using Address for address;\\n\\n    uint256 internal constant ERRCODE_OK = 0;\\n\\n    ICERC20 public cToken;\\n    IComptroller public comptroller;\\n    address public rewards;\\n    ERC20 public stablecoin;\\n\\n    constructor(\\n        address _cToken,\\n        address _comptroller,\\n        address _rewards,\\n        address _stablecoin\\n    ) public {\\n        // Verify input addresses\\n        require(\\n            _cToken != address(0) &&\\n                _comptroller != address(0) &&\\n                _rewards != address(0) &&\\n                _stablecoin != address(0),\\n            \\\"CompoundERC20Market: An input address is 0\\\"\\n        );\\n        require(\\n            _cToken.isContract() &&\\n                _comptroller.isContract() &&\\n                _rewards.isContract() &&\\n                _stablecoin.isContract(),\\n            \\\"CompoundERC20Market: An input address is not a contract\\\"\\n        );\\n\\n        cToken = ICERC20(_cToken);\\n        comptroller = IComptroller(_comptroller);\\n        rewards = _rewards;\\n        stablecoin = ERC20(_stablecoin);\\n    }\\n\\n    function deposit(uint256 amount) external onlyOwner {\\n        require(amount > 0, \\\"CompoundERC20Market: amount is 0\\\");\\n\\n        // Transfer `amount` stablecoin from `msg.sender`\\n        stablecoin.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Deposit `amount` stablecoin into cToken\\n        stablecoin.safeIncreaseAllowance(address(cToken), amount);\\n        require(\\n            cToken.mint(amount) == ERRCODE_OK,\\n            \\\"CompoundERC20Market: Failed to mint cTokens\\\"\\n        );\\n    }\\n\\n    function withdraw(uint256 amountInUnderlying)\\n        external\\n        onlyOwner\\n        returns (uint256 actualAmountWithdrawn)\\n    {\\n        require(\\n            amountInUnderlying > 0,\\n            \\\"CompoundERC20Market: amountInUnderlying is 0\\\"\\n        );\\n\\n        // Withdraw `amountInUnderlying` stablecoin from cToken\\n        require(\\n            cToken.redeemUnderlying(amountInUnderlying) == ERRCODE_OK,\\n            \\\"CompoundERC20Market: Failed to redeem\\\"\\n        );\\n\\n        // Transfer `amountInUnderlying` stablecoin to `msg.sender`\\n        stablecoin.safeTransfer(msg.sender, amountInUnderlying);\\n\\n        return amountInUnderlying;\\n    }\\n\\n    function claimRewards() external {\\n        comptroller.claimComp(address(this));\\n        ERC20 comp = ERC20(comptroller.getCompAddress());\\n        comp.safeTransfer(rewards, comp.balanceOf(address(this)));\\n    }\\n\\n    function totalValue() external returns (uint256) {\\n        uint256 cTokenBalance = cToken.balanceOf(address(this));\\n        // Amount of stablecoin units that 1 unit of cToken can be exchanged for, scaled by 10^18\\n        uint256 cTokenPrice = cToken.exchangeRateCurrent();\\n        return cTokenBalance.decmul(cTokenPrice);\\n    }\\n\\n    function incomeIndex() external returns (uint256) {\\n        return cToken.exchangeRateCurrent();\\n    }\\n\\n    /**\\n        Param setters\\n     */\\n    function setRewards(address newValue) external onlyOwner {\\n        require(newValue.isContract(), \\\"CompoundERC20Market: not contract\\\");\\n        rewards = newValue;\\n        emit ESetParamAddress(msg.sender, \\\"rewards\\\", newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/moneymarkets/compound/imports/ICERC20.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n\\n// Compound finance ERC20 market interface\\n// Documentation: https://compound.finance/docs/ctokens\\ninterface ICERC20 {\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (uint256, uint256, uint256, uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function seize(address liquidator, address borrower, uint256 seizeTokens)\\n        external\\n        returns (uint256);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount)\\n        external\\n        returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        address cTokenCollateral\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/moneymarkets/compound/imports/IComptroller.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n\\n// Compound finance Comptroller interface\\n// Documentation: https://compound.finance/docs/comptroller\\ninterface IComptroller {\\n    function claimComp(address holder) external;\\n    function getCompAddress() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/moneymarkets/yvault/imports/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.17;\\n\\ninterface Vault {\\n    function deposit(uint256) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/moneymarkets/yvault/YVaultMarket.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../IMoneyMarket.sol\\\";\\nimport \\\"../../libs/DecMath.sol\\\";\\nimport \\\"./imports/Vault.sol\\\";\\n\\ncontract YVaultMarket is IMoneyMarket, Ownable {\\n    using SafeMath for uint256;\\n    using DecMath for uint256;\\n    using SafeERC20 for ERC20;\\n    using Address for address;\\n\\n    Vault public vault;\\n    ERC20 public stablecoin;\\n\\n    constructor(address _vault, address _stablecoin) public {\\n        // Verify input addresses\\n        require(\\n            _vault != address(0) && _stablecoin != address(0),\\n            \\\"YVaultMarket: An input address is 0\\\"\\n        );\\n        require(\\n            _vault.isContract() && _stablecoin.isContract(),\\n            \\\"YVaultMarket: An input address is not a contract\\\"\\n        );\\n\\n        vault = Vault(_vault);\\n        stablecoin = ERC20(_stablecoin);\\n    }\\n\\n    function deposit(uint256 amount) external onlyOwner {\\n        require(amount > 0, \\\"YVaultMarket: amount is 0\\\");\\n\\n        // Transfer `amount` stablecoin from `msg.sender`\\n        stablecoin.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Approve `amount` stablecoin to vault\\n        stablecoin.safeIncreaseAllowance(address(vault), amount);\\n\\n        // Deposit `amount` stablecoin to vault\\n        vault.deposit(amount);\\n    }\\n\\n    function withdraw(uint256 amountInUnderlying)\\n        external\\n        onlyOwner\\n        returns (uint256 actualAmountWithdrawn)\\n    {\\n        require(\\n            amountInUnderlying > 0,\\n            \\\"YVaultMarket: amountInUnderlying is 0\\\"\\n        );\\n\\n        // Withdraw `amountInShares` shares from vault\\n        uint256 sharePrice = vault.getPricePerFullShare();\\n        uint256 amountInShares = amountInUnderlying.decdiv(sharePrice);\\n        vault.withdraw(amountInShares);\\n\\n        // Transfer stablecoin to `msg.sender`\\n        actualAmountWithdrawn = stablecoin.balanceOf(address(this));\\n        stablecoin.safeTransfer(msg.sender, actualAmountWithdrawn);\\n    }\\n\\n    function claimRewards() external {}\\n\\n    function totalValue() external returns (uint256) {\\n        uint256 sharePrice = vault.getPricePerFullShare();\\n        uint256 shareBalance = vault.balanceOf(address(this));\\n        return shareBalance.decmul(sharePrice);\\n    }\\n\\n    function incomeIndex() external returns (uint256) {\\n        return vault.getPricePerFullShare();\\n    }\\n\\n    function setRewards(address newValue) external {}\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/dumpers/Dumper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.5.17;\\n\\nimport \\\"./OneSplitDumper.sol\\\";\\nimport \\\"./withdrawers/CurveLPWithdrawer.sol\\\";\\nimport \\\"./withdrawers/YearnWithdrawer.sol\\\";\\n\\ncontract Dumper is OneSplitDumper, CurveLPWithdrawer, YearnWithdrawer {\\n    constructor(\\n        address _oneSplit,\\n        address _rewards,\\n        address _rewardToken\\n    ) public OneSplitDumper(_oneSplit, _rewards, _rewardToken) {}\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/dumpers/OneSplitDumper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/access/roles/SignerRole.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./imports/OneSplitAudit.sol\\\";\\nimport \\\"../IRewards.sol\\\";\\n\\ncontract OneSplitDumper is SignerRole {\\n    using SafeERC20 for IERC20;\\n\\n    OneSplitAudit public oneSplit;\\n    IRewards public rewards;\\n    IERC20 public rewardToken;\\n\\n    constructor(\\n        address _oneSplit,\\n        address _rewards,\\n        address _rewardToken\\n    ) public {\\n        oneSplit = OneSplitAudit(_oneSplit);\\n        rewards = IRewards(_rewards);\\n        rewardToken = IERC20(_rewardToken);\\n    }\\n\\n    function getDumpParams(address tokenAddress, uint256 parts)\\n        external\\n        view\\n        returns (uint256 returnAmount, uint256[] memory distribution)\\n    {\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 tokenBalance = token.balanceOf(address(this));\\n        (returnAmount, distribution) = oneSplit.getExpectedReturn(\\n            tokenAddress,\\n            address(rewardToken),\\n            tokenBalance,\\n            parts,\\n            0\\n        );\\n    }\\n\\n    function dump(\\n        address tokenAddress,\\n        uint256 returnAmount,\\n        uint256[] calldata distribution\\n    ) external onlySigner {\\n        // dump token for rewardToken\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 tokenBalance = token.balanceOf(address(this));\\n        token.safeIncreaseAllowance(address(oneSplit), tokenBalance);\\n\\n        uint256 rewardTokenBalanceBefore = rewardToken.balanceOf(address(this));\\n        oneSplit.swap(\\n            tokenAddress,\\n            address(rewardToken),\\n            tokenBalance,\\n            returnAmount,\\n            distribution,\\n            0\\n        );\\n        uint256 rewardTokenBalanceAfter = rewardToken.balanceOf(address(this));\\n        require(\\n            rewardTokenBalanceAfter > rewardTokenBalanceBefore,\\n            \\\"OneSplitDumper: receivedRewardTokenAmount == 0\\\"\\n        );\\n    }\\n\\n    function notify() external onlySigner {\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        rewardToken.safeTransfer(address(rewards), balance);\\n        rewards.notifyRewardAmount(balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/roles/SignerRole.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"../Roles.sol\\\";\\n\\ncontract SignerRole is Context {\\n    using Roles for Roles.Role;\\n\\n    event SignerAdded(address indexed account);\\n    event SignerRemoved(address indexed account);\\n\\n    Roles.Role private _signers;\\n\\n    constructor () internal {\\n        _addSigner(_msgSender());\\n    }\\n\\n    modifier onlySigner() {\\n        require(isSigner(_msgSender()), \\\"SignerRole: caller does not have the Signer role\\\");\\n        _;\\n    }\\n\\n    function isSigner(address account) public view returns (bool) {\\n        return _signers.has(account);\\n    }\\n\\n    function addSigner(address account) public onlySigner {\\n        _addSigner(account);\\n    }\\n\\n    function renounceSigner() public {\\n        _removeSigner(_msgSender());\\n    }\\n\\n    function _addSigner(address account) internal {\\n        _signers.add(account);\\n        emit SignerAdded(account);\\n    }\\n\\n    function _removeSigner(address account) internal {\\n        _signers.remove(account);\\n        emit SignerRemoved(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Roles.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/dumpers/imports/OneSplitAudit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.17;\\n\\ninterface OneSplitAudit {\\n    function swap(\\n        address fromToken,\\n        address destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256 flags\\n    ) external payable;\\n\\n    function getExpectedReturn(\\n        address fromToken,\\n        address destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags // See constants in IOneSplit.sol\\n    )\\n        external\\n        view\\n        returns (uint256 returnAmount, uint256[] memory distribution);\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/IRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.5.17;\\n\\ninterface IRewards {\\n    function notifyRewardAmount(uint256 reward) external;\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/dumpers/withdrawers/CurveLPWithdrawer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/access/roles/SignerRole.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../imports/Curve.sol\\\";\\nimport \\\"../../IRewards.sol\\\";\\n\\ncontract CurveLPWithdrawer is SignerRole {\\n    function curveWithdraw2(\\n        address lpTokenAddress,\\n        address curvePoolAddress,\\n        uint256[2] calldata minAmounts\\n    ) external onlySigner {\\n        IERC20 lpToken = IERC20(lpTokenAddress);\\n        uint256 lpTokenBalance = lpToken.balanceOf(address(this));\\n        ICurveFi curvePool = ICurveFi(curvePoolAddress);\\n        curvePool.remove_liquidity(lpTokenBalance, minAmounts);\\n    }\\n\\n    function curveWithdraw3(\\n        address lpTokenAddress,\\n        address curvePoolAddress,\\n        uint256[3] calldata minAmounts\\n    ) external onlySigner {\\n        IERC20 lpToken = IERC20(lpTokenAddress);\\n        uint256 lpTokenBalance = lpToken.balanceOf(address(this));\\n        ICurveFi curvePool = ICurveFi(curvePoolAddress);\\n        curvePool.remove_liquidity(lpTokenBalance, minAmounts);\\n    }\\n\\n    function curveWithdraw4(\\n        address lpTokenAddress,\\n        address curvePoolAddress,\\n        uint256[4] calldata minAmounts\\n    ) external onlySigner {\\n        IERC20 lpToken = IERC20(lpTokenAddress);\\n        uint256 lpTokenBalance = lpToken.balanceOf(address(this));\\n        ICurveFi curvePool = ICurveFi(curvePoolAddress);\\n        curvePool.remove_liquidity(lpTokenBalance, minAmounts);\\n    }\\n\\n    function curveWithdraw5(\\n        address lpTokenAddress,\\n        address curvePoolAddress,\\n        uint256[5] calldata minAmounts\\n    ) external onlySigner {\\n        IERC20 lpToken = IERC20(lpTokenAddress);\\n        uint256 lpTokenBalance = lpToken.balanceOf(address(this));\\n        ICurveFi curvePool = ICurveFi(curvePoolAddress);\\n        curvePool.remove_liquidity(lpTokenBalance, minAmounts);\\n    }\\n\\n    function curveWithdrawOneCoin(\\n        address lpTokenAddress,\\n        address curvePoolAddress,\\n        int128 coinIndex,\\n        uint256 minAmount\\n    ) external onlySigner {\\n        IERC20 lpToken = IERC20(lpTokenAddress);\\n        uint256 lpTokenBalance = lpToken.balanceOf(address(this));\\n        Zap curvePool = Zap(curvePoolAddress);\\n        curvePool.remove_liquidity_one_coin(\\n            lpTokenBalance,\\n            coinIndex,\\n            minAmount\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/dumpers/imports/Curve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.17;\\n\\ninterface ICurveFi {\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[5] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\\n        external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts)\\n        external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts)\\n        external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[5] calldata amounts)\\n        external;\\n}\\n\\ninterface Zap {\\n    function remove_liquidity_one_coin(\\n        uint256,\\n        int128,\\n        uint256\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/dumpers/withdrawers/YearnWithdrawer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/access/roles/SignerRole.sol\\\";\\nimport \\\"../imports/yERC20.sol\\\";\\n\\ncontract YearnWithdrawer is SignerRole {\\n    function yearnWithdraw(address yTokenAddress) external onlySigner {\\n        yERC20 yToken = yERC20(yTokenAddress);\\n        uint256 balance = yToken.balanceOf(address(this));\\n        yToken.withdraw(balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/dumpers/imports/yERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.17;\\n\\n// NOTE: Basically an alias for Vaults\\ninterface yERC20 {\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/Rewards.sol\": {\r\n      \"content\": \"/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n* Synthetix: Rewards.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract IRewardDistributionRecipient is Ownable {\\n    mapping(address => bool) public isRewardDistribution;\\n\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    modifier onlyRewardDistribution() {\\n        require(\\n            isRewardDistribution[_msgSender()],\\n            \\\"Caller is not reward distribution\\\"\\n        );\\n        _;\\n    }\\n\\n    function setRewardDistribution(\\n        address _rewardDistribution,\\n        bool _isRewardDistribution\\n    ) external onlyOwner {\\n        isRewardDistribution[_rewardDistribution] = _isRewardDistribution;\\n    }\\n}\\n\\ncontract LPTokenWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public stakeToken;\\n\\n    uint256 private _totalSupply;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    constructor(address _stakeToken) public {\\n        stakeToken = IERC20(_stakeToken);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount) public {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakeToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        stakeToken.safeTransfer(msg.sender, amount);\\n    }\\n}\\n\\ncontract Rewards is LPTokenWrapper, IRewardDistributionRecipient {\\n    IERC20 public rewardToken;\\n    uint256 public constant DURATION = 7 days;\\n\\n    uint256 public starttime;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier checkStart {\\n        require(block.timestamp >= starttime, \\\"Rewards: not start\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _stakeToken,\\n        address _rewardToken,\\n        uint256 _starttime\\n    ) public LPTokenWrapper(_stakeToken) {\\n        rewardToken = IERC20(_rewardToken);\\n        starttime = _starttime;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            balanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\\n    function stake(uint256 amount) public updateReward(msg.sender) checkStart {\\n        require(amount > 0, \\\"Rewards: cannot stake 0\\\");\\n        super.stake(amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, \\\"Rewards: cannot withdraw 0\\\");\\n        super.withdraw(amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    function getReward() public updateReward(msg.sender) checkStart {\\n        uint256 reward = earned(msg.sender);\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        onlyRewardDistribution\\n        updateReward(address(0))\\n    {\\n        // https://sips.synthetix.io/sips/sip-77\\n        require(reward > 0, \\\"Rewards: reward == 0\\\");\\n        require(\\n            reward < uint256(-1) / 10**18,\\n            \\\"Rewards: rewards too large, would lock\\\"\\n        );\\n        if (block.timestamp > starttime) {\\n            if (block.timestamp >= periodFinish) {\\n                rewardRate = reward.div(DURATION);\\n            } else {\\n                uint256 remaining = periodFinish.sub(block.timestamp);\\n                uint256 leftover = remaining.mul(rewardRate);\\n                rewardRate = reward.add(leftover).div(DURATION);\\n            }\\n            lastUpdateTime = block.timestamp;\\n            periodFinish = block.timestamp.add(DURATION);\\n            emit RewardAdded(reward);\\n        } else {\\n            rewardRate = reward.div(DURATION);\\n            lastUpdateTime = starttime;\\n            periodFinish = starttime.add(DURATION);\\n            emit RewardAdded(reward);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}"
        }
    },
    "99-bitcoins": {
        "contract_address": "0xc2eb40516ecaac04ae9964934983d1e9ebdf51fd",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0xc2eb40516ecaac04ae9964934983d1e9ebdf51fd": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    _checkOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if the sender is not the owner.\\n   */\\n  function _checkOwner() internal view virtual {\\n    require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby disabling any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n}\\n\\ncontract Token is Context, IERC20Metadata, Ownable {\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n  uint8 private constant _decimals = 18;\\n  uint256 public constant presaleReserve = 14_850_000_000 * (10 ** _decimals);\\n  uint256 public constant stakingReserve = 13_860_000_000 * (10 ** _decimals);\\n  uint256 public constant projectFundsReserve = 22_770_000_000 * (10 ** _decimals);\\n  uint256 public constant communityRewardsReserve = 16_830_000_000 * (10 ** _decimals);\\n  uint256 public constant liquidityReserve = 7_920_000_000 * (10 ** _decimals);\\n  uint256 public constant marketingReserve = 22_770_000_000 * (10 ** _decimals);\\n\\n  /**\\n   * @dev Contract constructor.\\n   */\\n  constructor() {\\n    _name = '99 Bitcoins';\\n    _symbol = '99BTC';\\n    _mint(0xd1602Bd81174C9FEC582a335047291036a9B1A51, presaleReserve);\\n    _mint(0x25c4FFBa937De48fEC0BEF305287E93Bf5867334, stakingReserve);\\n    _mint(0x51E3F8C9fA7636704E026A38B0FA57E419Fba5BC, projectFundsReserve);\\n    _mint(0x68e8e8EF239a4BCB4A9e6F562bF9220e64AC020F, communityRewardsReserve);\\n    _mint(0x5C00beFC4074d82fe08bf2F4f959FA06F7637bb0, liquidityReserve);\\n    _mint(0x0B94329195c3F55F53f228eB674b4360A9a530E8, marketingReserve);\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   * @return The name of the token.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   * @return The symbol of the token.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used for token display.\\n   * @return The number of decimals.\\n   */\\n  function decimals() public view virtual override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev Returns the total supply of the token.\\n   * @return The total supply.\\n   */\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev Returns the balance of the specified account.\\n   * @param account The address to check the balance for.\\n   * @return The balance of the account.\\n   */\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev Transfers tokens from the caller to a specified recipient.\\n   * @param recipient The address to transfer tokens to.\\n   * @param amount The amount of tokens to transfer.\\n   * @return A boolean value indicating whether the transfer was successful.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Returns the amount of tokens that the spender is allowed to spend on behalf of the owner.\\n   * @param from The address that approves the spending.\\n   * @param to The address that is allowed to spend.\\n   * @return The remaining allowance for the spender.\\n   */\\n  function allowance(address from, address to) public view virtual override returns (uint256) {\\n    return _allowances[from][to];\\n  }\\n\\n  /**\\n   * @dev Approves the specified address to spend the specified amount of tokens on behalf of the caller.\\n   * @param to The address to approve the spending for.\\n   * @param amount The amount of tokens to approve.\\n   * @return A boolean value indicating whether the approval was successful.\\n   */\\n  function approve(address to, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), to, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Transfers tokens from one address to another.\\n   * @param sender The address to transfer tokens from.\\n   * @param recipient The address to transfer tokens to.\\n   * @param amount The amount of tokens to transfer.\\n   * @return A boolean value indicating whether the transfer was successful.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n\\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\\n    require(currentAllowance >= amount, 'ERC20: transfer amount exceeds allowance');\\n    unchecked {\\n      _approve(sender, _msgSender(), currentAllowance - amount);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Increases the allowance of the specified address to spend tokens on behalf of the caller.\\n   * @param to The address to increase the allowance for.\\n   * @param addedValue The amount of tokens to increase the allowance by.\\n   * @return A boolean value indicating whether the increase was successful.\\n   */\\n  function increaseAllowance(address to, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), to, _allowances[_msgSender()][to] + addedValue);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decreases the allowance granted by the owner of the tokens to `to` account.\\n   * @param to The account allowed to spend the tokens.\\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\\n   * @return A boolean value indicating whether the operation succeeded.\\n   */\\n  function decreaseAllowance(address to, uint256 subtractedValue) public virtual returns (bool) {\\n    uint256 currentAllowance = _allowances[_msgSender()][to];\\n    require(currentAllowance >= subtractedValue, 'ERC20: decreased allowance below zero');\\n    unchecked {\\n      _approve(_msgSender(), to, currentAllowance - subtractedValue);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Transfers `amount` tokens from `sender` to `recipient`.\\n   * @param sender The account to transfer tokens from.\\n   * @param recipient The account to transfer tokens to.\\n   * @param amount The amount of tokens to transfer.\\n   */\\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n    require(amount > 0, 'ERC20: transfer amount zero');\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    uint256 senderBalance = _balances[sender];\\n    require(senderBalance >= amount, 'ERC20: transfer amount exceeds balance');\\n    unchecked {\\n      _balances[sender] = senderBalance - amount;\\n    }\\n    _balances[recipient] += amount;\\n\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /**\\n   * @dev Creates `amount` tokens and assigns them to `account`.\\n   * @param account The account to assign the newly created tokens to.\\n   * @param amount The amount of tokens to create.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _totalSupply += amount;\\n    _balances[account] += amount;\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n   * @param account The account to burn tokens from.\\n   * @param amount The amount of tokens to burn.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    uint256 accountBalance = _balances[account];\\n    require(accountBalance >= amount, 'ERC20: burn amount exceeds balance');\\n    unchecked {\\n      _balances[account] = accountBalance - amount;\\n    }\\n    _totalSupply -= amount;\\n\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from the caller's account, reducing the total supply.\\n   * @param amount The amount of tokens to burn.\\n   */\\n  function burn(uint256 amount) external {\\n    _burn(_msgSender(), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `to` over the caller's tokens.\\n   * @param from The account granting the allowance.\\n   * @param to The account allowed to spend the tokens.\\n   * @param amount The amount of tokens to allow.\\n   */\\n  function _approve(address from, address to, uint256 amount) internal virtual {\\n    require(from != address(0), 'ERC20: approve from the zero address');\\n    require(to != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[from][to] = amount;\\n    emit Approval(from, to, amount);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}"
        }
    },
    "a-hunters-dream": {
        "contract_address": "0xf3b9569f82b18aef890de263b84189bd33ebe452",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0xf3b9569f82b18aef890de263b84189bd33ebe452": "// SPDX-License-Identifier: MIT\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\n\n\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n\n\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\n// File: contracts/token/ERC20/behaviours/ERC20Decimals.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title ERC20Decimals\n * @dev Implementation of the ERC20Decimals. Extension of {ERC20} that adds decimals storage slot.\n */\nabstract contract ERC20Decimals is ERC20 {\n    uint8 private immutable _decimals;\n\n    /**\n     * @dev Sets the value of the `decimals`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint8 decimals_) {\n        _decimals = decimals_;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: contracts/service/ServicePayer.sol\n\n\n\npragma solidity ^0.8.0;\n\ninterface IPayable {\n    function pay(string memory serviceName) external payable;\n}\n\n/**\n * @title ServicePayer\n * @dev Implementation of the ServicePayer\n */\nabstract contract ServicePayer {\n    constructor(address payable receiver, string memory serviceName) payable {\n        IPayable(receiver).pay{value: msg.value}(serviceName);\n    }\n}\n\n// File: contracts/token/ERC20/StandardERC20.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @title StandardERC20\n * @dev Implementation of the StandardERC20\n */\ncontract StandardERC20 is ERC20Decimals, ServicePayer {\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        uint256 initialBalance_,\n        address payable feeReceiver_\n    ) payable ERC20(name_, symbol_) ERC20Decimals(decimals_) ServicePayer(feeReceiver_, \"StandardERC20\") {\n        require(initialBalance_ > 0, \"StandardERC20: supply cannot be zero\");\n\n        _mint(_msgSender(), initialBalance_);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return super.decimals();\n    }\n}\n"
        }
    },
    "aag-ventures": {
        "contract_address": "0x5ba19d656b65f1684cfea4af428c23b9f3628f97, 0xae0609a062a4eaed49de28c5f6a193261e0150ea",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x5ba19d656b65f1684cfea4af428c23b9f3628f97": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface ILosslessController {\r\n  function beforeTransfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function beforeTransferFrom(\r\n    address msgSender,\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function beforeApprove(\r\n    address sender,\r\n    address spender,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function beforeIncreaseAllowance(\r\n    address msgSender,\r\n    address spender,\r\n    uint256 addedValue\r\n  ) external;\r\n\r\n  function beforeDecreaseAllowance(\r\n    address msgSender,\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) external;\r\n\r\n  function afterApprove(\r\n    address sender,\r\n    address spender,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function afterTransfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function afterTransferFrom(\r\n    address msgSender,\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function afterIncreaseAllowance(\r\n    address sender,\r\n    address spender,\r\n    uint256 addedValue\r\n  ) external;\r\n\r\n  function afterDecreaseAllowance(\r\n    address sender,\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) external;\r\n}\r\n\r\ncontract AAGToken is Context, IERC20 {\r\n  mapping(address => uint256) private _balances;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n  string private constant NAME = \"AAG\";\r\n  string private constant SYMBOL = \"AAG\";\r\n\r\n  address public recoveryAdmin;\r\n  address private recoveryAdminCanditate;\r\n  bytes32 private recoveryAdminKeyHash;\r\n  address public admin;\r\n  uint256 public timelockPeriod;\r\n  uint256 public losslessTurnOffTimestamp;\r\n  bool public isLosslessTurnOffProposed;\r\n  bool public isLosslessOn = true;\r\n  ILosslessController private lossless;\r\n\r\n  event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\r\n  event RecoveryAdminChangeProposed(address indexed candidate);\r\n  event RecoveryAdminChanged(address indexed previousAdmin, address indexed newAdmin);\r\n  event LosslessTurnOffProposed(uint256 turnOffDate);\r\n  event LosslessTurnedOff();\r\n  event LosslessTurnedOn();\r\n\r\n  uint256 private constant _TOTAL_SUPPLY = 1000000000e18; // Initial supply 1 000 000 000\r\n  bool private initialPoolClaimed = false;\r\n\r\n  constructor(\r\n    address admin_,\r\n    address recoveryAdmin_,\r\n    uint256 timelockPeriod_,\r\n    address lossless_,\r\n    bool losslessOn\r\n  ) {\r\n    _mint(address(this), _TOTAL_SUPPLY);\r\n    admin = admin_;\r\n    recoveryAdmin = recoveryAdmin_;\r\n    timelockPeriod = timelockPeriod_;\r\n    isLosslessOn = losslessOn;\r\n    lossless = ILosslessController(lossless_);\r\n  }\r\n\r\n  // AAG unlocked tokens claiming\r\n\r\n  function claimTokens() public onlyRecoveryAdmin {\r\n    require(initialPoolClaimed == false, \"Already claimed\");\r\n    initialPoolClaimed = true;\r\n    _transfer(address(this), admin, _TOTAL_SUPPLY);\r\n  }\r\n\r\n  // --- LOSSLESS modifiers ---\r\n\r\n  modifier lssAprove(address spender, uint256 amount) {\r\n    if (isLosslessOn) {\r\n      lossless.beforeApprove(_msgSender(), spender, amount);\r\n      _;\r\n      lossless.afterApprove(_msgSender(), spender, amount);\r\n    } else {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier lssTransfer(address recipient, uint256 amount) {\r\n    if (isLosslessOn) {\r\n      lossless.beforeTransfer(_msgSender(), recipient, amount);\r\n      _;\r\n      lossless.afterTransfer(_msgSender(), recipient, amount);\r\n    } else {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier lssTransferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) {\r\n    if (isLosslessOn) {\r\n      lossless.beforeTransferFrom(_msgSender(), sender, recipient, amount);\r\n      _;\r\n      lossless.afterTransferFrom(_msgSender(), sender, recipient, amount);\r\n    } else {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier lssIncreaseAllowance(address spender, uint256 addedValue) {\r\n    if (isLosslessOn) {\r\n      lossless.beforeIncreaseAllowance(_msgSender(), spender, addedValue);\r\n      _;\r\n      lossless.afterIncreaseAllowance(_msgSender(), spender, addedValue);\r\n    } else {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier lssDecreaseAllowance(address spender, uint256 subtractedValue) {\r\n    if (isLosslessOn) {\r\n      lossless.beforeDecreaseAllowance(_msgSender(), spender, subtractedValue);\r\n      _;\r\n      lossless.afterDecreaseAllowance(_msgSender(), spender, subtractedValue);\r\n    } else {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier onlyRecoveryAdmin() {\r\n    require(_msgSender() == recoveryAdmin, \"ERC20: Must be recovery admin\");\r\n    _;\r\n  }\r\n\r\n  // --- LOSSLESS management ---\r\n\r\n  function getAdmin() external view returns (address) {\r\n    return admin;\r\n  }\r\n\r\n  function transferOutBlacklistedFunds(address[] calldata from) external {\r\n    require(_msgSender() == address(lossless), \"ERC20: Only lossless contract\");\r\n    for (uint256 i = 0; i < from.length; i++) {\r\n      _transfer(from[i], address(lossless), balanceOf(from[i]));\r\n    }\r\n  }\r\n\r\n  function setLosslessAdmin(address newAdmin) public onlyRecoveryAdmin {\r\n    emit AdminChanged(admin, newAdmin);\r\n    admin = newAdmin;\r\n  }\r\n\r\n  function transferRecoveryAdminOwnership(address candidate, bytes32 keyHash) public onlyRecoveryAdmin {\r\n    recoveryAdminCanditate = candidate;\r\n    recoveryAdminKeyHash = keyHash;\r\n    emit RecoveryAdminChangeProposed(candidate);\r\n  }\r\n\r\n  function acceptRecoveryAdminOwnership(bytes memory key) external {\r\n    require(_msgSender() == recoveryAdminCanditate, \"ERC20: Must be canditate\");\r\n    require(keccak256(key) == recoveryAdminKeyHash, \"ERC20: Invalid key\");\r\n    emit RecoveryAdminChanged(recoveryAdmin, recoveryAdminCanditate);\r\n    recoveryAdmin = recoveryAdminCanditate;\r\n  }\r\n\r\n  function proposeLosslessTurnOff() public onlyRecoveryAdmin {\r\n    losslessTurnOffTimestamp = block.timestamp + timelockPeriod;\r\n    isLosslessTurnOffProposed = true;\r\n    emit LosslessTurnOffProposed(losslessTurnOffTimestamp);\r\n  }\r\n\r\n  function executeLosslessTurnOff() public onlyRecoveryAdmin {\r\n    require(isLosslessTurnOffProposed, \"ERC20: TurnOff not proposed\");\r\n    require(losslessTurnOffTimestamp <= block.timestamp, \"ERC20: Time lock in progress\");\r\n    isLosslessOn = false;\r\n    isLosslessTurnOffProposed = false;\r\n    emit LosslessTurnedOff();\r\n  }\r\n\r\n  function executeLosslessTurnOn() public onlyRecoveryAdmin {\r\n    isLosslessTurnOffProposed = false;\r\n    isLosslessOn = true;\r\n    emit LosslessTurnedOn();\r\n  }\r\n\r\n  // --- ERC20 methods ---\r\n\r\n  function name() public view virtual returns (string memory) {\r\n    return NAME;\r\n  }\r\n\r\n  function symbol() public view virtual returns (string memory) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  function decimals() public view virtual returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address account) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) public virtual override lssTransfer(recipient, amount) returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) public virtual override lssAprove(spender, amount) returns (bool) {\r\n    require((amount == 0) || (_allowances[_msgSender()][spender] == 0), \"ERC20: Cannot change non zero allowance\");\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override lssTransferFrom(sender, recipient, amount) returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n    _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual lssIncreaseAllowance(spender, addedValue) returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual lssDecreaseAllowance(spender, subtractedValue) returns (bool) {\r\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n    require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n    return true;\r\n  }\r\n\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    _balances[sender] = senderBalance - amount;\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n    _totalSupply += amount;\r\n    _balances[account] += amount;\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n}"
        }
    },
    "aave": {
        "contract_address": "0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9, 0x63706e401c06ac8513145b7687a14804d17f814b, 0x76fb31fb4af56892a25e32cfc43de717950c9278, 7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9.factory.bridge.near, 0x202b4936fe1a82a4965220860ae46d7d3939bb25, 0xcf323aad9e522b93f11c352caa519ad0e14eb40f, 0xa7f2f790355e0c32cab03f92f6eb7f488e6f049a, 0x0091bd8d8295b25cab5a7b8b0e44498e678cfc15d872ede3215f7d4c7635ba36, 0xfb6115445bff7b52feb98650c87f44907e58f802, 0x6a07a792ab2965c72a5b8088d3a069a7ac3a993b, 0x63a72806098bd3d9520cc43356dd78afe5d386d9, 0xba5ddd1f9d7f570dc94a51479a000e3bce967196, 0xd6df932a45c0f255f85145f286ea0b292b21c90b",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20Detailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function name() external view returns(string memory);\\n    function symbol() external view returns(string memory);\\n    function decimals() external view returns(uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITransferHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.10;\\n\\ninterface ITransferHook {\\n    function onTransfer(address from, address to, uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/BaseAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport './UpgradeabilityProxy.sol';\\n\\n/**\\n * @title BaseAdminUpgradeabilityProxy\\n * @dev This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks.\\n * All external functions in this contract must be guarded by the\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Emitted when the administration has been transferred.\\n   * @param previousAdmin Address of the previous admin.\\n   * @param newAdmin Address of the new admin.\\n   */\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n\\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  /**\\n   * @dev Modifier to check whether the `msg.sender` is the admin.\\n   * If it is, it will run the function. Otherwise, it will delegate the call\\n   * to the implementation.\\n   */\\n  modifier ifAdmin() {\\n    if (msg.sender == _admin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @return The address of the proxy admin.\\n   */\\n  function admin() external ifAdmin returns (address) {\\n    return _admin();\\n  }\\n\\n  /**\\n   * @return The address of the implementation.\\n   */\\n  function implementation() external ifAdmin returns (address) {\\n    return _implementation();\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   * Only the current admin can call this function.\\n   * @param newAdmin Address to transfer proxy administration to.\\n   */\\n  function changeAdmin(address newAdmin) external ifAdmin {\\n    require(newAdmin != address(0), \\\"Cannot change the admin of a proxy to the zero address\\\");\\n    emit AdminChanged(_admin(), newAdmin);\\n    _setAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy.\\n   * Only the admin can call this function.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function upgradeTo(address newImplementation) external ifAdmin {\\n    _upgradeTo(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy and call a function\\n   * on the new implementation.\\n   * This is useful to initialize the proxied contract.\\n   * @param newImplementation Address of the new implementation.\\n   * @param data Data to send as msg.data in the low level call.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\\n    _upgradeTo(newImplementation);\\n    (bool success,) = newImplementation.delegatecall(data);\\n    require(success);\\n  }\\n\\n  /**\\n   * @return adm The admin slot.\\n   */\\n  function _admin() internal view returns (address adm) {\\n    bytes32 slot = ADMIN_SLOT;\\n    assembly {\\n      adm := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the address of the proxy admin.\\n   * @param newAdmin Address of the new proxy admin.\\n   */\\n  function _setAdmin(address newAdmin) internal {\\n    bytes32 slot = ADMIN_SLOT;\\n\\n    assembly {\\n      sstore(slot, newAdmin)\\n    }\\n  }\\n\\n  /**\\n   * @dev Only fall back when the sender is not the admin.\\n   */\\n  function _willFallback() internal override virtual {\\n    require(msg.sender != _admin(), \\\"Cannot call fallback function from the proxy admin\\\");\\n    super._willFallback();\\n  }\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/UpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport './BaseUpgradeabilityProxy.sol';\\n\\n/**\\n * @title UpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\\n * implementation and init data.\\n */\\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Contract constructor.\\n   * @param _logic Address of the initial implementation.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  constructor(address _logic, bytes memory _data) public payable {\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if(_data.length > 0) {\\n      (bool success,) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }  \\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/BaseUpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport './Proxy.sol';\\nimport './Address.sol';\\n\\n/**\\n * @title BaseUpgradeabilityProxy\\n * @dev This contract implements a proxy that allows to change the\\n * implementation address to which it will delegate.\\n * Such a change is called an implementation upgrade.\\n */\\ncontract BaseUpgradeabilityProxy is Proxy {\\n  /**\\n   * @dev Emitted when the implementation is upgraded.\\n   * @param implementation Address of the new implementation.\\n   */\\n  event Upgraded(address indexed implementation);\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev Returns the current implementation.\\n   * @return impl Address of the current implementation\\n   */\\n  function _implementation() internal override view returns (address impl) {\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n    assembly {\\n      impl := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Upgrades the proxy to a new implementation.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Sets the implementation address of the proxy.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _setImplementation(address newImplementation) internal {\\n    require(Address.isContract(newImplementation), \\\"Cannot set a proxy implementation to a non-contract address\\\");\\n\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n    assembly {\\n      sstore(slot, newImplementation)\\n    }\\n  }\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/Proxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @title Proxy\\n * @dev Implements delegation of calls to other contracts, with proper\\n * forwarding of return values and bubbling of failures.\\n * It defines a fallback function that delegates all calls to the address\\n * returned by the abstract _implementation() internal function.\\n */\\nabstract contract Proxy {\\n  /**\\n   * @dev Fallback function.\\n   * Implemented entirely in `_fallback`.\\n   */\\n  fallback () payable external {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @return The Address of the implementation.\\n   */\\n  function _implementation() internal virtual view returns (address);\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * This is a low level function that doesn't return to its internal call site.\\n   * It will return to the external caller whatever the implementation returns.\\n   * @param implementation Address to delegate.\\n   */\\n  function _delegate(address implementation) internal {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 { revert(0, returndatasize()) }\\n      default { return(0, returndatasize()) }\\n    }\\n  }\\n\\n  /**\\n   * @dev Function that is run as the first thing in the fallback function.\\n   * Can be redefined in derived contracts to add functionality.\\n   * Redefinitions must call super._willFallback().\\n   */\\n  function _willFallback() internal virtual {\\n  }\\n\\n  /**\\n   * @dev fallback implementation.\\n   * Extracted to enable manual triggering.\\n   */\\n  function _fallback() internal {\\n    _willFallback();\\n    _delegate(_implementation());\\n  }\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string internal _name;\\n    string internal _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/InitializableAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.6.10;\\n\\nimport \\\"./BaseAdminUpgradeabilityProxy.sol\\\";\\nimport \\\"./InitializableUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title InitializableAdminUpgradeabilityProxy\\n * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \\n * initializing the implementation, admin, and init data.\\n */\\ncontract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\\n    /**\\n   * Contract initializer.\\n   * @param _logic address of the initial implementation.\\n   * @param _admin Address of the proxy administrator.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n    function initialize(address _logic, address _admin, bytes memory _data) public payable {\\n        require(_implementation() == address(0));\\n        InitializableUpgradeabilityProxy.initialize(_logic, _data);\\n        assert(ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _setAdmin(_admin);\\n    }\\n\\n    /**\\n    * @dev Only fall back when the sender is not the admin.\\n    */\\n    function _willFallback() internal override(BaseAdminUpgradeabilityProxy, Proxy) {\\n        BaseAdminUpgradeabilityProxy._willFallback();\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/open-zeppelin/InitializableUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.6.10;\\n\\nimport \\\"./BaseUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title InitializableUpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\\n * implementation and init data.\\n */\\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n    /**\\n   * @dev Contract initializer.\\n   * @param _logic Address of the initial implementation.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n    function initialize(address _logic, bytes memory _data) public payable {\\n        require(_implementation() == address(0));\\n        assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        if (_data.length > 0) {\\n            (bool success, ) = _logic.delegatecall(_data);\\n            require(success);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/AaveToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.10;\\n\\nimport {ERC20} from \\\"../open-zeppelin/ERC20.sol\\\";\\nimport {ITransferHook} from \\\"../interfaces/ITransferHook.sol\\\";\\nimport {VersionedInitializable} from \\\"../utils/VersionedInitializable.sol\\\";\\n\\n\\n/**\\n* @notice implementation of the AAVE token contract\\n* @author Aave\\n*/\\ncontract AaveToken is ERC20, VersionedInitializable {\\n\\n    /// @dev snapshot of a value on a specific block, used for balances\\n    struct Snapshot {\\n        uint128 blockNumber;\\n        uint128 value;\\n    }\\n\\n    string internal constant NAME = \\\"Aave Token\\\";\\n    string internal constant SYMBOL = \\\"AAVE\\\";\\n    uint8 internal constant DECIMALS = 18;\\n\\n    /// @dev the amount being distributed for the LEND -> AAVE migration\\n    uint256 internal constant MIGRATION_AMOUNT = 13000000 ether;\\n\\n    /// @dev the amount being distributed for the PSI and PEI\\n    uint256 internal constant DISTRIBUTION_AMOUNT = 3000000 ether;\\n\\n    uint256 public constant REVISION = 1;\\n\\n    /// @dev owner => next valid nonce to submit with permit()\\n    mapping (address => uint256) public _nonces;\\n\\n    mapping (address => mapping (uint256 => Snapshot)) public _snapshots;\\n\\n    mapping (address => uint256) public _countsSnapshots;\\n\\n    /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n    /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n    /// to control all potential reentrancies by calling back the AaveToken\\n    ITransferHook public _aaveGovernance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    bytes public constant EIP712_REVISION = bytes(\\\"1\\\");\\n    bytes32 internal constant EIP712_DOMAIN = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    event SnapshotDone(address owner, uint128 oldValue, uint128 newValue);\\n\\n    constructor() ERC20(NAME, SYMBOL) public {}\\n\\n    /**\\n    * @dev initializes the contract upon assignment to the InitializableAdminUpgradeabilityProxy\\n    * @param migrator the address of the LEND -> AAVE migration contract\\n    * @param distributor the address of the AAVE distribution contract\\n    */\\n    function initialize(\\n        address migrator,\\n        address distributor,\\n        ITransferHook aaveGovernance\\n    ) external initializer {\\n\\n        uint256 chainId;\\n\\n        //solium-disable-next-line\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\\n            EIP712_DOMAIN,\\n            keccak256(bytes(NAME)),\\n            keccak256(EIP712_REVISION),\\n            chainId,\\n            address(this)\\n        ));\\n        _name = NAME;\\n        _symbol = SYMBOL;\\n        _setupDecimals(DECIMALS);\\n        _aaveGovernance = aaveGovernance;\\n        _mint(migrator, MIGRATION_AMOUNT);\\n        _mint(distributor, DISTRIBUTION_AMOUNT);\\n    }\\n\\n    /**\\n    * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n    * @param owner the owner of the funds\\n    * @param spender the spender\\n    * @param value the amount\\n    * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n    * @param v signature param\\n    * @param s signature param\\n    * @param r signature param\\n    */\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(owner != address(0), \\\"INVALID_OWNER\\\");\\n        //solium-disable-next-line\\n        require(block.timestamp <= deadline, \\\"INVALID_EXPIRATION\\\");\\n        uint256 currentValidNonce = _nonces[owner];\\n        bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(\\n                        abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n                    )\\n        );\\n\\n        require(owner == ecrecover(digest, v, r, s), \\\"INVALID_SIGNATURE\\\");\\n        _nonces[owner] = currentValidNonce.add(1);\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n    * @dev returns the revision of the implementation contract\\n    */\\n    function getRevision() internal pure override returns (uint256) {\\n        return REVISION;\\n    }\\n\\n    /**\\n    * @dev Writes a snapshot for an owner of tokens\\n    * @param owner The owner of the tokens\\n    * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n    * @param newValue The value after the operation\\n    */\\n    function _writeSnapshot(address owner, uint128 oldValue, uint128 newValue) internal {\\n        uint128 currentBlock = uint128(block.number);\\n\\n        uint256 ownerCountOfSnapshots = _countsSnapshots[owner];\\n        mapping (uint256 => Snapshot) storage snapshotsOwner = _snapshots[owner];\\n\\n        // Doing multiple operations in the same block\\n        if (ownerCountOfSnapshots != 0 && snapshotsOwner[ownerCountOfSnapshots.sub(1)].blockNumber == currentBlock) {\\n            snapshotsOwner[ownerCountOfSnapshots.sub(1)].value = newValue;\\n        } else {\\n            snapshotsOwner[ownerCountOfSnapshots] = Snapshot(currentBlock, newValue);\\n            _countsSnapshots[owner] = ownerCountOfSnapshots.add(1);\\n        }\\n\\n        emit SnapshotDone(owner, oldValue, newValue);\\n    }\\n\\n    /**\\n    * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n    * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n    * - On _mint, only for _to\\n    * - On _burn, only for _from\\n    * @param from the from address\\n    * @param to the to address\\n    * @param amount the amount to transfer\\n    */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\\n        if (from == to) {\\n            return;\\n        }\\n\\n        if (from != address(0)) {\\n            uint256 fromBalance = balanceOf(from);\\n            _writeSnapshot(from, uint128(fromBalance), uint128(fromBalance.sub(amount)));\\n        }\\n        if (to != address(0)) {\\n            uint256 toBalance = balanceOf(to);\\n            _writeSnapshot(to, uint128(toBalance), uint128(toBalance.add(amount)));\\n        }\\n\\n        // caching the aave governance address to avoid multiple state loads\\n        ITransferHook aaveGovernance = _aaveGovernance;\\n        if (aaveGovernance != ITransferHook(0)) {\\n            aaveGovernance.onTransfer(from, to, amount);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.10;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n    /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n    uint256 internal lastInitializedRevision = 0;\\n\\n   /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n    modifier initializer() {\\n        uint256 revision = getRevision();\\n        require(revision > lastInitializedRevision, \\\"Contract instance has already been initialized\\\");\\n\\n        lastInitializedRevision = revision;\\n\\n        _;\\n\\n    }\\n\\n    /// @dev returns the revision number of the contract.\\n    /// Needs to be defined in the inherited class as a constant.\\n    function getRevision() internal pure virtual returns(uint256);\\n\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/token/LendToAaveMigrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {SafeMath} from \\\"../open-zeppelin/SafeMath.sol\\\";\\nimport {VersionedInitializable} from \\\"../utils/VersionedInitializable.sol\\\";\\n\\n\\n/**\\n* @title LendToAaveMigrator\\n* @notice This contract implements the migration from LEND to AAVE token\\n* @author Aave \\n*/\\ncontract LendToAaveMigrator is VersionedInitializable {\\n    using SafeMath for uint256;\\n\\n    IERC20 public immutable AAVE;\\n    IERC20 public immutable LEND;\\n    uint256 public immutable LEND_AAVE_RATIO;\\n    uint256 public constant REVISION = 1;\\n    \\n    uint256 public _totalLendMigrated;\\n\\n    /**\\n    * @dev emitted on migration\\n    * @param sender the caller of the migration\\n    * @param amount the amount being migrated\\n    */\\n    event LendMigrated(address indexed sender, uint256 indexed amount);\\n\\n    /**\\n    * @param aave the address of the AAVE token\\n    * @param lend the address of the LEND token\\n    * @param lendAaveRatio the exchange rate between LEND and AAVE \\n     */\\n    constructor(IERC20 aave, IERC20 lend, uint256 lendAaveRatio) public {\\n        AAVE = aave;\\n        LEND = lend;\\n        LEND_AAVE_RATIO = lendAaveRatio;\\n    }\\n\\n    /**\\n    * @dev initializes the implementation\\n    */\\n    function initialize() public initializer {\\n    }\\n\\n    /**\\n    * @dev returns true if the migration started\\n    */\\n    function migrationStarted() external view returns(bool) {\\n        return lastInitializedRevision != 0;\\n    }\\n\\n\\n    /**\\n    * @dev executes the migration from LEND to AAVE. Users need to give allowance to this contract to transfer LEND before executing\\n    * this transaction.\\n    * @param amount the amount of LEND to be migrated\\n    */\\n    function migrateFromLEND(uint256 amount) external {\\n        require(lastInitializedRevision != 0, \\\"MIGRATION_NOT_STARTED\\\");\\n\\n        _totalLendMigrated = _totalLendMigrated.add(amount);\\n        LEND.transferFrom(msg.sender, address(this), amount);\\n        AAVE.transfer(msg.sender, amount.div(LEND_AAVE_RATIO));\\n        emit LendMigrated(msg.sender, amount);\\n    }\\n\\n    /**\\n    * @dev returns the implementation revision\\n    * @return the implementation revision\\n    */\\n    function getRevision() internal pure override returns (uint256) {\\n        return REVISION;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/utils/DoubleTransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.10;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\ncontract DoubleTransferHelper {\\n\\n    IERC20 public immutable AAVE;\\n\\n    constructor(IERC20 aave) public {\\n        AAVE = aave;\\n    }\\n\\n    function doubleSend(address to, uint256 amount1, uint256 amount2) external {\\n        AAVE.transfer(to, amount1);\\n        AAVE.transfer(to, amount2);\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/MintableErc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.10;\\n\\nimport \\\"../open-zeppelin/ERC20.sol\\\";\\n\\n/**\\n * @title ERC20Mintable\\n * @dev ERC20 minting logic\\n */\\ncontract MintableErc20 is ERC20 {\\n    constructor(string memory name, string memory symbol, uint8 decimals) ERC20(name, symbol) public {\\n        _setupDecimals(decimals);\\n    }\\n    /**\\n     * @dev Function to mint tokens\\n     * @param value The amount of tokens to mint.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function mint(uint256 value) public returns (bool) {\\n        _mint(msg.sender, value);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/MockTransferHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.10;\\n\\nimport {ITransferHook} from \\\"../interfaces/ITransferHook.sol\\\";\\n\\ncontract MockTransferHook is ITransferHook {\\n    event MockHookEvent();\\n\\n    function onTransfer(address from, address to, uint256 amount) external override {\\n        emit MockHookEvent();\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {}\r\n  }\r\n}}"
        }
    },
    "aavegotchi": {
        "contract_address": "0x3f382dbd960e3a9bbceae22651e88158d2791550, 0x4bd75f8c7e067ea9b6e2dfbecd99d805396bc5ff, 0x385eeac5cb85a38a9a07a70c73e0a3271cfb54a7, 0xcd2f22236dd9dfe2356d7c543161d4d260fd9bcb",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x3f382dbd960e3a9bbceae22651e88158d2791550": "pragma solidity ^0.4.24;\r\n// File: @aragon/apps-shared-minime/contracts/ITokenController.sol\r\n/// @dev The token controller contract must implement these functions\r\n\r\n\r\ninterface ITokenController {\r\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n    /// @param _owner The address that sent the ether to create tokens\r\n    /// @return True if the ether is accepted, false if it throws\r\n    function proxyPayment(address _owner) external payable returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\r\n}\r\n// File: @aragon/apps-shared-minime/contracts/MiniMeToken.sol\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/// @title MiniMeToken Contract\r\n/// @author Jordi Baylina\r\n/// @dev This token contract's goal is to make it easy for anyone to clone this\r\n///  token using the token distribution at a given block, this will allow DAO's\r\n///  and DApps to upgrade their features in a decentralized manner without\r\n///  affecting the original token\r\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController {\r\n        require(msg.sender == controller);\r\n        _;\r\n    }\r\n\r\n    address public controller;\r\n\r\n    function Controlled()  public { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) onlyController  public {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(\r\n        address from,\r\n        uint256 _amount,\r\n        address _token,\r\n        bytes _data\r\n    ) public;\r\n}\r\n\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\ncontract MiniMeToken is Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = \"MMT_0.1\"; //An arbitrary versioning scheme\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    function MiniMeToken(\r\n        MiniMeTokenFactory _tokenFactory,\r\n        MiniMeToken _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    )  public\r\n    {\r\n        tokenFactory = _tokenFactory;\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = _parentToken;\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            if (allowed[_from][msg.sender] < _amount)\r\n                return false;\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\r\n        if (_amount == 0) {\r\n            return true;\r\n        }\r\n        require(parentSnapShotBlock < block.number);\r\n        // Do not allow transfer to 0x0 or the token contract itself\r\n        require((_to != 0) && (_to != address(this)));\r\n        // If the amount being transfered is more than the balance of the\r\n        //  account the transfer returns false\r\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n        if (previousBalanceFrom < _amount) {\r\n            return false;\r\n        }\r\n        // Alerts the token controller of the transfer\r\n        if (isContract(controller)) {\r\n            // Adding the ` == true` makes the linter shut up so...\r\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\r\n        }\r\n        // First update the balance array with the new value for the address\r\n        //  sending the tokens\r\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n        // Then update the balance array with the new value for the address\r\n        //  receiving the tokens\r\n        var previousBalanceTo = balanceOfAt(_to, block.number);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n        // An event to make the transfer easy to find on the blockchain\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        // Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n            // Adding the ` == true` makes the linter shut up so...\r\n            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        _spender.receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n    ) public returns(MiniMeToken)\r\n    {\r\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\r\n\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            snapshot,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n        );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        NewCloneToken(address(cloneToken), snapshot);\r\n        return cloneToken;\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) onlyController public {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\r\n        if (checkpoints.length == 0)\r\n            return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock)\r\n            return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0)\r\n            return false;\r\n\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) pure internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    function () external payable {\r\n        require(isContract(controller));\r\n        // Adding the ` == true` makes the linter shut up so...\r\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\r\n    }\r\n\r\n//////////\r\n// Safety Methods\r\n//////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) onlyController public {\r\n        if (_token == 0x0) {\r\n            controller.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(controller, balance);\r\n        ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        MiniMeToken _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public returns (MiniMeToken)\r\n    {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n        );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}"
        }
    },
    "abds-token": {
        "contract_address": "0xb56aaac80c931161548a49181c9e000a19489c44",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0xb56aaac80c931161548a49181c9e000a19489c44": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    /**\r\n     * @dev The operation failed because the contract is paused.\r\n     */\r\n    error EnforcedPause();\r\n\r\n    /**\r\n     * @dev The operation failed because the contract is not paused.\r\n     */\r\n    error ExpectedPause();\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        if (paused()) {\r\n            revert EnforcedPause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        if (!paused()) {\r\n            revert ExpectedPause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/ABDS_Token.sol\r\n\r\n\r\npragma solidity 0.8.21;\r\n\r\n\r\n\r\n\r\n\r\ncontract ABDS_Token is IERC20, ReentrancyGuard, Pausable, Ownable {\r\n    string public constant name = \"ABDS Token\";\r\n    string public constant symbol = \"ABDS\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        _mint(msg.sender, 100000000 * (10 ** uint256(decimals)));\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public override whenNotPaused nonReentrant returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override whenNotPaused nonReentrant returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public override whenNotPaused nonReentrant returns (bool) {\r\n        _transfer(from, to, amount);\r\n        _approve(from, msg.sender, _allowances[from][msg.sender] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal {\r\n        require(from != address(0), \"ABDS: transfer from the zero address\");\r\n        require(to != address(0), \"ABDS: transfer to the zero address\");\r\n        require(_balances[from] >= amount, \"ABDS: transfer amount exceeds balance\");\r\n\r\n        _balances[from] -= amount;\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ABDS: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ABDS: burn from the zero address\");\r\n        require(_balances[account] >= amount, \"ABDS: burn amount exceeds balance\");\r\n\r\n        _balances[account] -= amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ABDS: approve from the zero address\");\r\n        require(spender != address(0), \"ABDS: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n}"
        }
    },
    "acquire-fi": {
        "contract_address": "0x4bdcb66b968060d9390c1d12bd29734496205581",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x4bdcb66b968060d9390c1d12bd29734496205581": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AcquireToken.sol\": {\r\n      \"content\": \"/**\\n * ???????.??\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract AcquireToken is ERC20 {\\n    constructor(address mintToWallet, uint256 initialSupply) ERC20(\\\"Acquire.Fi\\\", \\\"ACQ\\\") {\\n        _mint(mintToWallet, initialSupply);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}"
        }
    },
    "across-protocol": {
        "contract_address": "0x44108f0223a3c3028f5fe7aec7f9bb2e66bef82f, 0xff733b2a3557a7ed6697007ab5d11b79fdd1b76b, 0x96821b258955587069f680729cd77369c0892b40, 0x53691596d1bce8cea565b84d4915e69e03d9c99d, 0xf328b73b6c685831f238c30a23fc19140cb4d8fc",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x44108f0223a3c3028f5fe7aec7f9bb2e66bef82f": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AcrossToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AcrossToken is ERC20, Ownable {\\n    constructor() ERC20(\\\"Across Protocol Token\\\", \\\"ACX\\\") {}\\n\\n    function mint(address _guy, uint256 _wad) external onlyOwner {\\n        _mint(_guy, _wad);\\n    }\\n\\n    function burn(address _guy, uint256 _wad) external onlyOwner {\\n        _burn(_guy, _wad);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}"
        }
    },
    "adappter-token": {
        "contract_address": "0xc314b0e758d5ff74f63e307a86ebfe183c95767b",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0xc314b0e758d5ff74f63e307a86ebfe183c95767b": "{\"AdappterToken.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./ERC20Detailed.sol\\\";\\nimport \\\"./ERC20Pausable.sol\\\";\\nimport \\\"./ERC20Burnable.sol\\\";\\n\\n/**\\n *  @title The Adappter Token contract complies with the ERC20 standard \\n *  (see https://github.com/ethereum/EIPs/issues/20).\\n */\\ncontract AdappterToken is ERC20Pausable, ERC20Detailed, ERC20Burnable {\\n\\n\\n    string constant private _name = \\\"Adappter Token\\\";\\n    string constant private _symbol = \\\"ADP\\\";\\n    uint8 constant private _decimals = 18;\\n    \\n    uint constant private TOKENS_ECO        = 4000000000e18; // 40%\\n    uint constant private TOKENS_SALE       = 2000000000e18; // 20%\\n    uint constant private TOKENS_MARKETING  = 1500000000e18; // 15%\\n    uint constant private TOKENS_FOUNDATION = 1000000000e18; // 10%\\n    uint constant private TOKENS_PARTNER    = 1000000000e18; // 10%\\n    uint constant private TOKENS_TEAM       =  500000000e18; // 5%\\n    uint constant private _initialSupply    = 10000000000e18; // Initial supply of 10 billion Adappter Tokens\\n\\n    \\n    /**\\n     * @dev Constructor that gives _msgSender() all of existing tokens.\\n     */\\n    constructor () public ERC20Detailed(_name, _symbol, _decimals) {\\n        _mint( msg.sender, _initialSupply);\\n    }\\n}\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAl  lowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n     /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(value, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller\\u0027s allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\"},\"ERC20Burnable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\ncontract ERC20Burnable is ERC20, Ownable {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) onlyOwner public {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_burnFrom}.\\n     */\\n    function burnFrom(address account, uint256 amount) onlyOwner public {\\n        _burnFrom(account, amount);\\n    }\\n}\"},\"ERC20Detailed.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\"},\"ERC20Pausable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\n/**\\n * @title Pausable token\\n * @dev ERC20 with pausable transfers and allowances.\\n *\\n * Useful if you want to stop trades until the end of a crowdsale, or have\\n * an emergency switch for freezing all token transfers in the event of a large\\n * bug.\\n */\\ncontract ERC20Pausable is ERC20, Pausable {\\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\\n        return super.transferFrom(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\\n        return super.approve(spender, value);\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"Pausable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Ownable {\\n    /**\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\n     * to the deployer.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to pause, triggers stopped state.\\n     */\\n    function pause() public onlyOwner whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to unpause, returns to normal state.\\n     */\\n    function unpause() public onlyOwner whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"}}"
        }
    },
    "adex": {
        "contract_address": "0xade00c28244d5ce17d72e40330b1c318cd12b7c3, 0x6bff4fb161347ad7de4a625ae5aa3a1ca7077819, 0xdda7b23d2d72746663e7939743f929a3d85fc975",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0xade00c28244d5ce17d72e40330b1c318cd12b7c3": "pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: agpl-3.0\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n        require(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint a, uint b) internal pure returns (uint) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n// NOTE: this interface lacks return values for transfer/transferFrom/approve on purpose,\r\n// as we use the SafeERC20 library to check the return value\r\ninterface GeneralERC20 {\r\n\tfunction transfer(address to, uint256 amount) external;\r\n\tfunction transferFrom(address from, address to, uint256 amount) external;\r\n\tfunction approve(address spender, uint256 amount) external;\r\n\tfunction balanceOf(address spender) external view returns (uint);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n\tfunction checkSuccess()\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bool)\r\n\t{\r\n\t\tuint256 returnValue = 0;\r\n\r\n\t\tassembly {\r\n\t\t\t// check number of bytes returned from last function call\r\n\t\t\tswitch returndatasize()\r\n\r\n\t\t\t// no bytes returned: assume success\r\n\t\t\tcase 0x0 {\r\n\t\t\t\treturnValue := 1\r\n\t\t\t}\r\n\r\n\t\t\t// 32 bytes returned: check if non-zero\r\n\t\t\tcase 0x20 {\r\n\t\t\t\t// copy 32 bytes into scratch space\r\n\t\t\t\treturndatacopy(0x0, 0x0, 0x20)\r\n\r\n\t\t\t\t// load those bytes into returnValue\r\n\t\t\t\treturnValue := mload(0x0)\r\n\t\t\t}\r\n\r\n\t\t\t// not sure what was returned: don't mark as success\r\n\t\t\tdefault { }\r\n\t\t}\r\n\r\n\t\treturn returnValue != 0;\r\n\t}\r\n\r\n\tfunction transfer(address token, address to, uint256 amount) internal {\r\n\t\tGeneralERC20(token).transfer(to, amount);\r\n\t\trequire(checkSuccess());\r\n\t}\r\n\r\n\tfunction transferFrom(address token, address from, address to, uint256 amount) internal {\r\n\t\tGeneralERC20(token).transferFrom(from, to, amount);\r\n\t\trequire(checkSuccess());\r\n\t}\r\n\r\n\tfunction approve(address token, address spender, uint256 amount) internal {\r\n\t\tGeneralERC20(token).approve(spender, amount);\r\n\t\trequire(checkSuccess());\r\n\t}\r\n}\r\n\r\ncontract ADXToken {\r\n\tusing SafeMath for uint;\r\n\r\n\t// Constants\r\n\tstring public constant name = \"AdEx Network\";\r\n\tstring public constant symbol = \"ADX\";\r\n\tuint8 public constant decimals = 18;\r\n\r\n\t// Mutable variables\r\n\tuint public totalSupply;\r\n\tmapping(address => uint) balances;\r\n\tmapping(address => mapping(address => uint)) allowed;\r\n\r\n\tevent Approval(address indexed owner, address indexed spender, uint amount);\r\n\tevent Transfer(address indexed from, address indexed to, uint amount);\r\n\r\n\taddress public supplyController;\r\n\taddress public immutable PREV_TOKEN;\r\n\r\n\tconstructor(address supplyControllerAddr, address prevTokenAddr) public {\r\n\t\tsupplyController = supplyControllerAddr;\r\n\t\tPREV_TOKEN = prevTokenAddr;\r\n\t}\r\n\r\n\tfunction balanceOf(address owner) external view returns (uint balance) {\r\n\t\treturn balances[owner];\r\n\t}\r\n\r\n\tfunction transfer(address to, uint amount) external returns (bool success) {\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(amount);\r\n\t\tbalances[to] = balances[to].add(amount);\r\n\t\temit Transfer(msg.sender, to, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint amount) external returns (bool success) {\r\n\t\tbalances[from] = balances[from].sub(amount);\r\n\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\r\n\t\tbalances[to] = balances[to].add(amount);\r\n\t\temit Transfer(from, to, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address spender, uint amount) external returns (bool success) {\r\n\t\tallowed[msg.sender][spender] = amount;\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint remaining) {\r\n\t\treturn allowed[owner][spender];\r\n\t}\r\n\r\n\t// Supply control\r\n\tfunction innerMint(address owner, uint amount) internal {\r\n\t\ttotalSupply = totalSupply.add(amount);\r\n\t\tbalances[owner] = balances[owner].add(amount);\r\n\t\t// Because of https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer-1\r\n\t\temit Transfer(address(0), owner, amount);\r\n\t}\r\n\r\n\tfunction mint(address owner, uint amount) external {\r\n\t\trequire(msg.sender == supplyController, 'NOT_SUPPLYCONTROLLER');\r\n\t\tinnerMint(owner, amount);\r\n\t}\r\n\r\n\tfunction changeSupplyController(address newSupplyController) external {\r\n\t\trequire(msg.sender == supplyController, 'NOT_SUPPLYCONTROLLER');\r\n\t\tsupplyController = newSupplyController;\r\n\t}\r\n\r\n\t// Swapping: multiplier is 10**(18-4)\r\n\t// NOTE: Burning by sending to 0x00 is not possible with many ERC20 implementations, but this one is made specifically for the old ADX\r\n\tuint constant PREV_TO_CURRENT_TOKEN_MULTIPLIER = 100000000000000;\r\n\tfunction swap(uint prevTokenAmount) external {\r\n\t\tinnerMint(msg.sender, prevTokenAmount.mul(PREV_TO_CURRENT_TOKEN_MULTIPLIER));\r\n\t\tSafeERC20.transferFrom(PREV_TOKEN, msg.sender, address(0), prevTokenAmount);\r\n\t}\r\n}"
        }
    },
    "adrise": {
        "contract_address": "0x89ca762f778c82120c13c79a9bfbdf6e8e663ab4",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x89ca762f778c82120c13c79a9bfbdf6e8e663ab4": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": []\r\n  },\r\n  \"sources\": {\r\n    \"contracts/AdRise/AdRiseToken.sol\": {\r\n      \"content\": \"/**\\n    X:          https://x.com/AdriseAI\\n    Telegram:   https://t.me/AdRiseAI\\n    Website:    https://adrise.ai/\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.28;\\n\\nimport \\\"@openzeppelin/contracts@5.2.0/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts@5.2.0/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts@5.2.0/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\n\\ncontract AdRiseToken is Ownable, ERC20 {\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Router public immutable uniswapV2Router;\\n\\n    address public constant ZERO_ADDRESS = address(0);\\n    address public constant DEAD_ADDRESS = address(0xdEaD);\\n\\n    address public immutable uniswapV2Pair;\\n    address public immutable deployer;\\n    address public operationsWallet;\\n\\n    bool public isLimitsEnabled;\\n    bool public isCooldownEnabled;\\n    bool public isTaxEnabled;\\n    bool private inSwapBack;\\n    bool public isLaunched;\\n\\n    uint256 private lastSwapBackExecutionBlock;\\n\\n    uint256 public constant MAX_FEE = 30;\\n\\n    uint256 public maxBuy;\\n    uint256 public maxSell;\\n    uint256 public maxWallet;\\n\\n    uint256 public swapTokensAtAmount;\\n    uint256 public buyFee;\\n    uint256 public sellFee;\\n    uint256 public transferFee;\\n\\n    mapping(address => bool) public isBot;\\n    mapping(address => bool) public isExcludedFromFees;\\n    mapping(address => bool) public isExcludedFromLimits;\\n    mapping(address => bool) public isExcludedFromCooldown;\\n    mapping(address => bool) public automatedMarketMakerPairs;\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\n\\n    event Launch();\\n    event SetOperationsWallet(address newWallet, address oldWallet);\\n    event SetLimitsEnabled(bool status);\\n    event SetCooldownEnabled(bool status);\\n    event SetTaxesEnabled(bool status);\\n    event SetMaxBuy(uint256 amount);\\n    event SetMaxSell(uint256 amount);\\n    event SetMaxWallet(uint256 amount);\\n    event SetSwapTokensAtAmount(uint256 newValue, uint256 oldValue);\\n    event SetBuyFees(uint256 newValue, uint256 oldValue);\\n    event SetSellFees(uint256 newValue, uint256 oldValue);\\n    event SetTransferFees(uint256 newValue, uint256 oldValue);\\n    event ExcludeFromFees(address account, bool isExcluded);\\n    event ExcludeFromLimits(address account, bool isExcluded);\\n    event ExcludeFromCooldown(address account, bool isExcluded);\\n    event SetBots(address account, bool isExcluded);\\n    event SetAutomatedMarketMakerPair(address pair, bool value);\\n    event WithdrawStuckTokens(address token, uint256 amount);\\n\\n    error AlreadyLaunched();\\n    error InvalidSender();\\n    error AddressZero();\\n    error AmountTooLow();\\n    error AmountTooHigh();\\n    error FeeTooHigh();\\n    error AMMAlreadySet();\\n    error NoNativeTokens();\\n    error NoTokens();\\n    error FailedToWithdrawNativeTokens();\\n    error BotDetected();\\n    error TransferDelay();\\n    error MaxBuyAmountExceed();\\n    error MaxSellAmountExceed();\\n    error MaxWalletAmountExceed();\\n    error NotLaunched();\\n\\n    modifier lockSwapBack() {\\n        inSwapBack = true;\\n        _;\\n        inSwapBack = false;\\n    }\\n\\n    constructor() Ownable(msg.sender) ERC20(\\\"AdRise\\\", \\\"RISE\\\") {\\n        address sender = msg.sender;\\n        _mint(sender, 100_000_000 ether);\\n        uint256 totalSupply = totalSupply();\\n\\n        deployer = msg.sender;\\n\\n        operationsWallet = 0x1C50743235d0D971630a9c220bd219B948359fb4;\\n\\n        address uniswapUniversalRouter = 0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD;\\n        address uniswapFeeCollector = 0x000000fee13a103A10D593b9AE06b3e05F2E7E1c;\\n\\n        maxBuy = (totalSupply * 12) / 1000;\\n        maxSell = (totalSupply * 12) / 1000;\\n        maxWallet = (totalSupply * 12) / 1000;\\n        swapTokensAtAmount = (totalSupply * 5) / 10000;\\n\\n        isLimitsEnabled = true;\\n        isCooldownEnabled = true;\\n        isTaxEnabled = true;\\n\\n        buyFee = 25;\\n        sellFee = 25;\\n        transferFee = 50;\\n\\n        uniswapV2Router = IUniswapV2Router(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        );\\n\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\\n            address(this),\\n            uniswapV2Router.WETH()\\n        );\\n\\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\\n        _excludeFromFees(address(this), true);\\n        _excludeFromFees(DEAD_ADDRESS, true);\\n        _excludeFromFees(sender, true);\\n        _excludeFromFees(operationsWallet, true);\\n        _excludeFromFees(uniswapFeeCollector, true);\\n        _excludeFromLimits(address(this), true);\\n        _excludeFromLimits(DEAD_ADDRESS, true);\\n        _excludeFromLimits(sender, true);\\n        _excludeFromLimits(operationsWallet, true);\\n        _excludeFromLimits(uniswapFeeCollector, true);\\n        _excludeFromCooldown(uniswapUniversalRouter, true);\\n        _excludeFromCooldown(uniswapFeeCollector, true);\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    function launch() external onlyOwner {\\n        require(!isLaunched, AlreadyLaunched());\\n        isLaunched = true;\\n        emit Launch();\\n    }\\n\\n    function setOperationsWallet(address _operationsWallet) external {\\n        require(msg.sender == operationsWallet, InvalidSender());\\n        require(_operationsWallet != ZERO_ADDRESS, AddressZero());\\n        address oldWallet = operationsWallet;\\n        operationsWallet = _operationsWallet;\\n        emit SetOperationsWallet(operationsWallet, oldWallet);\\n    }\\n\\n    function setLimitsEnabled(bool value) external onlyOwner {\\n        isLimitsEnabled = value;\\n        emit SetLimitsEnabled(value);\\n    }\\n\\n    function setCooldownEnabled(bool value) external onlyOwner {\\n        isCooldownEnabled = value;\\n        emit SetCooldownEnabled(value);\\n    }\\n\\n    function setTaxesEnabled(bool value) external onlyOwner {\\n        isTaxEnabled = value;\\n        emit SetTaxesEnabled(value);\\n    }\\n\\n    function setMaxBuy(uint256 amount) external onlyOwner {\\n        require(amount >= ((totalSupply() * 2) / 1000), AmountTooLow());\\n        maxBuy = amount;\\n        emit SetMaxBuy(maxBuy);\\n    }\\n\\n    function setMaxSell(uint256 amount) external onlyOwner {\\n        require(amount >= ((totalSupply() * 2) / 1000), AmountTooLow());\\n        maxSell = amount;\\n        emit SetMaxSell(maxSell);\\n    }\\n\\n    function setMaxWallet(uint256 amount) external onlyOwner {\\n        require(amount >= ((totalSupply() * 3) / 1000), AmountTooLow());\\n        maxWallet = amount;\\n        emit SetMaxWallet(maxWallet);\\n    }\\n\\n    function setSwapTokensAtAmount(uint256 amount) external onlyOwner {\\n        uint256 _totalSupply = totalSupply();\\n        require(amount >= (_totalSupply * 1) / 1000000, AmountTooLow());\\n        require(amount <= (_totalSupply * 5) / 1000, AmountTooHigh());\\n        uint256 oldValue = swapTokensAtAmount;\\n        swapTokensAtAmount = amount;\\n        emit SetSwapTokensAtAmount(amount, oldValue);\\n    }\\n\\n    function setBuyFees(uint256 _buyFee) external onlyOwner {\\n        require(_buyFee <= MAX_FEE, FeeTooHigh());\\n        uint256 oldValue = buyFee;\\n        buyFee = _buyFee;\\n        emit SetBuyFees(_buyFee, oldValue);\\n    }\\n\\n    function setSellFees(uint256 _sellFee) external onlyOwner {\\n        require(_sellFee <= MAX_FEE, FeeTooHigh());\\n        uint256 oldValue = sellFee;\\n        sellFee = _sellFee;\\n        emit SetSellFees(_sellFee, oldValue);\\n    }\\n\\n    function setTransferFees(uint256 _transferFee) external onlyOwner {\\n        require(_transferFee <= MAX_FEE, FeeTooHigh());\\n        uint256 oldValue = transferFee;\\n        transferFee = _transferFee;\\n        emit SetTransferFees(_transferFee, oldValue);\\n    }\\n\\n    function excludeFromFees(address[] calldata accounts, bool value)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _excludeFromFees(accounts[i], value);\\n        }\\n    }\\n\\n    function excludeFromLimits(address[] calldata accounts, bool value)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _excludeFromLimits(accounts[i], value);\\n        }\\n    }\\n\\n    function excludeFromCooldown(address[] calldata accounts, bool value)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _excludeFromCooldown(accounts[i], value);\\n        }\\n    }\\n\\n    function setBots(address[] calldata accounts, bool value)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            if (\\n                (!automatedMarketMakerPairs[accounts[i]]) &&\\n                (accounts[i] != address(uniswapV2Router)) &&\\n                (accounts[i] != address(this)) &&\\n                (accounts[i] != ZERO_ADDRESS) &&\\n                (!isExcludedFromFees[accounts[i]] &&\\n                    !isExcludedFromLimits[accounts[i]])\\n            ) _setBots(accounts[i], value);\\n        }\\n    }\\n\\n    function setAutomatedMarketMakerPair(address pair, bool value)\\n        external\\n        onlyOwner\\n    {\\n        require(!automatedMarketMakerPairs[pair], AMMAlreadySet());\\n        _setAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function withdrawStuckTokens(address _token) external {\\n        require(msg.sender == deployer, InvalidSender());\\n        address sender = msg.sender;\\n        uint256 amount;\\n        if (_token == ZERO_ADDRESS) {\\n            bool success;\\n            amount = address(this).balance;\\n            require(amount > 0, NoNativeTokens());\\n            (success, ) = address(sender).call{value: amount}(\\\"\\\");\\n            require(success, FailedToWithdrawNativeTokens());\\n        } else {\\n            amount = IERC20(_token).balanceOf(address(this));\\n            require(amount > 0, NoTokens());\\n            IERC20(_token).safeTransfer(sender, amount);\\n        }\\n        emit WithdrawStuckTokens(_token, amount);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        address oldOwner = owner();\\n        if (oldOwner != ZERO_ADDRESS) {\\n            _excludeFromFees(oldOwner, false);\\n            _excludeFromLimits(oldOwner, false);\\n            _excludeFromCooldown(oldOwner, false);\\n        }\\n        _excludeFromFees(newOwner, true);\\n        _excludeFromLimits(newOwner, true);\\n        _excludeFromCooldown(newOwner, true);\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    function _update(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        address sender = msg.sender;\\n        address origin = tx.origin;\\n        uint256 blockNumber = block.number;\\n\\n        require(!isBot[from], BotDetected());\\n        require(sender == from || !isBot[sender], BotDetected());\\n        require(\\n            origin == from || origin == sender || !isBot[origin],\\n            BotDetected()\\n        );\\n\\n        require(\\n            isLaunched ||\\n                isExcludedFromLimits[from] ||\\n                isExcludedFromLimits[to],\\n            NotLaunched()\\n        );\\n\\n        bool limits = isLimitsEnabled &&\\n            !inSwapBack &&\\n            !(isExcludedFromLimits[from] || isExcludedFromLimits[to]);\\n        if (limits) {\\n            if (\\n                from != owner() &&\\n                to != owner() &&\\n                to != ZERO_ADDRESS &&\\n                to != DEAD_ADDRESS\\n            ) {\\n                bool cooldown = isCooldownEnabled &&\\n                    !(isExcludedFromCooldown[to]);\\n                if (cooldown) {\\n                    if (to != address(uniswapV2Router) && to != uniswapV2Pair) {\\n                        require(\\n                            _holderLastTransferTimestamp[origin] <\\n                                blockNumber - 3 &&\\n                                _holderLastTransferTimestamp[to] <\\n                                blockNumber - 3,\\n                            TransferDelay()\\n                        );\\n                        _holderLastTransferTimestamp[origin] = blockNumber;\\n                        _holderLastTransferTimestamp[to] = blockNumber;\\n                    }\\n                }\\n\\n                if (\\n                    automatedMarketMakerPairs[from] && !isExcludedFromLimits[to]\\n                ) {\\n                    require(amount <= maxBuy, MaxBuyAmountExceed());\\n                    require(\\n                        amount + balanceOf(to) <= maxWallet,\\n                        MaxWalletAmountExceed()\\n                    );\\n                } else if (\\n                    automatedMarketMakerPairs[to] && !isExcludedFromLimits[from]\\n                ) {\\n                    require(amount <= maxSell, MaxSellAmountExceed());\\n                } else if (!isExcludedFromLimits[to]) {\\n                    require(\\n                        amount + balanceOf(to) <= maxWallet,\\n                        MaxWalletAmountExceed()\\n                    );\\n                }\\n            }\\n        }\\n\\n        bool takeFee = isTaxEnabled &&\\n            !inSwapBack &&\\n            !(isExcludedFromFees[from] || isExcludedFromFees[to]);\\n\\n        if (takeFee) {\\n            uint256 fees = 0;\\n            if (automatedMarketMakerPairs[to] && sellFee > 0) {\\n                fees = (amount * sellFee) / 100;\\n            } else if (automatedMarketMakerPairs[from] && buyFee > 0) {\\n                fees = (amount * buyFee) / 100;\\n            } else if (\\n                !automatedMarketMakerPairs[to] &&\\n                !automatedMarketMakerPairs[from] &&\\n                transferFee > 0\\n            ) {\\n                fees = (amount * transferFee) / 100;\\n            }\\n\\n            if (fees > 0) {\\n                amount -= fees;\\n                super._update(from, address(this), fees);\\n            }\\n        }\\n\\n        uint256 balance = balanceOf(address(this));\\n        bool shouldSwap = balance >= swapTokensAtAmount;\\n        if (takeFee && !automatedMarketMakerPairs[from] && shouldSwap) {\\n            if (blockNumber > lastSwapBackExecutionBlock) {\\n                _swapBack(balance);\\n                lastSwapBackExecutionBlock = blockNumber;\\n            }\\n        }\\n\\n        super._update(from, to, amount);\\n    }\\n\\n    function _swapBack(uint256 balance) internal virtual lockSwapBack {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        uint256 maxSwapAmount = swapTokensAtAmount * 20;\\n\\n        if (balance > maxSwapAmount) {\\n            balance = maxSwapAmount;\\n        }\\n\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            balance,\\n            0,\\n            path,\\n            operationsWallet,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _excludeFromFees(address account, bool value) internal virtual {\\n        isExcludedFromFees[account] = value;\\n        emit ExcludeFromFees(account, value);\\n    }\\n\\n    function _excludeFromLimits(address account, bool value) internal virtual {\\n        isExcludedFromLimits[account] = value;\\n        emit ExcludeFromLimits(account, value);\\n    }\\n\\n    function _excludeFromCooldown(address account, bool value)\\n        internal\\n        virtual\\n    {\\n        isExcludedFromCooldown[account] = value;\\n        emit ExcludeFromCooldown(account, value);\\n    }\\n\\n    function _setBots(address account, bool value) internal virtual {\\n        isBot[account] = value;\\n        emit SetBots(account, value);\\n    }\\n\\n    function _setAutomatedMarketMakerPair(address pair, bool value)\\n        internal\\n        virtual\\n    {\\n        automatedMarketMakerPairs[pair] = value;\\n        emit SetAutomatedMarketMakerPair(pair, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AdRise/interfaces/IUniswapV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.28;\\r\\n\\r\\ninterface IUniswapV2Router {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/AdRise/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.28;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.2.0/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.2.0/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.2.0/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.2.0/interfaces/IERC1363.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.2.0/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.2.0/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.2.0/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.2.0/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.2.0/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.2.0/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.2.0/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  }\r\n}}"
        }
    },
    "adshares": {
        "contract_address": "0xcfcecfe2bd2fed07a9145222e8a7ad9cf1ccd22a, 0xcfcecfe2bd2fed07a9145222e8a7ad9cf1ccd22a, 0x598e49f01befeb1753737934a5b11fea9119c796",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0xcfcecfe2bd2fed07a9145222e8a7ad9cf1ccd22a": "pragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PauserRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(_msgSender());\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 with pausable transfers and allowances.\r\n *\r\n * Useful if you want to stop trades until the end of a crowdsale, or have\r\n * an emergency switch for freezing all token transfers in the event of a large\r\n * bug.\r\n */\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract OwnerRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event OwnerAdded(address indexed account);\r\n    event OwnerRemoved(address indexed account);\r\n\r\n    Roles.Role private _owners;\r\n\r\n    constructor () internal {\r\n        _addOwner(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(_msgSender()), \"OwnerRole: caller does not have the Owner role\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return _owners.has(account);\r\n    }\r\n\r\n    function addOwner(address account) public onlyOwner {\r\n        _addOwner(account);\r\n    }\r\n\r\n    function renounceOwner() public {\r\n        _removeOwner(_msgSender());\r\n    }\r\n\r\n    function _addOwner(address account) internal {\r\n        _owners.add(account);\r\n        emit OwnerAdded(account);\r\n    }\r\n\r\n    function _removeOwner(address account) internal {\r\n        _owners.remove(account);\r\n        emit OwnerRemoved(account);\r\n    }\r\n}\r\n\r\n\r\ncontract WrappedADS is ERC20, ERC20Detailed, ERC20Pausable, OwnerRole, MinterRole {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping (address => uint256) private _minterAllowances;\r\n\r\n    constructor () public ERC20Detailed(\"Adshares\", \"ADS\", 11) {\r\n\r\n    }\r\n\r\n    /**\r\n     *  Wraps received native ADS tokens and mint wrapped tokens. Logs native tx sender and id.\r\n     */\r\n    function wrapTo(address account, uint256 amount, uint64 from, uint64 txid) public onlyMinter whenNotPaused returns (bool) {\r\n        _checksumCheck(from);\r\n        emit Wrap(account, from, txid, amount);\r\n        _mint(account, amount);\r\n        _minterApprove(_msgSender(), _minterAllowances[_msgSender()].sub(amount, \"WrappedADS: minted amount exceeds minterAllowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Unwrap and destroy `amount` tokens from the caller. Logs native ADS address to receive unwrapped tokens.\r\n     *\r\n     */\r\n    function unwrap(uint256 amount, uint64 to) public whenNotPaused {\r\n        _unwrap(amount, to, 0);\r\n    }\r\n\r\n    /**\r\n     * Unwrap and destroy `amount` tokens from the caller. Logs native ADS address to receive unwrapped tokens.\r\n     *\r\n     */\r\n    function unwrapMessage(uint256 amount, uint64 to, uint128 message) public whenNotPaused {\r\n        _unwrap(amount, to, message);\r\n    }\r\n\r\n    function _unwrap(uint256 amount, uint64 to, uint128 message) internal {\r\n        _checksumCheck(to);\r\n        emit Unwrap(_msgSender(), to, amount, message);\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * Unwraps and destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     * Logs native ADS address to receive unwrapped tokens.\r\n     */\r\n    function unwrapFrom(address account, uint256 amount, uint64 to, uint128 message) public whenNotPaused {\r\n        _checksumCheck(to);\r\n        emit Unwrap(account, to, amount, message);\r\n        _burnFrom(account, amount);\r\n    }\r\n\r\n    function minterAllowance(address minter) public view returns (uint256) {\r\n        return _minterAllowances[minter];\r\n    }\r\n\r\n    /**\r\n     * Set the minterAllowance granted to `minter`.\r\n     *\r\n     */\r\n    function minterApprove(address minter, uint256 amount) public onlyOwner returns (bool) {\r\n        _minterApprove(minter, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Atomically increases the minterAllowance granted to `minter`.\r\n     *\r\n     */\r\n    function increaseMinterAllowance(address minter, uint256 addedValue) public onlyOwner returns (bool) {\r\n        _minterApprove(minter, _minterAllowances[minter].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Atomically decreases the minterAllowance granted to `minter`\r\n     *\r\n     */\r\n    function decreaseMinterAllowance(address minter, uint256 subtractedValue) public onlyOwner returns (bool) {\r\n        _minterApprove(minter, _minterAllowances[minter].sub(subtractedValue, \"WrappedADS: decreased minterAllowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _minterApprove(address minter, uint256 amount) internal {\r\n        require(isMinter(minter), \"WrappedADS: minter approve for non-minting address\");\r\n\r\n        _minterAllowances[minter] = amount;\r\n        emit MinterApproval(minter, amount);\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return MinterRole.isMinter(account) || isOwner(account);\r\n    }\r\n\r\n    function removeMinter(address account) public onlyOwner {\r\n        _minterApprove(account, 0);\r\n        _removeMinter(account);\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return PauserRole.isPauser(account) || isOwner(account);\r\n    }\r\n\r\n    function removePauser(address account) public onlyOwner {\r\n        _removePauser(account);\r\n    }\r\n\r\n    /**\r\n     * Transfer all Ether held by the contract to the owner.\r\n     */\r\n    function reclaimEther() external onlyOwner {\r\n        _msgSender().transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * Reclaim all ERC20 compatible tokenst\r\n     */\r\n    function reclaimToken(IERC20 _token) external onlyOwner {\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        _token.safeTransfer(_msgSender(), balance);\r\n    }\r\n\r\n    /**\r\n     * Verify checksum for ADS address.\r\n     */\r\n    function _checksumCheck(uint64 adsAddress) pure internal {\r\n        uint8 x;\r\n        uint16 crc = 0x1D0F;\r\n\r\n        for(uint8 i=7;i>=2;i--) {\r\n            x = (uint8)(crc >> 8) ^ ((uint8)(adsAddress >> i*8));\r\n            x ^= x>>4;\r\n            crc = (crc << 8) ^ ((uint16)(x) << 12) ^ ((uint16)(x) <<5) ^ ((uint16)(x));\r\n        }\r\n\r\n        require(crc == (adsAddress & 0xFFFF), \"WrappedADS: invalid ADS address\");\r\n    }\r\n\r\n    event Wrap(address indexed to, uint64 indexed from, uint64 txid, uint256 amount);\r\n    event Unwrap(address indexed from, uint64 indexed to, uint256 amount, uint128 message);\r\n    event MinterApproval(address indexed minter, uint256 amount);\r\n}"
        }
    },
    "adventure-gold": {
        "contract_address": "0x32353a6c91143bfd6c7d363b546e62a9a2489a20",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x32353a6c91143bfd6c7d363b546e62a9a2489a20": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n/// @title Adventure Gold for Loot holders!\r\n/// @author Will Papper <https://twitter.com/WillPapper>\r\n/// @notice This contract mints Adventure Gold for Loot holders and provides\r\n/// administrative functions to the Loot DAO. It allows:\r\n/// * Loot holders to claim Adventure Gold\r\n/// * A DAO to set seasons for new opportunities to claim Adventure Gold\r\n/// * A DAO to mint Adventure Gold for use within the Loot ecosystem\r\n/// @custom:unaudited This contract has not been audited. Use at your own risk.\r\ncontract AdventureGold is Context, Ownable, ERC20 {\r\n    // Loot contract is available at https://etherscan.io/address/0xff9c1b15b16263c61d017ee9f65c50e4ae0113d7\r\n    address public lootContractAddress =\r\n        0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;\r\n    IERC721Enumerable public lootContract;\r\n\r\n    // Give out 10,000 Adventure Gold for every Loot Bag that a user holds\r\n    uint256 public adventureGoldPerTokenId = 10000 * (10**decimals());\r\n\r\n    // tokenIdStart of 1 is based on the following lines in the Loot contract:\r\n    /** \r\n    function claim(uint256 tokenId) public nonReentrant {\r\n        require(tokenId > 0 && tokenId < 7778, \"Token ID invalid\");\r\n        _safeMint(_msgSender(), tokenId);\r\n    }\r\n    */\r\n    uint256 public tokenIdStart = 1;\r\n\r\n    // tokenIdEnd of 8000 is based on the following lines in the Loot contract:\r\n    /**\r\n        function ownerClaim(uint256 tokenId) public nonReentrant onlyOwner {\r\n        require(tokenId > 7777 && tokenId < 8001, \"Token ID invalid\");\r\n        _safeMint(owner(), tokenId);\r\n    }\r\n    */\r\n    uint256 public tokenIdEnd = 8000;\r\n\r\n    // Seasons are used to allow users to claim tokens regularly. Seasons are\r\n    // decided by the DAO.\r\n    uint256 public season = 0;\r\n\r\n    // Track claimed tokens within a season\r\n    // IMPORTANT: The format of the mapping is:\r\n    // claimedForSeason[season][tokenId][claimed]\r\n    mapping(uint256 => mapping(uint256 => bool)) public seasonClaimedByTokenId;\r\n\r\n    constructor() Ownable() ERC20(\"Adventure Gold\", \"AGLD\") {\r\n        // Transfer ownership to the Loot DAO\r\n        // Ownable by OpenZeppelin automatically sets owner to msg.sender, but\r\n        // we're going to be using a separate wallet for deployment\r\n        transferOwnership(0xcD814C83198C15A542F9A13FAf84D518d1744ED1);\r\n        lootContract = IERC721Enumerable(lootContractAddress);\r\n    }\r\n\r\n    /// @notice Claim Adventure Gold for a given Loot ID\r\n    /// @param tokenId The tokenId of the Loot NFT\r\n    function claimById(uint256 tokenId) external {\r\n        // Follow the Checks-Effects-Interactions pattern to prevent reentrancy\r\n        // attacks\r\n\r\n        // Checks\r\n\r\n        // Check that the msgSender owns the token that is being claimed\r\n        require(\r\n            _msgSender() == lootContract.ownerOf(tokenId),\r\n            \"MUST_OWN_TOKEN_ID\"\r\n        );\r\n\r\n        // Further Checks, Effects, and Interactions are contained within the\r\n        // _claim() function\r\n        _claim(tokenId, _msgSender());\r\n    }\r\n\r\n    /// @notice Claim Adventure Gold for all tokens owned by the sender\r\n    /// @notice This function will run out of gas if you have too much loot! If\r\n    /// this is a concern, you should use claimRangeForOwner and claim Adventure\r\n    /// Gold in batches.\r\n    function claimAllForOwner() external {\r\n        uint256 tokenBalanceOwner = lootContract.balanceOf(_msgSender());\r\n\r\n        // Checks\r\n        require(tokenBalanceOwner > 0, \"NO_TOKENS_OWNED\");\r\n\r\n        // i < tokenBalanceOwner because tokenBalanceOwner is 1-indexed\r\n        for (uint256 i = 0; i < tokenBalanceOwner; i++) {\r\n            // Further Checks, Effects, and Interactions are contained within\r\n            // the _claim() function\r\n            _claim(\r\n                lootContract.tokenOfOwnerByIndex(_msgSender(), i),\r\n                _msgSender()\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice Claim Adventure Gold for all tokens owned by the sender within a\r\n    /// given range\r\n    /// @notice This function is useful if you own too much Loot to claim all at\r\n    /// once or if you want to leave some Loot unclaimed. If you leave Loot\r\n    /// unclaimed, however, you cannot claim it once the next season starts.\r\n    function claimRangeForOwner(uint256 ownerIndexStart, uint256 ownerIndexEnd)\r\n        external\r\n    {\r\n        uint256 tokenBalanceOwner = lootContract.balanceOf(_msgSender());\r\n\r\n        // Checks\r\n        require(tokenBalanceOwner > 0, \"NO_TOKENS_OWNED\");\r\n\r\n        // We use < for ownerIndexEnd and tokenBalanceOwner because\r\n        // tokenOfOwnerByIndex is 0-indexed while the token balance is 1-indexed\r\n        require(\r\n            ownerIndexStart >= 0 && ownerIndexEnd < tokenBalanceOwner,\r\n            \"INDEX_OUT_OF_RANGE\"\r\n        );\r\n\r\n        // i <= ownerIndexEnd because ownerIndexEnd is 0-indexed\r\n        for (uint256 i = ownerIndexStart; i <= ownerIndexEnd; i++) {\r\n            // Further Checks, Effects, and Interactions are contained within\r\n            // the _claim() function\r\n            _claim(\r\n                lootContract.tokenOfOwnerByIndex(_msgSender(), i),\r\n                _msgSender()\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function to mint Loot upon claiming\r\n    function _claim(uint256 tokenId, address tokenOwner) internal {\r\n        // Checks\r\n        // Check that the token ID is in range\r\n        // We use >= and <= to here because all of the token IDs are 0-indexed\r\n        require(\r\n            tokenId >= tokenIdStart && tokenId <= tokenIdEnd,\r\n            \"TOKEN_ID_OUT_OF_RANGE\"\r\n        );\r\n\r\n        // Check that Adventure Gold have not already been claimed this season\r\n        // for a given tokenId\r\n        require(\r\n            !seasonClaimedByTokenId[season][tokenId],\r\n            \"GOLD_CLAIMED_FOR_TOKEN_ID\"\r\n        );\r\n\r\n        // Effects\r\n\r\n        // Mark that Adventure Gold has been claimed for this season for the\r\n        // given tokenId\r\n        seasonClaimedByTokenId[season][tokenId] = true;\r\n\r\n        // Interactions\r\n\r\n        // Send Adventure Gold to the owner of the token ID\r\n        _mint(tokenOwner, adventureGoldPerTokenId);\r\n    }\r\n\r\n    /// @notice Allows the DAO to mint new tokens for use within the Loot\r\n    /// Ecosystem\r\n    /// @param amountDisplayValue The amount of Loot to mint. This should be\r\n    /// input as the display value, not in raw decimals. If you want to mint\r\n    /// 100 Loot, you should enter \"100\" rather than the value of 100 * 10^18.\r\n    function daoMint(uint256 amountDisplayValue) external onlyOwner {\r\n        _mint(owner(), amountDisplayValue * (10**decimals()));\r\n    }\r\n\r\n    /// @notice Allows the DAO to set a new contract address for Loot. This is\r\n    /// relevant in the event that Loot migrates to a new contract.\r\n    /// @param lootContractAddress_ The new contract address for Loot\r\n    function daoSetLootContractAddress(address lootContractAddress_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        lootContractAddress = lootContractAddress_;\r\n        lootContract = IERC721Enumerable(lootContractAddress);\r\n    }\r\n\r\n    /// @notice Allows the DAO to set the token IDs that are eligible to claim\r\n    /// Loot\r\n    /// @param tokenIdStart_ The start of the eligible token range\r\n    /// @param tokenIdEnd_ The end of the eligible token range\r\n    /// @dev This is relevant in case a future Loot contract has a different\r\n    /// total supply of Loot\r\n    function daoSetTokenIdRange(uint256 tokenIdStart_, uint256 tokenIdEnd_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        tokenIdStart = tokenIdStart_;\r\n        tokenIdEnd = tokenIdEnd_;\r\n    }\r\n\r\n    /// @notice Allows the DAO to set a season for new Adventure Gold claims\r\n    /// @param season_ The season to use for claiming Loot\r\n    function daoSetSeason(uint256 season_) public onlyOwner {\r\n        season = season_;\r\n    }\r\n\r\n    /// @notice Allows the DAO to set the amount of Adventure Gold that is\r\n    /// claimed per token ID\r\n    /// @param adventureGoldDisplayValue The amount of Loot a user can claim.\r\n    /// This should be input as the display value, not in raw decimals. If you\r\n    /// want to mint 100 Loot, you should enter \"100\" rather than the value of\r\n    /// 100 * 10^18.\r\n    function daoSetAdventureGoldPerTokenId(uint256 adventureGoldDisplayValue)\r\n        public\r\n        onlyOwner\r\n    {\r\n        adventureGoldPerTokenId = adventureGoldDisplayValue * (10**decimals());\r\n    }\r\n\r\n    /// @notice Allows the DAO to set the season and Adventure Gold per token ID\r\n    /// in one transaction. This ensures that there is not a gap where a user\r\n    /// can claim more Adventure Gold than others\r\n    /// @param season_ The season to use for claiming loot\r\n    /// @param adventureGoldDisplayValue The amount of Loot a user can claim.\r\n    /// This should be input as the display value, not in raw decimals. If you\r\n    /// want to mint 100 Loot, you should enter \"100\" rather than the value of\r\n    /// 100 * 10^18.\r\n    /// @dev We would save a tiny amount of gas by modifying the season and\r\n    /// adventureGold variables directly. It is better practice for security,\r\n    /// however, to avoid repeating code. This function is so rarely used that\r\n    /// it's not worth moving these values into their own internal function to\r\n    /// skip the gas used on the modifier check.\r\n    function daoSetSeasonAndAdventureGoldPerTokenID(\r\n        uint256 season_,\r\n        uint256 adventureGoldDisplayValue\r\n    ) external onlyOwner {\r\n        daoSetSeason(season_);\r\n        daoSetAdventureGoldPerTokenId(adventureGoldDisplayValue);\r\n    }\r\n}"
        }
    },
    "advertise-coin": {
        "contract_address": "0xb6c3dc857845a713d3531cea5ac546f6767992f4",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0xb6c3dc857845a713d3531cea5ac546f6767992f4": "pragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Deployed to : 0xd43E18CA6eACd3633FC2355AC1D13E11eeF050d4\r\n// Symbol      : ADCO\r\n// Name        : Advertise Coin \r\n// Total supply: 50 000 000\r\n// Decimals    : 6\r\n//\r\n//----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths - basic maths to prohibit errors\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// \r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract ADCOToken is ERC20Interface, Owned, SafeMath {\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"ADCO\";\r\n        name = \"Advertise Coin\";\r\n        decimals = 6;\r\n        _totalSupply = 50000000000000;\r\n        balances[0xd43E18CA6eACd3633FC2355AC1D13E11eeF050d4] = _totalSupply;\r\n        emit Transfer(address(0), 0xd43E18CA6eACd3633FC2355AC1D13E11eeF050d4, _totalSupply);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n    \r\n     function totalSupplNormal() public constant returns (uint) {\r\n        return (_totalSupply  - balances[address(0)])/1000000000000000000;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account tokenOwner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to to account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer tokens from the from account to the to account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the from account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account. The spender contract function\r\n    // receiveApproval(...) is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n     function burn(uint256 _value) public returns (bool success){\r\n        require(balances[msg.sender] >= _value);\r\n        \r\n        balances[msg.sender] -= _value;\r\n        _totalSupply -= _value;\r\n        \r\n        return true;\r\n    }\r\n \r\n}"
        }
    },
    "aergo": {
        "contract_address": "0x91af0fbb28aba7e31403cb457106ce79397fd4e6",
        "chain": "ethereum",
        "source_code_or_metadata": {
            "0x91af0fbb28aba7e31403cb457106ce79397fd4e6": "// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [// importANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * // importANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Root file: src/AergoErc20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n\r\n/**\r\n * @title AergoErc20\r\n */\r\ncontract AergoErc20 is ERC20, Ownable {\r\n    bool public paused;\r\n    mapping(address => bool) public blacklist;\r\n\r\n    event AddedToBlacklist(address indexed account);\r\n    event RemovedFromBlacklist(address indexed account);\r\n    event Pause();\r\n    event Unpause();\r\n\r\n\r\n    /**\r\n     * Modifiers\r\n     */\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused || (msg.sender == owner()));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyOwner {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyOwner {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    /**\r\n     * @dev Return true if the address is in the blacklist\r\n     */\r\n    function isBlacklisted(address _address) public view returns(bool) {\r\n        return blacklist[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Add the addess to the blacklist (set to true)\r\n     */\r\n    function addToBlacklist(address _address) public virtual onlyOwner {\r\n        blacklist[_address] = true;\r\n        emit AddedToBlacklist(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove the addess from the blacklist (set to false)\r\n     */\r\n    function removeFromBlacklist(address _address) public virtual onlyOwner {\r\n        blacklist[_address] = false;\r\n        emit RemovedFromBlacklist(_address);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() ERC20(\"Aergo\", \"AERGO\") public {\r\n        paused = false;\r\n        _mint(msg.sender, 500 * (10**6) * 10**18);\r\n    }\r\n\r\n    /**\r\n     * Functions overridden so that when the contract is paused, they are not callable by anyone except the owner.\r\n     */\r\n\r\n    function transfer(address recipient, uint256 amount) public override whenNotPaused returns (bool) {\r\n        require(!isBlacklisted(_msgSender()), \"Sender is blacklisted\");\r\n        require(!isBlacklisted(recipient), \"Recipient is blacklisted\");\r\n        return super.transfer(recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override whenNotPaused returns (bool) {\r\n        require(!isBlacklisted(sender), \"Sender is blacklisted\");\r\n        require(!isBlacklisted(recipient), \"Recipient is blacklisted\");\r\n        return super.transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public override whenNotPaused returns (bool) {\r\n        require(!isBlacklisted(_msgSender()), \"Sender is blacklisted\");\r\n        require(!isBlacklisted(spender), \"Spender is blacklisted\");\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public override whenNotPaused returns (bool) {\r\n        require(!isBlacklisted(_msgSender()), \"Sender is blacklisted\");\r\n        require(!isBlacklisted(spender), \"Spender is blacklisted\");\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public override whenNotPaused returns (bool) {\r\n        require(!isBlacklisted(_msgSender()), \"Sender is blacklisted\");\r\n        require(!isBlacklisted(spender), \"Spender is blacklisted\");\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}"
        }
    },
    "catownkimono": {
        "contract_address": "Dnb9dLSXxAarXVexehzeH8W8nFmLMNJSuGoaddZSwtog",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Dnb9dLSXxAarXVexehzeH8W8nFmLMNJSuGoaddZSwtog",
            "standard": "metaplex",
            "name": "cok the cat",
            "symbol": "COK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Dnb9dLSXxAarXVexehzeH8W8nFmLMNJSuGoaddZSwtog",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/Aspx_hmFzf0sixzgjwK-T8EPGqh8djjq1Nkel0vgQ-c",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Cok2zkJ3G4dFzAvmwZ6vtSYpKt5Mvp9xbkb7aqZyUnTg",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "433305.09",
            "totalSupply": "998398826492209870",
            "totalSupplyFormatted": "998398826492.20987",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Dnb9dLSXxAarXVexehzeH8W8nFmLMNJSuGoaddZSwtog"
            },
            "description": null
        }
    },
    "catwifbag": {
        "contract_address": "D8r8XTuCrUhLheWeGXSwC3G92RhASficV3YA7B2XWcLv",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "D8r8XTuCrUhLheWeGXSwC3G92RhASficV3YA7B2XWcLv",
            "standard": "metaplex",
            "name": "catwifbag",
            "symbol": "BAG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_D8r8XTuCrUhLheWeGXSwC3G92RhASficV3YA7B2XWcLv",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreiamavhdyq4dwvl4v3kabbjgrvvt3rvg7cgg2i7x7x4cevx4sanqeu.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Fzd4wyNLEwryaWez3X1DmF18C7VVQU33Jc615Gz9GYZs",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "575340.58",
            "totalSupply": "998404498511136101",
            "totalSupplyFormatted": "998404498.511136101",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/D8r8XTuCrUhLheWeGXSwC3G92RhASficV3YA7B2XWcLv"
            },
            "description": null
        }
    },
    "catwifhat-2": {
        "contract_address": "7atgF8KQo4wJrD5ATGX7t1V2zVvykPJbFfNeVf1icFv1",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7atgF8KQo4wJrD5ATGX7t1V2zVvykPJbFfNeVf1icFv1",
            "standard": "metaplex",
            "name": "catwifhat",
            "symbol": "$CWIF",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7atgF8KQo4wJrD5ATGX7t1V2zVvykPJbFfNeVf1icFv1",
            "decimals": "2",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "99162910.22",
            "totalSupply": "99994060854742726",
            "totalSupplyFormatted": "999940608547427.26",
            "links": {
                "reddit": "https://www.reddit.com/r/catwifhatsolana",
                "telegram": "https://t.me/catwifhatonsol",
                "twitter": "https://twitter.com/catwifhatsolana",
                "website": "https://www.catwifhatsolana.com/",
                "youtube": "https://www.youtube.com/@catwifhat",
                "moralis": "https://moralis.com/chain/solana/token/price/7atgF8KQo4wJrD5ATGX7t1V2zVvykPJbFfNeVf1icFv1"
            },
            "description": null
        }
    },
    "centience": {
        "contract_address": "C9FVTtx4WxgHmz55FEvQgykq8rqiLS8xRBVgqQVtpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "C9FVTtx4WxgHmz55FEvQgykq8rqiLS8xRBVgqQVtpump",
            "standard": "metaplex",
            "name": "Centience",
            "symbol": "CENTS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_C9FVTtx4WxgHmz55FEvQgykq8rqiLS8xRBVgqQVtpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPBTd5VXX8e4sH4exFvosPyGUnEu1KGpSHZDzMJdyXGda",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "367944.58",
            "totalSupply": "999895581824399",
            "totalSupplyFormatted": "999895581.824399",
            "links": {
                "github": "https://github.com/somewheresystems/centience",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/C9FVTtx4WxgHmz55FEvQgykq8rqiLS8xRBVgqQVtpump"
            },
            "description": null
        }
    },
    "central-african-republic-meme": {
        "contract_address": "7oBYdEhV4GkXC19ZfgAvXpJWp2Rn9pm1Bx2cVNxFpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7oBYdEhV4GkXC19ZfgAvXpJWp2Rn9pm1Bx2cVNxFpump",
            "standard": "metaplex",
            "name": "Central African Republic Meme",
            "symbol": "CAR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7oBYdEhV4GkXC19ZfgAvXpJWp2Rn9pm1Bx2cVNxFpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTWn4hHDQRPH1e9qtn3cYVoNr9UDUVT2e78XWDsPSXDmj",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "16377738.96",
            "totalSupply": "999973132742526",
            "totalSupplyFormatted": "999973132.742526",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://x.com/CARMemecoinNews",
                "website": "https://www.carmemecoin.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/7oBYdEhV4GkXC19ZfgAvXpJWp2Rn9pm1Bx2cVNxFpump"
            },
            "description": null
        }
    },
    "cerebrum": {
        "contract_address": "7jiDHV9wphDKcseQaVdY8v3qe5CsciCQW5Lip5DQpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7jiDHV9wphDKcseQaVdY8v3qe5CsciCQW5Lip5DQpump",
            "standard": "metaplex",
            "name": "Cerebrum",
            "symbol": "CBM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7jiDHV9wphDKcseQaVdY8v3qe5CsciCQW5Lip5DQpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVxAu7TppWNV5Sb9w8BZsPcnuraLB8uA7LRNymwhHFo2t",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "727892.96",
            "totalSupply": "999993072871619",
            "totalSupplyFormatted": "999993072.871619",
            "links": {
                "medium": "https://medium.com/@cerebrumdev",
                "telegram": "https://t.me/cerebrum",
                "twitter": "https://x.com/cerebrumdev",
                "website": "https://cerebrum.dev/",
                "moralis": "https://moralis.com/chain/solana/token/price/7jiDHV9wphDKcseQaVdY8v3qe5CsciCQW5Lip5DQpump"
            },
            "description": null
        }
    },
    "cgai": {
        "contract_address": "DD8GJwAZHZZsLEtKnxdWfm8JbBhUj1oVwiGigfPUpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DD8GJwAZHZZsLEtKnxdWfm8JbBhUj1oVwiGigfPUpump",
            "standard": "metaplex",
            "name": "CGAI",
            "symbol": "CGAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DD8GJwAZHZZsLEtKnxdWfm8JbBhUj1oVwiGigfPUpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmegKUCoefkBcAne5ruMjSDbyK8xAi4vC244pg8ERpiM49",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "576891.74",
            "totalSupply": "566222413913050",
            "totalSupplyFormatted": "566222413.91305",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/ghostdrive_web3",
                "twitter": "https://twitter.com/CGAIOfficial",
                "website": "https://ghostdrive.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/DD8GJwAZHZZsLEtKnxdWfm8JbBhUj1oVwiGigfPUpump"
            },
            "description": null
        }
    },
    "chaisavings": {
        "contract_address": "GD8BrrhfDz2HLupx5HohuLNj5Kbc9vDwCyWE5z4bpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GD8BrrhfDz2HLupx5HohuLNj5Kbc9vDwCyWE5z4bpump",
            "standard": "metaplex",
            "name": "CHAISavings",
            "symbol": "CHAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GD8BrrhfDz2HLupx5HohuLNj5Kbc9vDwCyWE5z4bpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbRDedJi4wVEJBX57KqtacFgLc4x9ACVm3JnEviZE8USK",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1187690.53",
            "totalSupply": "999997080391887",
            "totalSupplyFormatted": "999997080.391887",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/CHAISavings",
                "twitter": "https://twitter.com/ChaiOpenLabs",
                "website": "https://chai.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/GD8BrrhfDz2HLupx5HohuLNj5Kbc9vDwCyWE5z4bpump"
            },
            "description": null
        }
    },
    "chaos-and-disorder": {
        "contract_address": "8SgNwESovnbG1oNEaPVhg6CR9mTMSK7jPvcYRe3wpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8SgNwESovnbG1oNEaPVhg6CR9mTMSK7jPvcYRe3wpump",
            "standard": "metaplex",
            "name": "chaos and disorder",
            "symbol": "CHAOS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8SgNwESovnbG1oNEaPVhg6CR9mTMSK7jPvcYRe3wpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXWEpVcBWYzFLn1FdmVkH2Z7cpddnji7CGEKvw7aG53hE",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "421260.07",
            "totalSupply": "999936076488923",
            "totalSupplyFormatted": "999936076.488923",
            "links": {
                "discord": "https://discord.gg/chaosanddisorder",
                "github": "https://github.com/divinediarrhea/divine-diarrhea",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/chaosdisorderportal",
                "twitter": "https://x.com/divinediarrhea",
                "website": "https://www.chaosanddisorder.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/8SgNwESovnbG1oNEaPVhg6CR9mTMSK7jPvcYRe3wpump"
            },
            "description": null
        }
    },
    "chatoshi": {
        "contract_address": "Bhu2wBWxfWkRJ6pFn5NodnEvMCqj9DLfCU5qMvt7pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Bhu2wBWxfWkRJ6pFn5NodnEvMCqj9DLfCU5qMvt7pump",
            "standard": "metaplex",
            "name": "chAtoshI",
            "symbol": "CHATOSHI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Bhu2wBWxfWkRJ6pFn5NodnEvMCqj9DLfCU5qMvt7pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmX99eDdqQ7qwhhWjZSCBxU6gBhgPoYT8VYHsAVtRQWgFn",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2573909.67",
            "totalSupply": "999964906889386",
            "totalSupplyFormatted": "999964906.889386",
            "links": {
                "email": "7@chatoshi.ai",
                "telegram": "https://t.me/ChatoshiCoin",
                "twitter": "https://x.com/ChatoshiAi",
                "website": "https://chatoshi.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/Bhu2wBWxfWkRJ6pFn5NodnEvMCqj9DLfCU5qMvt7pump"
            },
            "description": null
        }
    },
    "chedda-2": {
        "contract_address": "GLiB37nqnPDghvVHFS9CJ21c5BDUQxSJS3BXBWduVoPm",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GLiB37nqnPDghvVHFS9CJ21c5BDUQxSJS3BXBWduVoPm",
            "standard": "metaplex",
            "name": "Chedda",
            "symbol": "Chedda",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GLiB37nqnPDghvVHFS9CJ21c5BDUQxSJS3BXBWduVoPm",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://bafkreieqa35tg2ifwxf4w5cevpeac62664qyfutazlqu22xdlpy2nichy4.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "itZhZjarfh79Z4TfSgjsXuCezA6uar5FRuewLW8aSf6",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "116518.50",
            "totalSupply": "99996139987497",
            "totalSupplyFormatted": "999961399.87497",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/GLiB37nqnPDghvVHFS9CJ21c5BDUQxSJS3BXBWduVoPm"
            },
            "description": null
        }
    },
    "cheems": {
        "contract_address": "3FoUAsGDbvTD6YZ4wVKJgTB76onJUKz7GPEBNiR5b8wc",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3FoUAsGDbvTD6YZ4wVKJgTB76onJUKz7GPEBNiR5b8wc",
            "standard": "metaplex",
            "name": "Cheems",
            "symbol": "CHEEMS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3FoUAsGDbvTD6YZ4wVKJgTB76onJUKz7GPEBNiR5b8wc",
            "decimals": "4",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AqH29mZfQFgRpfwaPoTMWSKJ5kqauoc1FwVBRksZyQrt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "398038.21",
            "totalSupply": "24419522017975",
            "totalSupplyFormatted": "2441952201.7975",
            "links": {
                "discord": "https://discord.com/invite/dyNQmZjXbS",
                "twitter": "https://twitter.com/TheCheemsToken",
                "website": "https://cheems.co",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/CHEEMSISGAY",
                "moralis": "https://moralis.com/chain/solana/token/price/3FoUAsGDbvTD6YZ4wVKJgTB76onJUKz7GPEBNiR5b8wc"
            },
            "description": null
        }
    },
    "cheese-2": {
        "contract_address": "AbrMJWfDVRZ2EWCQ1xSCpoVeVgZNpq1U2AoYG98oRXfn",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AbrMJWfDVRZ2EWCQ1xSCpoVeVgZNpq1U2AoYG98oRXfn",
            "standard": "metaplex",
            "name": "Cheese",
            "symbol": "Cheese",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AbrMJWfDVRZ2EWCQ1xSCpoVeVgZNpq1U2AoYG98oRXfn",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmSqKqHSbJxomL22qqHnRJiQhyUVmVKP1xDAmasXmqT4k4",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "468871.81",
            "totalSupply": "999784238110371",
            "totalSupplyFormatted": "999784238.110371",
            "links": {
                "email": "cheesetokensol@gmail.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/sliceocheese",
                "twitter": "https://twitter.com/dacheeseslice",
                "website": "https://cheesed.me/",
                "moralis": "https://moralis.com/chain/solana/token/price/AbrMJWfDVRZ2EWCQ1xSCpoVeVgZNpq1U2AoYG98oRXfn"
            },
            "description": null
        }
    },
    "cheese-3": {
        "contract_address": "B1KrhWbacPi3tpjWqnsbjKQJEkp3RvWppGxNzUYBpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "B1KrhWbacPi3tpjWqnsbjKQJEkp3RvWppGxNzUYBpump",
            "standard": "metaplex",
            "name": "Cheese",
            "symbol": "CHEESE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_B1KrhWbacPi3tpjWqnsbjKQJEkp3RvWppGxNzUYBpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmZJzLWGrdMPgtUcVfNRLp3hmg4uPGomdChZQmQD6uUmFJ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "727323.32",
            "totalSupply": "999986696443770",
            "totalSupplyFormatted": "999986696.44377",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/CTO_Cheese",
                "twitter": "https://x.com/CTO_Cheese",
                "website": "https://cheesecto.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/B1KrhWbacPi3tpjWqnsbjKQJEkp3RvWppGxNzUYBpump"
            },
            "description": null
        }
    },
    "chelon": {
        "contract_address": "h415SDExtTrKXwmxYn7SyAV8QTpiVJojz9T3G7kpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "h415SDExtTrKXwmxYn7SyAV8QTpiVJojz9T3G7kpump",
            "standard": "metaplex",
            "name": "CHELON",
            "symbol": "CHELON",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_h415SDExtTrKXwmxYn7SyAV8QTpiVJojz9T3G7kpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmaJe4cT1AK5Kg52cVw21eBWPQkp8YoaScgdaRCUE5xBYe",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1124295.18",
            "totalSupply": "999996601072722",
            "totalSupplyFormatted": "999996601.072722",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/h415SDExtTrKXwmxYn7SyAV8QTpiVJojz9T3G7kpump"
            },
            "description": null
        }
    },
    "chexbacca": {
        "contract_address": "8J5e2FPmBJ1subEUeVkELpeBZv9aYUrMmfHys7sREeXr",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8J5e2FPmBJ1subEUeVkELpeBZv9aYUrMmfHys7sREeXr",
            "standard": "metaplex",
            "name": "CHEXBACCA",
            "symbol": "CHEXBACCA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8J5e2FPmBJ1subEUeVkELpeBZv9aYUrMmfHys7sREeXr",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmesBp6viANSNNgVKLunu9oRZx6J3tB6XbAHpViqFo2tM1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "652928.22",
            "totalSupply": "999865581503322",
            "totalSupplyFormatted": "999865581.503322",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/chexbacca_token",
                "twitter": "https://twitter.com/chexbaccatoken",
                "website": "https://chexbacca.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/8J5e2FPmBJ1subEUeVkELpeBZv9aYUrMmfHys7sREeXr"
            },
            "description": null
        }
    },
    "cheyenne": {
        "contract_address": "UrAE9vVdrWxncikcCRp7TgNqEsArFtP22iXzH7gpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "UrAE9vVdrWxncikcCRp7TgNqEsArFtP22iXzH7gpump",
            "standard": "metaplex",
            "name": "Cheyenne",
            "symbol": "Cheyenne",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_UrAE9vVdrWxncikcCRp7TgNqEsArFtP22iXzH7gpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUzhLBu9Njz8WiBxLBvcN4KTbPCUNQF3qQq2fEhEgZWDp",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "305522.94",
            "totalSupply": "989884610037558",
            "totalSupplyFormatted": "989884610.037558",
            "links": {
                "telegram": "https://t.me/CheyennePortal",
                "twitter": "https://x.com/CheyenneCTO",
                "website": "https://www.cheyennecto.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/UrAE9vVdrWxncikcCRp7TgNqEsArFtP22iXzH7gpump"
            },
            "description": null
        }
    },
    "chill-drone": {
        "contract_address": "47TSGRuTiSsDpifLUu8WYc3xveFP7SwAvbi9K6brpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "47TSGRuTiSsDpifLUu8WYc3xveFP7SwAvbi9K6brpump",
            "standard": "metaplex",
            "name": "Chill Drone",
            "symbol": "CHONE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_47TSGRuTiSsDpifLUu8WYc3xveFP7SwAvbi9K6brpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbgxZmjQnfQHXAi2Qqemei3ANSnt52hQaTVFd1xjwpshP",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "398739.61",
            "totalSupply": "996340900074148",
            "totalSupplyFormatted": "996340900.074148",
            "links": {
                "email": "admin@chilldrone.io",
                "telegram": "https://t.me/chilldroneio",
                "twitter": "https://x.com/chilldrone_io",
                "website": "https://www.chilldrone.io",
                "moralis": "https://moralis.com/chain/solana/token/price/47TSGRuTiSsDpifLUu8WYc3xveFP7SwAvbi9K6brpump"
            },
            "description": null
        }
    },
    "chill-guy": {
        "contract_address": "Df6yfrKC8kZE3KNkrHERKzAetSxbrWeniQfyJY4Jpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Df6yfrKC8kZE3KNkrHERKzAetSxbrWeniQfyJY4Jpump",
            "standard": "metaplex",
            "name": "Just a chill guy",
            "symbol": "CHILLGUY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Df6yfrKC8kZE3KNkrHERKzAetSxbrWeniQfyJY4Jpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmckb3nWWHyoJKtX3FeagfmDZXNVqiXM4nKkYsTnygm2Ah",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "30312263.27",
            "totalSupply": "999955210610081",
            "totalSupplyFormatted": "999955210.610081",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/chillguyctoverify",
                "twitter": "https://x.com/chillguycto",
                "website": "https://www.chillguy.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/Df6yfrKC8kZE3KNkrHERKzAetSxbrWeniQfyJY4Jpump"
            },
            "description": null
        }
    },
    "choctopus": {
        "contract_address": "EVrGfAj99Xr1NjqqZv6E2msVKZVmhGaThHhcZXzrpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EVrGfAj99Xr1NjqqZv6E2msVKZVmhGaThHhcZXzrpump",
            "standard": "metaplex",
            "name": "Choctopus",
            "symbol": "Choctopus",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EVrGfAj99Xr1NjqqZv6E2msVKZVmhGaThHhcZXzrpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmebRtEpVvVEHJ74R8P79VdpaR23C3RUUxSLzzfg2pGssb",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "424597.35",
            "totalSupply": "995700000000643",
            "totalSupplyFormatted": "995700000.000643",
            "links": {
                "discord": "https://discord.gg/hQXtYmJvM2",
                "telegram": "https://t.me/choctopuscoin",
                "twitter": "https://twitter.com/ChoctopusCrypto",
                "website": "https://choctopus.io",
                "moralis": "https://moralis.com/chain/solana/token/price/EVrGfAj99Xr1NjqqZv6E2msVKZVmhGaThHhcZXzrpump"
            },
            "description": null
        }
    },
    "chonk-2": {
        "contract_address": "AT7RRrFhBU1Dw1WghdgAqeNKNXKomDFXm77owQgppump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AT7RRrFhBU1Dw1WghdgAqeNKNXKomDFXm77owQgppump",
            "standard": "metaplex",
            "name": "CHONK",
            "symbol": "CHONK",
            "logo": "https://adds-token-info-29a861f.s3.amazonaws.com/solana/AT7RRrFhBU1Dw1WghdgAqeNKNXKomDFXm77owQgppump/cc00b6c1-5251-4018-a66d-440a356b3ebb.png",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSJBFx8Dy3QJ2CzG9TnL3pMN9G6tnFYkDWLeHmehcyRkn",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "814787.90",
            "totalSupply": "999986381654258",
            "totalSupplyFormatted": "999986381.654258",
            "links": {
                "telegram": "https://t.me/chonkler",
                "youtube": "https://www.youtube.com/@CHONKLER777/videos",
                "moralis": "https://moralis.com/chain/solana/token/price/AT7RRrFhBU1Dw1WghdgAqeNKNXKomDFXm77owQgppump"
            },
            "description": "$CHONK is the CHAD that went MAD because of the clown world."
        }
    },
    "chonky": {
        "contract_address": "H7ed7UgcLp3ax4X1CQ5WuWDn6d1pprfMMYiv5ejwLWWU",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "H7ed7UgcLp3ax4X1CQ5WuWDn6d1pprfMMYiv5ejwLWWU",
            "standard": "metaplex",
            "name": "CHONKY",
            "symbol": "CHONKY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_H7ed7UgcLp3ax4X1CQ5WuWDn6d1pprfMMYiv5ejwLWWU",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://nftstorage.link/ipfs/bafkreibpwatlcqadlxtdvbwk2pbsgue72tcpzceq6hom235yhhinh2tybm",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8V27jfKqdu46kGwJ9NmJHokpNJG81LipiUffzUMh1AfY",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1762185.99",
            "totalSupply": "499485826234704450",
            "totalSupplyFormatted": "499485826234.70445",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/solanachonky",
                "twitter": "https://twitter.com/chonkycom",
                "website": "https://chonky.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/H7ed7UgcLp3ax4X1CQ5WuWDn6d1pprfMMYiv5ejwLWWU"
            },
            "description": null
        }
    },
    "choruz-ai": {
        "contract_address": "361pUXTPohPEgcnCVm7DUvNziizK37gVxLN3cw9Vpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "361pUXTPohPEgcnCVm7DUvNziizK37gVxLN3cw9Vpump",
            "standard": "metaplex",
            "name": "Choruz AI",
            "symbol": "CHORUZ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_361pUXTPohPEgcnCVm7DUvNziizK37gVxLN3cw9Vpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmZEiGA16dFjkzLs3ey9KyafNm5iozi927P5LfV6ybKU8U",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "868604.13",
            "totalSupply": "999791812320331",
            "totalSupplyFormatted": "999791812.320331",
            "links": {
                "telegram": "https://t.me/choruzai",
                "twitter": "https://twitter.com/choruzai",
                "website": "https://www.choruz.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/361pUXTPohPEgcnCVm7DUvNziizK37gVxLN3cw9Vpump"
            },
            "description": null
        }
    },
    "chudjak": {
        "contract_address": "6yjNqPzTSanBWSa6dxVEgTjePXBrZ2FoHLDQwYwEsyM6",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6yjNqPzTSanBWSa6dxVEgTjePXBrZ2FoHLDQwYwEsyM6",
            "standard": "metaplex",
            "name": "Chudjak",
            "symbol": "Chud",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6yjNqPzTSanBWSa6dxVEgTjePXBrZ2FoHLDQwYwEsyM6",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmTXTMc25MJk6h7JmDQpXEFUF8aMgTzovM7915x6fyJu1m",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1580381.54",
            "totalSupply": "926911082566230",
            "totalSupplyFormatted": "926911082.56623",
            "links": {
                "email": "chudjaksol@proton.me",
                "instagram": "https://www.instagram.com/chudjakcoin/",
                "medium": "https://medium.com/@chudjakcoin",
                "reddit": "https://www.reddit.com/r/chudjakcoin",
                "telegram": "https://t.me/chudjaksolana",
                "tiktok": "https://www.tiktok.com/@chudjakcoin",
                "twitter": "https://twitter.com/chudjak",
                "website": "https://chudjaksolana.xyz/",
                "youtube": "https://www.youtube.com/@chudjakcoin",
                "moralis": "https://moralis.com/chain/solana/token/price/6yjNqPzTSanBWSa6dxVEgTjePXBrZ2FoHLDQwYwEsyM6"
            },
            "description": null
        }
    },
    "clapcat": {
        "contract_address": "9b8jL2wcVjBFpieC5TUR76BDJ6sW8Eghd3fyq5VJmzir",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9b8jL2wcVjBFpieC5TUR76BDJ6sW8Eghd3fyq5VJmzir",
            "standard": "metaplex",
            "name": "Clap Cat",
            "symbol": "CLAP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9b8jL2wcVjBFpieC5TUR76BDJ6sW8Eghd3fyq5VJmzir",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/vC0sVUpHO_4MvteyTKfIg7rdgMZ2fMhZ9yYA04kTPCo",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7KD5CrwV3UYaLrF3mzujL89ovK1PCRSSiei7LAfxSvwy",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "789628.56",
            "totalSupply": "956463538034366",
            "totalSupplyFormatted": "956463538.034366",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/9b8jL2wcVjBFpieC5TUR76BDJ6sW8Eghd3fyq5VJmzir"
            },
            "description": null
        }
    },
    "cloudyheart": {
        "contract_address": "BrZmDQwbdLXme3uaea8znLhy9Bb3fucMJmcFBuRPpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BrZmDQwbdLXme3uaea8znLhy9Bb3fucMJmcFBuRPpump",
            "standard": "metaplex",
            "name": "cloudyheart",
            "symbol": "cloudy",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BrZmDQwbdLXme3uaea8znLhy9Bb3fucMJmcFBuRPpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmZYeCcU4WhLYNaug8FBgcKmaogEihPkXasA88kGC8GiYT",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2427276.31",
            "totalSupply": "999992712089312",
            "totalSupplyFormatted": "999992712.089312",
            "links": {
                "telegram": "https://t.me/cl0udyheart",
                "twitter": "https://twitter.com/cl0udyh3art",
                "website": "https://www.cloudyheart.net/",
                "moralis": "https://moralis.com/chain/solana/token/price/BrZmDQwbdLXme3uaea8znLhy9Bb3fucMJmcFBuRPpump"
            },
            "description": null
        }
    },
    "coal-2": {
        "contract_address": "E3yUqBNTZxV8ELvW99oRLC7z4ddbJqqR4NphwrMug9zu",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "E3yUqBNTZxV8ELvW99oRLC7z4ddbJqqR4NphwrMug9zu",
            "standard": "metaplex",
            "name": "coal",
            "symbol": "coal",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_E3yUqBNTZxV8ELvW99oRLC7z4ddbJqqR4NphwrMug9zu",
            "decimals": "11",
            "metaplex": {
                "metadataUri": "https://coal.digital/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FJka1yJHn1SWux2X1o8VqHC8uaAWGv6CbNQvPWLJQufq",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "153011.54",
            "totalSupply": "825421820171465580",
            "totalSupplyFormatted": "8254218.2017146558",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/E3yUqBNTZxV8ELvW99oRLC7z4ddbJqqR4NphwrMug9zu"
            },
            "description": null
        }
    },
    "coby": {
        "contract_address": "8WnQQRbuEZ3CCDbH5MCVioBbw6o75NKANq9WdPhBDsWo",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8WnQQRbuEZ3CCDbH5MCVioBbw6o75NKANq9WdPhBDsWo",
            "standard": "metaplex",
            "name": "coby",
            "symbol": "coby",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8WnQQRbuEZ3CCDbH5MCVioBbw6o75NKANq9WdPhBDsWo",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmcAmebkuvbth9Gt4sPZuRUVvbTvaAxxCsUGnatgF1YJqT",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "460454.03",
            "totalSupply": "999633180777222",
            "totalSupplyFormatted": "999633180.777222",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8WnQQRbuEZ3CCDbH5MCVioBbw6o75NKANq9WdPhBDsWo"
            },
            "description": null
        }
    },
    "collaterize": {
        "contract_address": "C7heQqfNzdMbUFQwcHkL9FvdwsFsDRBnfwZDDyWYCLTZ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "C7heQqfNzdMbUFQwcHkL9FvdwsFsDRBnfwZDDyWYCLTZ",
            "standard": "metaplex",
            "name": "Collaterize",
            "symbol": "$COLLAT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_C7heQqfNzdMbUFQwcHkL9FvdwsFsDRBnfwZDDyWYCLTZ",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVbmfSyrr6asqNhmrDNFsBkmRsHffaMJfUSJSD4tyycAR",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "24480324.22",
            "totalSupply": "999964389742270",
            "totalSupplyFormatted": "999964389.74227",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/C7heQqfNzdMbUFQwcHkL9FvdwsFsDRBnfwZDDyWYCLTZ"
            },
            "description": null
        }
    },
    "comedian": {
        "contract_address": "9PR7nCP9DpcUotnDPVLUBUZKu5WAYkwrCUx9wDnSpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9PR7nCP9DpcUotnDPVLUBUZKu5WAYkwrCUx9wDnSpump",
            "standard": "metaplex",
            "name": "Comedian",
            "symbol": "Ban",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9PR7nCP9DpcUotnDPVLUBUZKu5WAYkwrCUx9wDnSpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdQb1U6dmKSL5os8LmFwh9hDQ7TcmDathFp1C3SdwgPzj",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "60538078.85",
            "totalSupply": "999861674062252",
            "totalSupplyFormatted": "999861674.062252",
            "links": {
                "discord": "https://discord.gg/98SPpykTf5",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/bansolgroup",
                "twitter": "https://x.com/ban_comedian",
                "website": "https://banart.art/pc/index.html",
                "moralis": "https://moralis.com/chain/solana/token/price/9PR7nCP9DpcUotnDPVLUBUZKu5WAYkwrCUx9wDnSpump"
            },
            "description": null
        }
    },
    "conan-meme": {
        "contract_address": "CQvadZTR8vikRqqwyhvYV8YpdfCRjUCGyQwCuY4rxBQt",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CQvadZTR8vikRqqwyhvYV8YpdfCRjUCGyQwCuY4rxBQt",
            "standard": "metaplex",
            "name": "Conan",
            "symbol": "Conan",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CQvadZTR8vikRqqwyhvYV8YpdfCRjUCGyQwCuY4rxBQt",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/uBnVNjKlyO14uGrFgoZQUH5tRxjpKrPOIZEB2OMQ3J4",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DkuLx2Q7m4gTTjRWWYtqTyjSeXVCDXGJd7BmWfRtjT5K",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "10882113.07",
            "totalSupply": "822787846552673",
            "totalSupplyFormatted": "822787846.552673",
            "links": {
                "telegram": "https://t.me/conanentry",
                "twitter": "https://x.com/conan_onsolana",
                "website": "https://getconanmemes.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/CQvadZTR8vikRqqwyhvYV8YpdfCRjUCGyQwCuY4rxBQt"
            },
            "description": null
        }
    },
    "convo": {
        "contract_address": "KnrmAHo1wW2fGqVXcSZSpo6kmiKam5vNbDByrURpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "KnrmAHo1wW2fGqVXcSZSpo6kmiKam5vNbDByrURpump",
            "standard": "metaplex",
            "name": "Convo.wtf",
            "symbol": "convo",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_KnrmAHo1wW2fGqVXcSZSpo6kmiKam5vNbDByrURpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVCy3AhgVjqQ1JwJP4xt5jrfzkWzTARVMPTia5qeX3Xwb",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "728767.36",
            "totalSupply": "999879763198762",
            "totalSupplyFormatted": "999879763.198762",
            "links": {
                "telegram": "https://t.me/Convo_Portal",
                "twitter": "https://twitter.com/convodotwtf",
                "website": "https://convo.wtf/",
                "moralis": "https://moralis.com/chain/solana/token/price/KnrmAHo1wW2fGqVXcSZSpo6kmiKam5vNbDByrURpump"
            },
            "description": null
        }
    },
    "costco-hot-dog": {
        "contract_address": "Av6qVigkb7USQyPXJkUvAEm4f599WTRvd75PUWBA9eNm",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Av6qVigkb7USQyPXJkUvAEm4f599WTRvd75PUWBA9eNm",
            "standard": "metaplex",
            "name": "Costco Hot Dog",
            "symbol": "COST",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Av6qVigkb7USQyPXJkUvAEm4f599WTRvd75PUWBA9eNm",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmaKaapu4ZN8zzVryaT8QktjXkEkpeBbx2spbh1morquoh",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "rbz9r1AcFJYAat1XkGWG4vxyqb5Q3qP8Y6pVHeXV6ra",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "661827.95",
            "totalSupply": "948986529055407707",
            "totalSupplyFormatted": "948986529.055407707",
            "links": {
                "discord": "https://discord.com/invite/9342TPNR",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+5Ha9wRikXFoyOGMx",
                "twitter": "https://twitter.com/costcodogsol",
                "website": "https://costcodogsol.xyz",
                "moralis": "https://moralis.com/chain/solana/token/price/Av6qVigkb7USQyPXJkUvAEm4f599WTRvd75PUWBA9eNm"
            },
            "description": null
        }
    },
    "crashout": {
        "contract_address": "6JGSHS9GrE9uG8ix63w3DPMYHrgrJ6J4QyHbBhAepump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6JGSHS9GrE9uG8ix63w3DPMYHrgrJ6J4QyHbBhAepump",
            "standard": "metaplex",
            "name": "Crashout",
            "symbol": "Crashout",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6JGSHS9GrE9uG8ix63w3DPMYHrgrJ6J4QyHbBhAepump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPoJc887H83uNGmg9rAty4FehqYxfVpEBhbH8xYD4zVKB",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3739792.91",
            "totalSupply": "999991685549214",
            "totalSupplyFormatted": "999991685.549214",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/6JGSHS9GrE9uG8ix63w3DPMYHrgrJ6J4QyHbBhAepump"
            },
            "description": null
        }
    },
    "crispr": {
        "contract_address": "AaV3hry7G3kLTAmM1dKwxDiqfGuPCtuSvvQCcozRpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AaV3hry7G3kLTAmM1dKwxDiqfGuPCtuSvvQCcozRpump",
            "standard": "metaplex",
            "name": "CRISPR",
            "symbol": "CRIS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AaV3hry7G3kLTAmM1dKwxDiqfGuPCtuSvvQCcozRpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRWX4J3AhYiZGsCSBb7TDuVc9UcxPRViEGP4mUbRpsyf9",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "18881.40",
            "totalSupply": "998963257997516",
            "totalSupplyFormatted": "998963257.997516",
            "links": {
                "telegram": "https://t.me/aquaticgenlab",
                "twitter": "https://twitter.com/AquaticGenLab",
                "website": "https://www.aquaticgenlab.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/AaV3hry7G3kLTAmM1dKwxDiqfGuPCtuSvvQCcozRpump"
            },
            "description": null
        }
    },
    "crosswalk": {
        "contract_address": "AZGFPtxBRbnZtXw4hgQF4BuSmWK3EhUg8omdUA9DEL3Y",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AZGFPtxBRbnZtXw4hgQF4BuSmWK3EhUg8omdUA9DEL3Y",
            "standard": "metaplex",
            "name": "Crosswalk",
            "symbol": "CSW",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AZGFPtxBRbnZtXw4hgQF4BuSmWK3EhUg8omdUA9DEL3Y",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWy9kCGQQSwhhL6FAfq4AZxvVjrVpbKwUz7k912NzMffq",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "nZjtTyN89Lox28FgurQnfcnv9RVkZ4EYcPte2TVqkhG",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "259213.59",
            "totalSupply": "887596196900739116",
            "totalSupplyFormatted": "8875961969.00739116",
            "links": {
                "email": "csw@crosswalk.pro",
                "telegram": "https://t.me/cswportal",
                "twitter": "https://x.com/crosswalkeco",
                "website": "https://www.crosswalk.pro/",
                "moralis": "https://moralis.com/chain/solana/token/price/AZGFPtxBRbnZtXw4hgQF4BuSmWK3EhUg8omdUA9DEL3Y"
            },
            "description": null
        }
    },
    "crown-by-third-time-games": {
        "contract_address": "GDfnEsia2WLAW5t8yx2X5j2mkfA74i5kwGdDuZHt7XmG",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GDfnEsia2WLAW5t8yx2X5j2mkfA74i5kwGdDuZHt7XmG",
            "standard": "metaplex",
            "name": "CROWN Token",
            "symbol": "CROWN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GDfnEsia2WLAW5t8yx2X5j2mkfA74i5kwGdDuZHt7XmG",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://shdw-drive.genesysgo.net/AwJ6W2rRaYCGXimceFuLm5td14fhN1VFEfSYg566RxMD/GDfnEsia2WLAW5t8yx2X5j2mkfA74i5kwGdDuZHt7XmG-540.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "crwnQamrVin5xNjhCmiv93U8GDgwpxB9GQbqmx8UWFQ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "30518587.15",
            "totalSupply": "249999851699663405",
            "totalSupplyFormatted": "249999851.699663405",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/GDfnEsia2WLAW5t8yx2X5j2mkfA74i5kwGdDuZHt7XmG"
            },
            "description": null
        }
    },
    "crowny-token": {
        "contract_address": "CRWNYkqdgvhGGae9CKfNka58j6QQkaD5bLhKXvUYqnc1",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CRWNYkqdgvhGGae9CKfNka58j6QQkaD5bLhKXvUYqnc1",
            "standard": "metaplex",
            "name": "Crowny token",
            "symbol": "CRWNY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CRWNYkqdgvhGGae9CKfNka58j6QQkaD5bLhKXvUYqnc1",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cdn.crowny.dev/xv2sKIl90kMBWc91MjI5",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8vtYu5rw9GWc92uUd5KpNFYwpa2L3GJJkUmwmKGJQxd5",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1457069.39",
            "totalSupply": "813096757476817",
            "totalSupplyFormatted": "813096757.476817",
            "links": {
                "discord": "https://discord.crowny.io",
                "medium": "https://crowny.medium.com",
                "telegram": "https://t.me/crownyio",
                "twitter": "https://twitter.com/crownyio",
                "website": "https://crowny.io/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/CRWNYkqdgvhGGae9CKfNka58j6QQkaD5bLhKXvUYqnc1"
            },
            "description": null
        }
    },
    "cryowar-token": {
        "contract_address": "HfYFjMKNZygfMC8LsQ8LtpPsPxEJoXJx4M6tqi75Hajo",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HfYFjMKNZygfMC8LsQ8LtpPsPxEJoXJx4M6tqi75Hajo",
            "standard": "metaplex",
            "name": "Cryowar Token",
            "symbol": "CWAR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HfYFjMKNZygfMC8LsQ8LtpPsPxEJoXJx4M6tqi75Hajo",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1857252.98",
            "totalSupply": "999996759743039789",
            "totalSupplyFormatted": "999996759.743039789",
            "links": {
                "medium": "https://medium.com/@cryowarsocials",
                "telegram": "https://t.me/cryowar",
                "twitter": "https://twitter.com/cryowardevs",
                "website": "https://cryowar.com/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/HfYFjMKNZygfMC8LsQ8LtpPsPxEJoXJx4M6tqi75Hajo"
            },
            "description": null
        }
    },
    "crypto-clubs-app-2": {
        "contract_address": "3wPXA775oUBz6mQmUtQiv85T59tnzvHJPfLKHjH5YpqB",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3wPXA775oUBz6mQmUtQiv85T59tnzvHJPfLKHjH5YpqB",
            "standard": "metaplex",
            "name": "Crypto Clubs App",
            "symbol": "CC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3wPXA775oUBz6mQmUtQiv85T59tnzvHJPfLKHjH5YpqB",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/bafkreicnigp22yjhgb5epmqqy6kf5bbno76lgtwc5iyipnxx3syoms2bnm",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "31Uuv6RxwsmL3aLhRM4hR8C8J3KxkJsuFREPMWa1AMZa",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5180.34",
            "totalSupply": "999293435213741888",
            "totalSupplyFormatted": "999293435.213741888",
            "links": {
                "email": "support@cryptoclubs.app",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/cryptoclubs_app",
                "twitter": "https://twitter.com/cryptoclubs_app",
                "website": "https://cryptoclubs.app/",
                "youtube": "https://www.youtube.com/@cryptoclubs_app",
                "moralis": "https://moralis.com/chain/solana/token/price/3wPXA775oUBz6mQmUtQiv85T59tnzvHJPfLKHjH5YpqB"
            },
            "description": null
        }
    },
    "crypto-twitter-2": {
        "contract_address": "6fUwECXzRQeh2wYuTg3xeQHGt4wSbiUbsdd1PYw3pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6fUwECXzRQeh2wYuTg3xeQHGt4wSbiUbsdd1PYw3pump",
            "standard": "metaplex",
            "name": "Crypto Twitter",
            "symbol": "CT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6fUwECXzRQeh2wYuTg3xeQHGt4wSbiUbsdd1PYw3pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcJ5g83TpH76hjnsaENpBBK2DuFdKWx338DiYoEBQ7fuh",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "294699.23",
            "totalSupply": "913328788629299",
            "totalSupplyFormatted": "913328788.629299",
            "links": {
                "email": "officialctcoinsol@gmail.com",
                "discord": "https://discord.gg/u5UGjex6",
                "reddit": "https://www.reddit.com/r/CryptoTwitterToken",
                "telegram": "https://t.me/+DbGlXcppZGUyMjdh",
                "twitter": "https://x.com/CTcoinOfficial",
                "website": "https://www.officialctcoinsol.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/6fUwECXzRQeh2wYuTg3xeQHGt4wSbiUbsdd1PYw3pump"
            },
            "description": null
        }
    },
    "cryptoboomcoin-official": {
        "contract_address": "BNeaFbk7DRjMr1UhGuchRGMKvk2Z5bU9W8sNpn7Wvr9Y",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BNeaFbk7DRjMr1UhGuchRGMKvk2Z5bU9W8sNpn7Wvr9Y",
            "standard": "metaplex",
            "name": "CryptoBoomCoin Official",
            "symbol": "CBC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BNeaFbk7DRjMr1UhGuchRGMKvk2Z5bU9W8sNpn7Wvr9Y",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQeLnsnPAecPDaCNCEAbvZBzC7zBebyDmAp61Jr7KJYGR",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7Mt483J99JaNmX4jWnVEjKM7yQ7qqf1nLbKg92XmTErh",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "693067.85",
            "totalSupply": "888776417953888810",
            "totalSupplyFormatted": "8887764179.5388881",
            "links": {
                "email": "info@cryptoboom.meme",
                "instagram": "https://www.instagram.com/cryptoboomcoinofficial/",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/cryptoboomcoinofficial",
                "twitter": "https://x.com/CryptoBoomcoin",
                "website": "https://www.cryptoboom.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/BNeaFbk7DRjMr1UhGuchRGMKvk2Z5bU9W8sNpn7Wvr9Y"
            },
            "description": null
        }
    },
    "cult-of-pepe": {
        "contract_address": "4J4W2tdq8gLLEdrq62HqCAbpPAci8SSQdSVvy6uLpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4J4W2tdq8gLLEdrq62HqCAbpPAci8SSQdSVvy6uLpump",
            "standard": "metaplex",
            "name": "Cult of Pepe",
            "symbol": "COPE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4J4W2tdq8gLLEdrq62HqCAbpPAci8SSQdSVvy6uLpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmdyyn5PzZQPKsm7o32CxtpE3F6yZH8CMZAuSv27hCaZkf",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "34391.23",
            "totalSupply": "999803108024026",
            "totalSupplyFormatted": "999803108.024026",
            "links": {
                "telegram": "https://t.me/cultofpepeonsol",
                "twitter": "https://x.com/cultpepesol",
                "website": "https://cultofpepe.com",
                "moralis": "https://moralis.com/chain/solana/token/price/4J4W2tdq8gLLEdrq62HqCAbpPAci8SSQdSVvy6uLpump"
            },
            "description": null
        }
    },
    "cyberdoge-3": {
        "contract_address": "FXJAdx38aXJdQd3ABAVu7fQ7Bjh9oMN92eTxszFNpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FXJAdx38aXJdQd3ABAVu7fQ7Bjh9oMN92eTxszFNpump",
            "standard": "metaplex",
            "name": "Cyberdoge",
            "symbol": "CDOGE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FXJAdx38aXJdQd3ABAVu7fQ7Bjh9oMN92eTxszFNpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmeVs17J8wUFQn3T4f2iTuAugGQm1xe3mJ1xdxuSep3fNi",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "407432.01",
            "totalSupply": "999914125693391",
            "totalSupplyFormatted": "999914125.693391",
            "links": {
                "email": "info@m.cyberdogecoin.com",
                "github": "https://github.com/Cyberdogecoin/CDOGE-Token/",
                "telegram": "https://t.me/CYBERDOGECOIN_CHANNEL",
                "twitter": "https://twitter.com/Cyber_Dogecoin",
                "website": "https://cyberdogecoin.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/FXJAdx38aXJdQd3ABAVu7fQ7Bjh9oMN92eTxszFNpump"
            },
            "description": null
        }
    },
    "cybertrader-ai": {
        "contract_address": "4xieJTWvYfWGTdZYjxZNePjqGu74NexmcjLUpfFLVAPx",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4xieJTWvYfWGTdZYjxZNePjqGu74NexmcjLUpfFLVAPx",
            "standard": "metaplex",
            "name": "Cybertrader AI",
            "symbol": "CYB",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4xieJTWvYfWGTdZYjxZNePjqGu74NexmcjLUpfFLVAPx",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUymnRaX2LUFkYs8mhuNbFudft3a4YZ1YNMkHmhpXRUiw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "676194.30",
            "totalSupply": "967473477365294",
            "totalSupplyFormatted": "967473477.365294",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4xieJTWvYfWGTdZYjxZNePjqGu74NexmcjLUpfFLVAPx"
            },
            "description": null
        }
    },
    "daddy-tate": {
        "contract_address": "4Cnk9EPnW5ixfLZatCPJjDB1PUtcRpVVgTQukm9epump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4Cnk9EPnW5ixfLZatCPJjDB1PUtcRpVVgTQukm9epump",
            "standard": "metaplex",
            "name": "DADDY TATE",
            "symbol": "DADDY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4Cnk9EPnW5ixfLZatCPJjDB1PUtcRpVVgTQukm9epump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmTY3L4rGs7Cu5aVsQSDaxcMMmwGk1AfeQRqi22vUBbUcE",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "32463867.28",
            "totalSupply": "599643021713857",
            "totalSupplyFormatted": "599643021.713857",
            "links": {
                "email": "hello@daddytate.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/daddytatecto",
                "twitter": "https://x.com/daddytatecto",
                "website": "https://www.daddysuniversity.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/4Cnk9EPnW5ixfLZatCPJjDB1PUtcRpVVgTQukm9epump"
            },
            "description": null
        }
    },
    "daige": {
        "contract_address": "HsNx7RirehVMy54xnFtcgCBPDMrwNnJKykageqdWpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HsNx7RirehVMy54xnFtcgCBPDMrwNnJKykageqdWpump",
            "standard": "metaplex",
            "name": "Daige",
            "symbol": "daige",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HsNx7RirehVMy54xnFtcgCBPDMrwNnJKykageqdWpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPgxGzGVtC5xYHkqWJtUioizHX7UwMyHd1VwkYats5YKZ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1497070.40",
            "totalSupply": "999992250233392",
            "totalSupplyFormatted": "999992250.233392",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/HsNx7RirehVMy54xnFtcgCBPDMrwNnJKykageqdWpump"
            },
            "description": null
        }
    },
    "dark-maga": {
        "contract_address": "7D7BRcBYepfi77vxySapmeqRNN1wsBBxnFPJGbH5pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7D7BRcBYepfi77vxySapmeqRNN1wsBBxnFPJGbH5pump",
            "standard": "metaplex",
            "name": "Dark MAGA",
            "symbol": "DMAGA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7D7BRcBYepfi77vxySapmeqRNN1wsBBxnFPJGbH5pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmVYQ4HjjYW2SmswB5n5qnEfRAUY4e6Cy1Vqf4o6yZCTLK",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1578465.53",
            "totalSupply": "999965493022606",
            "totalSupplyFormatted": "999965493.022606",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/DMAGACoin",
                "twitter": "https://twitter.com/DarkMagaCoin",
                "website": "https://dmaga.xyz",
                "moralis": "https://moralis.com/chain/solana/token/price/7D7BRcBYepfi77vxySapmeqRNN1wsBBxnFPJGbH5pump"
            },
            "description": null
        }
    },
    "dark-protocol": {
        "contract_address": "FmQ7v2QUqXVVtAXkngBh3Mwx7s3mKT55nQ5Z673dURYS",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FmQ7v2QUqXVVtAXkngBh3Mwx7s3mKT55nQ5Z673dURYS",
            "standard": "metaplex",
            "name": "Dark Protocol",
            "symbol": "DARK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FmQ7v2QUqXVVtAXkngBh3Mwx7s3mKT55nQ5Z673dURYS",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/EtLH9bBZdhhs9OFkntBPvQBW8r_TNBouOom4yJctcbI",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FDfhQ9t7Nq8U4Y2xXynmd9bQW8HMdgbVS5PggeuAaff3",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1105030.43",
            "totalSupply": "20990006358850479",
            "totalSupplyFormatted": "20990006.358850479",
            "links": {
                "discord": "https://discord.gg/5MyGYRanEz",
                "twitter": "https://twitter.com/PrivateLP",
                "website": "https://darkprotocol.org",
                "moralis": "https://moralis.com/chain/solana/token/price/FmQ7v2QUqXVVtAXkngBh3Mwx7s3mKT55nQ5Z673dURYS"
            },
            "description": null
        }
    },
    "dasha": {
        "contract_address": "FQ1tyso61AH1tzodyJfSwmzsD3GToybbRNoZxUBz21p8",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FQ1tyso61AH1tzodyJfSwmzsD3GToybbRNoZxUBz21p8",
            "standard": "metaplex",
            "name": "Dasha",
            "symbol": "vvaifu",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FQ1tyso61AH1tzodyJfSwmzsD3GToybbRNoZxUBz21p8",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXdYh3q99uFHs84St7FTDigRUqnxQXCoCuQiKhxtjxemX",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8622797.40",
            "totalSupply": "993315542024332",
            "totalSupplyFormatted": "993315542.024332",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/dasha_terminal",
                "twitter": "https://twitter.com/vvaifudotfun",
                "website": "https://vvaifu.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/FQ1tyso61AH1tzodyJfSwmzsD3GToybbRNoZxUBz21p8"
            },
            "description": null
        }
    },
    "daydreams": {
        "contract_address": "GMzuntWYJLpNuCizrSR7ZXggiMdDzTNiEmSNHHunpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GMzuntWYJLpNuCizrSR7ZXggiMdDzTNiEmSNHHunpump",
            "standard": "metaplex",
            "name": "Daydreams",
            "symbol": "dreams",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GMzuntWYJLpNuCizrSR7ZXggiMdDzTNiEmSNHHunpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSgJWjQvWp8hrGM92sH2WwJPQHWWTShmbs6eatcwUYptF",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "7163610.34",
            "totalSupply": "999772979096466",
            "totalSupplyFormatted": "999772979.096466",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/GMzuntWYJLpNuCizrSR7ZXggiMdDzTNiEmSNHHunpump"
            },
            "description": null
        }
    },
    "debridge": {
        "contract_address": "DBRiDgJAMsM95moTzJs7M9LnkGErpbv9v6CUR1DXnUu5",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DBRiDgJAMsM95moTzJs7M9LnkGErpbv9v6CUR1DXnUu5",
            "standard": "metaplex",
            "name": "deBridge",
            "symbol": "DBR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DBRiDgJAMsM95moTzJs7M9LnkGErpbv9v6CUR1DXnUu5",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cdn.debridge.foundation/dbr/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Dkx44pCUKq77vdityRTvUXsR6F7BNXib3EWM9JfreoBS",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "206059794.14",
            "totalSupply": "9999990009784773",
            "totalSupplyFormatted": "9999990009.784773",
            "links": {
                "discord": "https://discord.com/invite/debridge",
                "github": "https://github.com/debridge-finance",
                "reddit": "https://www.reddit.com",
                "website": "https://debridge.finance/",
                "moralis": "https://moralis.com/chain/solana/token/price/DBRiDgJAMsM95moTzJs7M9LnkGErpbv9v6CUR1DXnUu5"
            },
            "description": null
        }
    },
    "decimated": {
        "contract_address": "BiDB55p4G3n1fGhwKFpxsokBMqgctL4qnZpDH1bVQxMD",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BiDB55p4G3n1fGhwKFpxsokBMqgctL4qnZpDH1bVQxMD",
            "standard": "metaplex",
            "name": "Decimated",
            "symbol": "DIO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BiDB55p4G3n1fGhwKFpxsokBMqgctL4qnZpDH1bVQxMD",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4673347.82",
            "totalSupply": "999998891422691825",
            "totalSupplyFormatted": "999998891.422691825",
            "links": {
                "discord": "https://discord.gg/decimated",
                "github": "https://github.com/fracturelabsgames",
                "medium": "https://medium.com/@fracturelabs",
                "reddit": "https://www.reddit.com/r/decimated_game",
                "telegram": "https://t.me/decimatedofficial",
                "twitter": "https://twitter.com/decimated_game",
                "website": "https://www.decimated.net/",
                "moralis": "https://moralis.com/chain/solana/token/price/BiDB55p4G3n1fGhwKFpxsokBMqgctL4qnZpDH1bVQxMD"
            },
            "description": null
        }
    },
    "deep-ai": {
        "contract_address": "hTRDn7zE5tDHRnjj6Qms2WG1zEGv9ii6AiwfgbFpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "hTRDn7zE5tDHRnjj6Qms2WG1zEGv9ii6AiwfgbFpump",
            "standard": "metaplex",
            "name": "Deep AI",
            "symbol": "DEEP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_hTRDn7zE5tDHRnjj6Qms2WG1zEGv9ii6AiwfgbFpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmciSSYEVfCUW1oguwPR5B9oLS3vpoQRh6dLzrpTpKGfLT",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "517180.96",
            "totalSupply": "999242535910821",
            "totalSupplyFormatted": "999242535.910821",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/hTRDn7zE5tDHRnjj6Qms2WG1zEGv9ii6AiwfgbFpump"
            },
            "description": null
        }
    },
    "deer-seized-by-us-government": {
        "contract_address": "6pKHwNCpzgZuC9o5FzvCZkYSUGfQddhUYtMyDbEVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6pKHwNCpzgZuC9o5FzvCZkYSUGfQddhUYtMyDbEVpump",
            "standard": "metaplex",
            "name": "Deer Seized by US Government",
            "symbol": "Baby",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6pKHwNCpzgZuC9o5FzvCZkYSUGfQddhUYtMyDbEVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWqX5HK33CcDSxQiF4e8jVRoo2wKuQ8TBrReAsfYgbULJ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3404023.75",
            "totalSupply": "999972899655711",
            "totalSupplyFormatted": "999972899.655711",
            "links": {
                "telegram": "https://t.me/baby_on_sol",
                "twitter": "https://x.com/BabyTheDeer",
                "website": "https://pump.fun/coin/6pKHwNCpzgZuC9o5FzvCZkYSUGfQddhUYtMyDbEVpump",
                "moralis": "https://moralis.com/chain/solana/token/price/6pKHwNCpzgZuC9o5FzvCZkYSUGfQddhUYtMyDbEVpump"
            },
            "description": null
        }
    },
    "defi-land": {
        "contract_address": "DFL1zNkaGPWm1BqAVqRjCZvHmwTFrEaJtbzJWgseoNJh",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DFL1zNkaGPWm1BqAVqRjCZvHmwTFrEaJtbzJWgseoNJh",
            "standard": "metaplex",
            "name": "DeFi Land",
            "symbol": "DFL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DFL1zNkaGPWm1BqAVqRjCZvHmwTFrEaJtbzJWgseoNJh",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2280530.07",
            "totalSupply": "9594838783274328881",
            "totalSupplyFormatted": "9594838783.274328881",
            "links": {
                "discord": "https://discord.com/invite/defiland",
                "medium": "https://defiland.medium.com/",
                "telegram": "https://t.me/official_defiland",
                "twitter": "https://twitter.com/DeFi_Land",
                "website": "https://defiland.app/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/DFL1zNkaGPWm1BqAVqRjCZvHmwTFrEaJtbzJWgseoNJh"
            },
            "description": null
        }
    },
    "degen-spartan-ai": {
        "contract_address": "Gu3LDkn7Vx3bmCzLafYNKcDxv2mH7YN44NJZFXnypump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Gu3LDkn7Vx3bmCzLafYNKcDxv2mH7YN44NJZFXnypump",
            "standard": "metaplex",
            "name": "Degen Spartan AI",
            "symbol": "degenai",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Gu3LDkn7Vx3bmCzLafYNKcDxv2mH7YN44NJZFXnypump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUVnfi45bhDESXrHhc2BxhSLhZiRYcDBD72xGu6gN9Jmx",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4914548.41",
            "totalSupply": "999948200261133",
            "totalSupplyFormatted": "999948200.261133",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Gu3LDkn7Vx3bmCzLafYNKcDxv2mH7YN44NJZFXnypump"
            },
            "description": null
        }
    },
    "degenerative-sitcom": {
        "contract_address": "AK9yVoXKK1Cjww7HDyjYNyW5FujD3FJ2xbjMUStspump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AK9yVoXKK1Cjww7HDyjYNyW5FujD3FJ2xbjMUStspump",
            "standard": "metaplex",
            "name": "degenerative SITCOM",
            "symbol": "$SITCOM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AK9yVoXKK1Cjww7HDyjYNyW5FujD3FJ2xbjMUStspump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdjyKMz6CRhvmZC3tLWne3k1799aC1LG1HtLE8gg34798",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "317718.78",
            "totalSupply": "999895440080985",
            "totalSupplyFormatted": "999895440.080985",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "http://t.me/degenerative_sitcom",
                "twitter": "https://x.com/degen_sitcom",
                "website": "https://degenerative-sitcom.online/",
                "youtube": "https://www.youtube.com/@degenerativeSITCOM/playlists",
                "moralis": "https://moralis.com/chain/solana/token/price/AK9yVoXKK1Cjww7HDyjYNyW5FujD3FJ2xbjMUStspump"
            },
            "description": null
        }
    },
    "department-of-gains-coin": {
        "contract_address": "313t1ZZcLBEmw4uWRjSei1xCDEK4B73KqawJ5xfCpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "313t1ZZcLBEmw4uWRjSei1xCDEK4B73KqawJ5xfCpump",
            "standard": "metaplex",
            "name": "DEPARTMENT OF GAINS COIN",
            "symbol": "D.O.G.C",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_313t1ZZcLBEmw4uWRjSei1xCDEK4B73KqawJ5xfCpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSmpeZLVW9HXkMaoSkmEsjoWg8jQ6N7xJZ5T35dyDVkKd",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "942306.81",
            "totalSupply": "921555228959801",
            "totalSupplyFormatted": "921555228.959801",
            "links": {
                "email": "departmentofgainscoin@gmail.com",
                "instagram": "https://www.instagram.com/dogc_official/",
                "telegram": "https://t.me/OfficialDepartmentOfGainsCoin",
                "twitter": "https://x.com/dogc_official",
                "website": "https://dogccrypto.com",
                "moralis": "https://moralis.com/chain/solana/token/price/313t1ZZcLBEmw4uWRjSei1xCDEK4B73KqawJ5xfCpump"
            },
            "description": null
        }
    },
    "department-of-gov-efficiency": {
        "contract_address": "9TY6DUg1VSssYH5tFE95qoq5hnAGFak4w3cn72sJNCoV",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9TY6DUg1VSssYH5tFE95qoq5hnAGFak4w3cn72sJNCoV",
            "standard": "metaplex",
            "name": "Department of Gov Efficiency",
            "symbol": "DOGE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9TY6DUg1VSssYH5tFE95qoq5hnAGFak4w3cn72sJNCoV",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/oTCo-BHZtZ5X_w3xX8dxfFlE0ni6HaqyD5ktEqaUudY",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "H3nPUroBJcXNwN4PuvmSCkC4Mk1LWw2LtN4XUrLupZ4W",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1815033.00",
            "totalSupply": "9899114779972628",
            "totalSupplyFormatted": "9899114.779972628",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/9TY6DUg1VSssYH5tFE95qoq5hnAGFak4w3cn72sJNCoV"
            },
            "description": null
        }
    },
    "der-daku": {
        "contract_address": "HRiLLm6hYiSdniFGjvcSvQ7XJrA8YSoktcqFbWjmpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HRiLLm6hYiSdniFGjvcSvQ7XJrA8YSoktcqFbWjmpump",
            "standard": "metaplex",
            "name": "Daku ",
            "symbol": "Der Daku",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HRiLLm6hYiSdniFGjvcSvQ7XJrA8YSoktcqFbWjmpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRQd8GV5Qq7HL8sbv9aDinwwEucUxBqz9uKjqxuzqvxgq",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "16114717.74",
            "totalSupply": "998999726728331",
            "totalSupplyFormatted": "998999726.728331",
            "links": {
                "telegram": "https://t.me/dakucoinsol",
                "twitter": "https://twitter.com/dakucoin",
                "website": "https://pump.fun/coin/HRiLLm6hYiSdniFGjvcSvQ7XJrA8YSoktcqFbWjmpump",
                "moralis": "https://moralis.com/chain/solana/token/price/HRiLLm6hYiSdniFGjvcSvQ7XJrA8YSoktcqFbWjmpump"
            },
            "description": null
        }
    },
    "dev-ai": {
        "contract_address": "8MhHH7nBxmukybUx3xqovgLDTetVzj3sogBXPueTpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8MhHH7nBxmukybUx3xqovgLDTetVzj3sogBXPueTpump",
            "standard": "metaplex",
            "name": "DEV AI",
            "symbol": "DEVAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8MhHH7nBxmukybUx3xqovgLDTetVzj3sogBXPueTpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVLBJ47wwBehyKqpbbwgNiqkN5gQLZsqRDmisczpYQVbC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1017948.44",
            "totalSupply": "999988640170039",
            "totalSupplyFormatted": "999988640.170039",
            "links": {
                "telegram": "https://t.me/xdevai",
                "twitter": "https://twitter.com/0xdevai",
                "website": "https://devai.tech/",
                "moralis": "https://moralis.com/chain/solana/token/price/8MhHH7nBxmukybUx3xqovgLDTetVzj3sogBXPueTpump"
            },
            "description": null
        }
    },
    "devin-on-solana": {
        "contract_address": "7gbEP2TAy5wM3TmMp5utCrRvdJ3FFqYjgN5KDpXiWPmo",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7gbEP2TAy5wM3TmMp5utCrRvdJ3FFqYjgN5KDpXiWPmo",
            "standard": "metaplex",
            "name": "SCOTT WU",
            "symbol": "DEVIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7gbEP2TAy5wM3TmMp5utCrRvdJ3FFqYjgN5KDpXiWPmo",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmSAM1qiar7GtL9p9ohEFUvEXAqjkgwiV5WPyVZjxMvfC4",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "460967.15",
            "totalSupply": "999941760985064",
            "totalSupplyFormatted": "999941760.985064",
            "links": {
                "email": "devinonsolana@gmail.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/DEVINonSolana",
                "twitter": "https://x.com/DEVINSOLAI",
                "website": "https://www.devintoken.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/7gbEP2TAy5wM3TmMp5utCrRvdJ3FFqYjgN5KDpXiWPmo"
            },
            "description": null
        }
    },
    "dexlab-2": {
        "contract_address": "BGumBZULPAia6MoS9ZjQSMBFE3SsjWzN1eJCws4gdXzj",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BGumBZULPAia6MoS9ZjQSMBFE3SsjWzN1eJCws4gdXzj",
            "standard": "metaplex",
            "name": "Dexlab",
            "symbol": "DXL",
            "logo": null,
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/fGoBODzumIfVRXaPf5VGCoZXmMlbAkqo-3n87jT9LWI",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "41J2kDSAg5dkghRSqZZoNCb2SJtXsCch6B4poDHY9n6M",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": null,
            "totalSupply": "500000000000000",
            "totalSupplyFormatted": "500000000",
            "links": null,
            "description": null
        }
    },
    "diamond-the-cat-coin": {
        "contract_address": "BmKNgdoCFAhjEszjfhrPmt8Kdq3TdWbPtdQoSKUdogHz",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BmKNgdoCFAhjEszjfhrPmt8Kdq3TdWbPtdQoSKUdogHz",
            "standard": "metaplex",
            "name": "DIAMOND The Cat Coin",
            "symbol": "DMTC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BmKNgdoCFAhjEszjfhrPmt8Kdq3TdWbPtdQoSKUdogHz",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreihxvxpymnytopzu7jirugn5ccalmexk5utmo6z7bv34tqawx3un3i.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AbZSYBV2s7NrciNwAm2woU7aCzodvWEYPUzVtVEykLDN",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "12013.59",
            "totalSupply": "999882857271624914",
            "totalSupplyFormatted": "999882857.271624914",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+LHWJK_UP4l84NDMx",
                "twitter": "https://twitter.com/ThecatDiamond",
                "website": "https://www.dmtcsolana.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/BmKNgdoCFAhjEszjfhrPmt8Kdq3TdWbPtdQoSKUdogHz"
            },
            "description": null
        }
    },
    "dice": {
        "contract_address": "Dice3uJ6AY63bKRHk5Mn24qdNLhBZJFJbaeDsTQrzBPE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Dice3uJ6AY63bKRHk5Mn24qdNLhBZJFJbaeDsTQrzBPE",
            "standard": "metaplex",
            "name": "DICE",
            "symbol": "$DICE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Dice3uJ6AY63bKRHk5Mn24qdNLhBZJFJbaeDsTQrzBPE",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://megadice.mypinata.cloud/ipfs/QmeshaTSsG5utfos6g5a2ScDoaCihZ79hVTpND2X4aBq8P",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TeamQVx1hWnNN8AV6g5WeD2ub2M8zQZK7ZVkPtf37Wu",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1018918.98",
            "totalSupply": "419946262297279940",
            "totalSupplyFormatted": "419946262.29727994",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Dice3uJ6AY63bKRHk5Mn24qdNLhBZJFJbaeDsTQrzBPE"
            },
            "description": null
        }
    },
    "didi-duck": {
        "contract_address": "8E5pw1g1nQpmgVyeS1vZx8LokAZvuZgL6G1Uhr4iVbAB",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8E5pw1g1nQpmgVyeS1vZx8LokAZvuZgL6G1Uhr4iVbAB",
            "standard": "metaplex",
            "name": "Didi Duck",
            "symbol": "DIDID",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8E5pw1g1nQpmgVyeS1vZx8LokAZvuZgL6G1Uhr4iVbAB",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmaEU8ZgVbj5S9SdX22Gtkv8uYP8SXqBAgdCccW5hKdJFN",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "302508.63",
            "totalSupply": "947756243133282",
            "totalSupplyFormatted": "947756243.133282",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/diditheduck",
                "website": "https://didid.lol/",
                "moralis": "https://moralis.com/chain/solana/token/price/8E5pw1g1nQpmgVyeS1vZx8LokAZvuZgL6G1Uhr4iVbAB"
            },
            "description": null
        }
    },
    "dither": {
        "contract_address": "E1kvzJNxShvvWTrudokpzuc789vRiDXfXG3duCuY6ooE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "E1kvzJNxShvvWTrudokpzuc789vRiDXfXG3duCuY6ooE",
            "standard": "metaplex",
            "name": "Dither",
            "symbol": "DITH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_E1kvzJNxShvvWTrudokpzuc789vRiDXfXG3duCuY6ooE",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/RJTEbAihA11KWBkBI8W-Z4TWCKrlZfv_D1djO7Ytc9Q",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "EAgPq8jAgZJ4cXhtMRpsUvrY1YW7xQHULM7PAz7XLoRg",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1583316.15",
            "totalSupply": "99997312868826414",
            "totalSupplyFormatted": "99997312.868826414",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/3WSxnJRymf",
                "twitter": "https://twitter.com/Dither_Solana",
                "website": "https://dith.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/E1kvzJNxShvvWTrudokpzuc789vRiDXfXG3duCuY6ooE"
            },
            "description": null
        }
    },
    "divvy-bet": {
        "contract_address": "DVYcTNFVGxePLgK8rUjViJvurRmTnD1FZUBR7puADymT",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DVYcTNFVGxePLgK8rUjViJvurRmTnD1FZUBR7puADymT",
            "standard": "metaplex",
            "name": "Divvy.bet",
            "symbol": "DVY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DVYcTNFVGxePLgK8rUjViJvurRmTnD1FZUBR7puADymT",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/53E2KhAmw4m3bSkgWNuSDRpLyF3KeuQUL2q9Jbr4cAq8",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "4jjrh3MJvy8g6L3Kixv4XVdMjixyGMsrMhHsEc3mxHRh",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2305464.23",
            "totalSupply": "999984486506318285",
            "totalSupplyFormatted": "999984486.506318285",
            "links": {
                "discord": "https://discord.gg/divvybet",
                "github": "https://github.com/DivvyBet",
                "twitter": "https://twitter.com/DivvyBet",
                "website": "https://app.divvy.bet",
                "moralis": "https://moralis.com/chain/solana/token/price/DVYcTNFVGxePLgK8rUjViJvurRmTnD1FZUBR7puADymT"
            },
            "description": null
        }
    },
    "dna": {
        "contract_address": "DiSetnR7k57wmfvywJhUVjPwWfg54SdQKxQdJEBYW23B",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DiSetnR7k57wmfvywJhUVjPwWfg54SdQKxQdJEBYW23B",
            "standard": "metaplex",
            "name": "DNA",
            "symbol": "DNA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DiSetnR7k57wmfvywJhUVjPwWfg54SdQKxQdJEBYW23B",
            "decimals": "2",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/DFt5_oQYm2f1-rk3NEYeZWTLmJtyRwzfyNc1VRViov8",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CDBLDBNkTk2qrFzeKLmeishnuBngc8tqqoCTMZzeYvVK",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "827540.22",
            "totalSupply": "4200711787377950645",
            "totalSupplyFormatted": "42007117873779506.45",
            "links": {
                "email": "DNA-CTO@outlook.com",
                "github": "https://github.com/DNACTO",
                "telegram": "https://t.me/DNACTODNA",
                "twitter": "https://x.com/DNACTO_DNA",
                "website": "https://dnacto.club/",
                "moralis": "https://moralis.com/chain/solana/token/price/DiSetnR7k57wmfvywJhUVjPwWfg54SdQKxQdJEBYW23B"
            },
            "description": null
        }
    },
    "dnd10-m1a0shan": {
        "contract_address": "34EBTRNxjqZo3CgpQD3aaW3CC69DkP6BQUEx1Dd2pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "34EBTRNxjqZo3CgpQD3aaW3CC69DkP6BQUEx1Dd2pump",
            "standard": "metaplex",
            "name": "doNONdo-M1a0Shan",
            "symbol": "dNd10",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_34EBTRNxjqZo3CgpQD3aaW3CC69DkP6BQUEx1Dd2pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmeW6E7KiJx9TJV6L9pJfvwAtW3sY8KJz818hETYHF4G5M",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "463669.04",
            "totalSupply": "999834053640272",
            "totalSupplyFormatted": "999834053.640272",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/dnd10m1a0shan",
                "twitter": "https://twitter.com/m1a0shan",
                "website": "https://donondo.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/34EBTRNxjqZo3CgpQD3aaW3CC69DkP6BQUEx1Dd2pump"
            },
            "description": null
        }
    },
    "dog-emoji-on-solana": {
        "contract_address": "DLScRnWofxiYGqnvZWGy9Gt98MPqKdznaK4TRukxpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DLScRnWofxiYGqnvZWGy9Gt98MPqKdznaK4TRukxpump",
            "standard": "metaplex",
            "name": "Dog",
            "symbol": "\ud83d\udc15",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DLScRnWofxiYGqnvZWGy9Gt98MPqKdznaK4TRukxpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdPuYTi47nDt2vfTmexihZN84LpL6qtQyZwXYaQuTksuL",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "340478.06",
            "totalSupply": "999976694526203",
            "totalSupplyFormatted": "999976694.526203",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/DogEmojiOnSol",
                "website": "https://dogemojicoin.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/DLScRnWofxiYGqnvZWGy9Gt98MPqKdznaK4TRukxpump"
            },
            "description": null
        }
    },
    "dog-picasso": {
        "contract_address": "7ZRgHFqwdzvqhfmg19rSQBD6CZe5iEDkuZoaNUhpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7ZRgHFqwdzvqhfmg19rSQBD6CZe5iEDkuZoaNUhpump",
            "standard": "metaplex",
            "name": "Dog Picasso",
            "symbol": "Monkey",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7ZRgHFqwdzvqhfmg19rSQBD6CZe5iEDkuZoaNUhpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmU8TTZnzx2xsjvupbsMaAA9EFjG6QWz4PGAXzowcBYQo1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "228546.87",
            "totalSupply": "999636421217342",
            "totalSupplyFormatted": "999636421.217342",
            "links": {
                "telegram": "https://t.me/monkeyportal1",
                "twitter": "https://x.com/monkeygoodboy",
                "website": "https://monkey-coin.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/7ZRgHFqwdzvqhfmg19rSQBD6CZe5iEDkuZoaNUhpump"
            },
            "description": null
        }
    },
    "dog-shit-going-nowhere": {
        "contract_address": "BXebtR4k2WiaZ1HJmxcZkoCdxSBx1g1xnEpVra9Ppump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BXebtR4k2WiaZ1HJmxcZkoCdxSBx1g1xnEpVra9Ppump",
            "standard": "metaplex",
            "name": "Dog Shit Going NoWhere",
            "symbol": "DOGSHIT2 ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BXebtR4k2WiaZ1HJmxcZkoCdxSBx1g1xnEpVra9Ppump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUx78eh14T9PSFjYoHaEeWENqUFLssWrrJ5oQBxu1ycu1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "592214.37",
            "totalSupply": "999796353945245",
            "totalSupplyFormatted": "999796353.945245",
            "links": {
                "telegram": "https://t.me/Dogshit2_CTO",
                "twitter": "https://x.com/Dogshit2_CTO",
                "website": "https://www.savepumpfun.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/BXebtR4k2WiaZ1HJmxcZkoCdxSBx1g1xnEpVra9Ppump"
            },
            "description": null
        }
    },
    "dog-with-apple-in-mouth": {
        "contract_address": "H33XL6HHDReCVRgSApZpsXM7Hy7JGyLztRJaGxjapump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "H33XL6HHDReCVRgSApZpsXM7Hy7JGyLztRJaGxjapump",
            "standard": "metaplex",
            "name": "dog with apple in mouth",
            "symbol": "APPLE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_H33XL6HHDReCVRgSApZpsXM7Hy7JGyLztRJaGxjapump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUrPsXfCE1yKXSEiykUvDPsMqwSnt7QiZtd1eeuFJwbQM",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "968414.82",
            "totalSupply": "999752053029306",
            "totalSupplyFormatted": "999752053.029306",
            "links": {
                "email": "appledogbiz@gmail.com",
                "telegram": "https://t.me/AppleDogPortal",
                "twitter": "https://x.com/Apple_Dog_Sol",
                "website": "https://appledogsolana.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/H33XL6HHDReCVRgSApZpsXM7Hy7JGyLztRJaGxjapump"
            },
            "description": null
        }
    },
    "doge": {
        "contract_address": "SsKFgDPEqyzAM8nWPiiX7MGY7iNDTEX6DxRdxmkpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "SsKFgDPEqyzAM8nWPiiX7MGY7iNDTEX6DxRdxmkpump",
            "standard": "metaplex",
            "name": "@DOGE",
            "symbol": "@DOGE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_SsKFgDPEqyzAM8nWPiiX7MGY7iNDTEX6DxRdxmkpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcK3PQPjoQbyF1dUc86xadkDZNdKaXoeuLuHJQgS5WxzF",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "253138.28",
            "totalSupply": "999819419930301",
            "totalSupplyFormatted": "999819419.930301",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/atdogesol",
                "twitter": "https://x.com/doge",
                "website": "https://www.atdoge.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/SsKFgDPEqyzAM8nWPiiX7MGY7iNDTEX6DxRdxmkpump"
            },
            "description": null
        }
    },
    "doge-jones-industrial-average": {
        "contract_address": "BjotV424H4UBvrAiGFGjQGztLxoafxM4HSdCXZR6pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BjotV424H4UBvrAiGFGjQGztLxoafxM4HSdCXZR6pump",
            "standard": "metaplex",
            "name": "Doge Jones Industrial Average",
            "symbol": "DJI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BjotV424H4UBvrAiGFGjQGztLxoafxM4HSdCXZR6pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmaVzxet4fMqJWSDJDyck7BPP9ZxXLUyor3p3bDKZshVr5",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "596163.76",
            "totalSupply": "999979464894366",
            "totalSupplyFormatted": "999979464.894366",
            "links": {
                "telegram": "https://t.me/DogeJonesDJIOfficial",
                "twitter": "https://x.com/DogeJonesDJI",
                "website": "https://dogejonesindustrial.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/BjotV424H4UBvrAiGFGjQGztLxoafxM4HSdCXZR6pump"
            },
            "description": null
        }
    },
    "doge-mascot-shibu": {
        "contract_address": "yG6bXPEFaUnGAEHHqH9H7t1VSfaK7YrggCqHy35pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "yG6bXPEFaUnGAEHHqH9H7t1VSfaK7YrggCqHy35pump",
            "standard": "metaplex",
            "name": "DOGE MASCOT",
            "symbol": "SHIBU",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_yG6bXPEFaUnGAEHHqH9H7t1VSfaK7YrggCqHy35pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRvKg2mrLQSxMC5AZC5mFqSG1VheF4T7wg469ZrxHKn8B",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "329500.47",
            "totalSupply": "999858815260580",
            "totalSupplyFormatted": "999858815.26058",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/yG6bXPEFaUnGAEHHqH9H7t1VSfaK7YrggCqHy35pump"
            },
            "description": null
        }
    },
    "dogeai-2": {
        "contract_address": "9UYAYvVS2cZ3BndbsoG1ScJbjfwyEPGxjE79hh5ipump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9UYAYvVS2cZ3BndbsoG1ScJbjfwyEPGxjE79hh5ipump",
            "standard": "metaplex",
            "name": "DOGE AI",
            "symbol": "DOGEAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9UYAYvVS2cZ3BndbsoG1ScJbjfwyEPGxjE79hh5ipump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWQ1664cbjgyryopdNGAJppnQtaUGsf6ezsEJUD43D3iX",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "43044871.46",
            "totalSupply": "999982610588567",
            "totalSupplyFormatted": "999982610.588567",
            "links": {
                "github": "https://github.com/saihaj/doge-ai",
                "telegram": "https://t.me/DogeAiPortalCTO",
                "twitter": "https://x.com/dogeai_gov",
                "website": "https://dogeai.info/",
                "moralis": "https://moralis.com/chain/solana/token/price/9UYAYvVS2cZ3BndbsoG1ScJbjfwyEPGxjE79hh5ipump"
            },
            "description": null
        }
    },
    "dogecast-2": {
        "contract_address": "ChHAfQsUznqUpvFSNQsu42KsRr1t3ct56fBigVSHpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ChHAfQsUznqUpvFSNQsu42KsRr1t3ct56fBigVSHpump",
            "standard": "metaplex",
            "name": "Dogecast",
            "symbol": "DOGECAST",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ChHAfQsUznqUpvFSNQsu42KsRr1t3ct56fBigVSHpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmaJ4UHgFbdPGq1tk6nJtnMthb18jezyVVUANQ9dmFANh1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "322915.66",
            "totalSupply": "999955603591855",
            "totalSupplyFormatted": "999955603.591855",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/ChHAfQsUznqUpvFSNQsu42KsRr1t3ct56fBigVSHpump"
            },
            "description": null
        }
    },
    "dogefather-2": {
        "contract_address": "EcYK2XNG4wWr2vDg2M2Hrts6SrU2QB4NzXLBf888pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EcYK2XNG4wWr2vDg2M2Hrts6SrU2QB4NzXLBf888pump",
            "standard": "metaplex",
            "name": "Dogefather",
            "symbol": "DOGEFATHER",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EcYK2XNG4wWr2vDg2M2Hrts6SrU2QB4NzXLBf888pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSvsLDcxKzUQTP4eEbbPMypYr3MeX6Mf3PYaNiAhzJQoW",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "743802.12",
            "totalSupply": "999953109934815",
            "totalSupplyFormatted": "999953109.934815",
            "links": {
                "email": "info@getdogefathermemes.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/thedogefathercto",
                "twitter": "https://x.com/dogefathermemes",
                "website": "https://www.getdogefathermemes.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/EcYK2XNG4wWr2vDg2M2Hrts6SrU2QB4NzXLBf888pump"
            },
            "description": null
        }
    },
    "doggy-needs-friend": {
        "contract_address": "CaCG4QQ1P1PifqctriL5iKXea5aQZtrCcdFqYuLxgK74",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CaCG4QQ1P1PifqctriL5iKXea5aQZtrCcdFqYuLxgK74",
            "standard": "metaplex",
            "name": "Doggy Needs Friend",
            "symbol": "DOGGY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CaCG4QQ1P1PifqctriL5iKXea5aQZtrCcdFqYuLxgK74",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmPHcs6AhnUGx1Qa8hvkNk7PLBFs44fQFEauVkxdin9WLy",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FJz5yTHXHdddxtMBupUpu2DRxDLzXr2EgK3Fsp2dnnpe",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5190.35",
            "totalSupply": "999873907406702404",
            "totalSupplyFormatted": "999873907.406702404",
            "links": {
                "telegram": "https://t.me/doggyneedsportal",
                "twitter": "https://x.com/DoggyNeedsSol",
                "website": "https://doggyneedsfriend.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/CaCG4QQ1P1PifqctriL5iKXea5aQZtrCcdFqYuLxgK74"
            },
            "description": null
        }
    },
    "doginthpool": {
        "contract_address": "3XxvmED354933DwSPJuzB7SE9uiWpD1ErydDuhmbFRMk",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3XxvmED354933DwSPJuzB7SE9uiWpD1ErydDuhmbFRMk",
            "standard": "metaplex",
            "name": "doginthpool",
            "symbol": "DIP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3XxvmED354933DwSPJuzB7SE9uiWpD1ErydDuhmbFRMk",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreidovk2jnqonrg64eqoaomyjm6e3ineuvh7fksdwmi5pqofbcngsfq.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5eGLxhVrfQuVM32LTG46UwwnEGN9HN2VW6z3e2tchJ7F",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "394526.40",
            "totalSupply": "961999078385004",
            "totalSupplyFormatted": "961999078.385004",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/doginthpool",
                "twitter": "https://twitter.com/doginthpool",
                "website": "https://www.doginthpool.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/3XxvmED354933DwSPJuzB7SE9uiWpD1ErydDuhmbFRMk"
            },
            "description": null
        }
    },
    "dogwifcoin": {
        "contract_address": "EKpQGSJtjMFqKZ9KQanSqYXRcF8fBopzLHYxdM65zcjm",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EKpQGSJtjMFqKZ9KQanSqYXRcF8fBopzLHYxdM65zcjm",
            "standard": "metaplex",
            "name": "dogwifhat",
            "symbol": "$WIF",
            "logo": "https://adds-token-info-29a861f.s3.eu-central-1.amazonaws.com/marketing/solana/EKpQGSJtjMFqKZ9KQanSqYXRcF8fBopzLHYxdM65zcjm_icon.png",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreihwqhounu3cdwgvk2gc2dqcinpntlccbo3xcy4xuerd24yndldl5q.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "wifq4CRwpXCK8NYtKNsQAYoDethT1aR7R1DaKCLFgAd",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "609380687.83",
            "totalSupply": "998841072956701",
            "totalSupplyFormatted": "998841072.956701",
            "links": {
                "website": "https://dogwifcoin.org/",
                "twitter": "https://x.com/dogwifcoin",
                "telegram": "https://t.me/dogwifcoin",
                "moralis": "https://moralis.com/chain/solana/token/price/EKpQGSJtjMFqKZ9KQanSqYXRcF8fBopzLHYxdM65zcjm"
            },
            "description": "WIF isn't literally just a dog wif a hat; it's a symbol of progress, for futuristic transactions, a beacon for those who think ahead. It's clear that the future belongs to those who embrace innovations like WIF, transcending boundaries & paving a new era in finance and technology."
        }
    },
    "dojo-protocol": {
        "contract_address": "3vmfEaTR9M2Pp5JcFNC8c8u6U4eFUBdq6FQjgPpcnfKS",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3vmfEaTR9M2Pp5JcFNC8c8u6U4eFUBdq6FQjgPpcnfKS",
            "standard": "metaplex",
            "name": "DOJO Protocol",
            "symbol": "DOAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3vmfEaTR9M2Pp5JcFNC8c8u6U4eFUBdq6FQjgPpcnfKS",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcYxgkVDMSHriAptXZh1bYkWwBmbVPK99v3MxfdXAxiJd",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BBuVUgUs685T6cbhLkPSY4VUSVPHgJmGPEugpyEqD9LB",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1593961.23",
            "totalSupply": "999997637631472289",
            "totalSupplyFormatted": "999997637.631472289",
            "links": {
                "telegram": "https://t.me/dojoprotocol",
                "twitter": "https://twitter.com/DOJOGPU",
                "website": "https://dojoprotocol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/3vmfEaTR9M2Pp5JcFNC8c8u6U4eFUBdq6FQjgPpcnfKS"
            },
            "description": null
        }
    },
    "dolan-duck": {
        "contract_address": "4YK1njyeCkBuXG6phNtidJWKCbBhB659iwGkUJx98P5Z",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4YK1njyeCkBuXG6phNtidJWKCbBhB659iwGkUJx98P5Z",
            "standard": "metaplex",
            "name": "Dolan Duck",
            "symbol": "DOLAN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4YK1njyeCkBuXG6phNtidJWKCbBhB659iwGkUJx98P5Z",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/bwI-DnskHKap0Rv3I3PLe4ocspBETGnDVHNCz0e2Gt8",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "4qyEuxi5esm1Y2KiqFc3NiYK7GcCehLVPQ714487Eyvs",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4682415.70",
            "totalSupply": "98230241972131",
            "totalSupplyFormatted": "98230241.972131",
            "links": {
                "email": "dolaninfo@proton.me",
                "telegram": "https://t.me/+YuXzdVsgI3FjYTE5",
                "twitter": "https://twitter.com/DolanDuckSol69",
                "website": "https://dolanduck.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/4YK1njyeCkBuXG6phNtidJWKCbBhB659iwGkUJx98P5Z"
            },
            "description": null
        }
    },
    "dollarmoon-2": {
        "contract_address": "9fWeqjzb7xG93T9FPaWggTecvyZZDTXc7VgzNWkisqm4",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9fWeqjzb7xG93T9FPaWggTecvyZZDTXc7VgzNWkisqm4",
            "standard": "metaplex",
            "name": "DollarMoon",
            "symbol": "DMOON",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9fWeqjzb7xG93T9FPaWggTecvyZZDTXc7VgzNWkisqm4",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmeMJNddz7HBWVaVM47ppC2Kmhgmo1WvtVo5Rm66WnRdxB",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "43A3n5XBesTEz59EZB4aZoGVW5jSMcteZdc1DQibpCh8",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "469030.05",
            "totalSupply": "85925318491683",
            "totalSupplyFormatted": "85925318.491683",
            "links": {
                "email": "dmoonmarketing@gmail.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/dmoontoken",
                "twitter": "https://twitter.com/dollarmoonio/",
                "website": "https://dollarmoon.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/9fWeqjzb7xG93T9FPaWggTecvyZZDTXc7VgzNWkisqm4"
            },
            "description": null
        }
    },
    "dolos-the-bully": {
        "contract_address": "79yTpy8uwmAkrdgZdq6ZSBTvxKsgPrNqTLvYQBh1pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "79yTpy8uwmAkrdgZdq6ZSBTvxKsgPrNqTLvYQBh1pump",
            "standard": "metaplex",
            "name": "Dolos The Bully",
            "symbol": "BULLY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_79yTpy8uwmAkrdgZdq6ZSBTvxKsgPrNqTLvYQBh1pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTEgmfgZcEP1Z5f2Qvmvaf1cqsrcp2EQDvFgBtfELv387",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2196562.24",
            "totalSupply": "960539724937319",
            "totalSupplyFormatted": "960539724.937319",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/79yTpy8uwmAkrdgZdq6ZSBTvxKsgPrNqTLvYQBh1pump"
            },
            "description": null
        }
    },
    "donald-tremp": {
        "contract_address": "FU1q8vJpZNUrmqsciSjp8bAKKidGsLmouB8CBdf8TKQv",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FU1q8vJpZNUrmqsciSjp8bAKKidGsLmouB8CBdf8TKQv",
            "standard": "metaplex",
            "name": "doland tremp",
            "symbol": "tremp",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FU1q8vJpZNUrmqsciSjp8bAKKidGsLmouB8CBdf8TKQv",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreihxdclwfhxk3bb3vk3wrqimt5mxpfxqhu2waosow3yf2qz4hjute4.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "64mjvC3UbsfofBQAHb3SwYh91X5EiDEfmtzEcJ1NauQq",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3688652.15",
            "totalSupply": "99958694501805425",
            "totalSupplyFormatted": "99958694.501805425",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/trempcommunitytakeover",
                "twitter": "https://twitter.com/dolandtremp_sol",
                "website": "https://tremp.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/FU1q8vJpZNUrmqsciSjp8bAKKidGsLmouB8CBdf8TKQv"
            },
            "description": null
        }
    },
    "doom": {
        "contract_address": "8Fvp3K1KxbDALnyVdy8Pvy8Xw96XVWjpauXLi7pXmygj",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8Fvp3K1KxbDALnyVdy8Pvy8Xw96XVWjpauXLi7pXmygj",
            "standard": "metaplex",
            "name": "DOOM",
            "symbol": "DOOM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8Fvp3K1KxbDALnyVdy8Pvy8Xw96XVWjpauXLi7pXmygj",
            "decimals": "3",
            "metaplex": {
                "metadataUri": "https://cdn.pinksale.finance/file/pinksale-metadata/tokens/1733393284810-910863e486d27dcc234a3fd77762af2f.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7Nef4v4erqecqg7hvA1htq5ssW77yozG85SpgxeFY7Q8",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1901915.41",
            "totalSupply": "3141584754093888879",
            "totalSupplyFormatted": "3141584754093888.879",
            "links": {
                "telegram": "https://t.me/doomislive",
                "twitter": "https://twitter.com/doomislive",
                "website": "http://Doom.live",
                "moralis": "https://moralis.com/chain/solana/token/price/8Fvp3K1KxbDALnyVdy8Pvy8Xw96XVWjpauXLi7pXmygj"
            },
            "description": null
        }
    },
    "dotcom": {
        "contract_address": "8YiB8B43EwDeSx5Jp91VQjgBU4mfCgVvyNahadtzpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8YiB8B43EwDeSx5Jp91VQjgBU4mfCgVvyNahadtzpump",
            "standard": "metaplex",
            "name": "Dotcom",
            "symbol": "Y2K",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8YiB8B43EwDeSx5Jp91VQjgBU4mfCgVvyNahadtzpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmX7TzR7q7yLTzqxxWmC5MgWrHRTV4oprF1Ks6KKAvww76",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4920298.88",
            "totalSupply": "999621889604309",
            "totalSupplyFormatted": "999621889.604309",
            "links": {
                "telegram": "https://t.me/Y2Kport",
                "twitter": "https://twitter.com/y2kdotcomsolana",
                "website": "https://y2kdotcom.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/8YiB8B43EwDeSx5Jp91VQjgBU4mfCgVvyNahadtzpump"
            },
            "description": null
        }
    },
    "dox-squad": {
        "contract_address": "8wa9yRNKp57Fy4RViUgBV21oR7SsgmrAkN576ThJzY2F",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8wa9yRNKp57Fy4RViUgBV21oR7SsgmrAkN576ThJzY2F",
            "standard": "metaplex",
            "name": "Dox Squad",
            "symbol": "DOX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8wa9yRNKp57Fy4RViUgBV21oR7SsgmrAkN576ThJzY2F",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmReJqHHwdaQtZWVHX4WvSg2qTtXoWZZu4zVARUhgUEyAJ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "63Bs45zo9WQ4g414itJDxZZJur2RXRmGEXWMCNGsLiqo",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5938.12",
            "totalSupply": "89456413141638",
            "totalSupplyFormatted": "894564131.41638",
            "links": {
                "telegram": "https://t.me/doxsquaddox",
                "tiktok": "https://www.tiktok.com/@doxsquadsol?_t=8pV5wshdmiE&_r=1",
                "twitter": "https://x.com/doxsquadsol",
                "website": "https://doxsquad.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/8wa9yRNKp57Fy4RViUgBV21oR7SsgmrAkN576ThJzY2F"
            },
            "description": null
        }
    },
    "drake-s-dog": {
        "contract_address": "GoCr92MAhiE1kxXyGx7yPdS9qmVxhcJaKN7aNZumgcz6",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GoCr92MAhiE1kxXyGx7yPdS9qmVxhcJaKN7aNZumgcz6",
            "standard": "metaplex",
            "name": "Drake's Dog",
            "symbol": "DIAMOND",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GoCr92MAhiE1kxXyGx7yPdS9qmVxhcJaKN7aNZumgcz6",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreidvijwjxm5mc3ww7qy2smbzzppgt47zs5i3tvnnzuzoorxv6jgnna.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AXcS2WdqGbtT6csvNqwayYBoZqR6b7R1Q4aZU2hhZE6t",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "17673.88",
            "totalSupply": "999314631303467",
            "totalSupplyFormatted": "999314631.303467",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/drakesdogSol",
                "twitter": "https://twitter.com/drakesDogSol",
                "website": "https://champagnediamond.site",
                "moralis": "https://moralis.com/chain/solana/token/price/GoCr92MAhiE1kxXyGx7yPdS9qmVxhcJaKN7aNZumgcz6"
            },
            "description": null
        }
    },
    "drift-protocol": {
        "contract_address": "DriFtupJYLTosbwoN8koMbEYSx54aFAVLddWsbksjwg7",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DriFtupJYLTosbwoN8koMbEYSx54aFAVLddWsbksjwg7",
            "standard": "metaplex",
            "name": "Drift",
            "symbol": "DRIFT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DriFtupJYLTosbwoN8koMbEYSx54aFAVLddWsbksjwg7",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://metadata.drift.foundation/drift.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "2xN6e9Z7qT6KPAWSMNKt2WPDbeCcSDADdXqUXsh3UVfK",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "658483913.13",
            "totalSupply": "999999868073903",
            "totalSupplyFormatted": "999999868.073903",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/DriFtupJYLTosbwoN8koMbEYSx54aFAVLddWsbksjwg7"
            },
            "description": null
        }
    },
    "drpepe-ai": {
        "contract_address": "BrYANThKaAbjZZH5XWLrw26NzMbfUNmBwbZiMe4Fj5Mk",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BrYANThKaAbjZZH5XWLrw26NzMbfUNmBwbZiMe4Fj5Mk",
            "standard": "metaplex",
            "name": "DrPepe.ai",
            "symbol": "BRYAN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BrYANThKaAbjZZH5XWLrw26NzMbfUNmBwbZiMe4Fj5Mk",
            "decimals": "1",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/bafkreiaqgogokmu4d5aeivxvjqqswgthdt3obmak5w2idgslubfawsan5u",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CjovQfu22KaJCgeqSRngKzcNvaLYpkDxKzh3BLPBmAHo",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3801151.48",
            "totalSupply": "8888879364091266",
            "totalSupplyFormatted": "888887936409126.6",
            "links": {
                "email": "drpepu@proton.me",
                "telegram": "https://t.me/drpepeaiofficial",
                "twitter": "https://x.com/drpepeai",
                "website": "https://drpepe.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/BrYANThKaAbjZZH5XWLrw26NzMbfUNmBwbZiMe4Fj5Mk"
            },
            "description": null
        }
    },
    "duck-ai": {
        "contract_address": "HFw81sUUPBkNF5tKDanV8VCYTfVY4XbrEEPiwzyypump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HFw81sUUPBkNF5tKDanV8VCYTfVY4XbrEEPiwzyypump",
            "standard": "metaplex",
            "name": "Duck AI",
            "symbol": "DUCKAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HFw81sUUPBkNF5tKDanV8VCYTfVY4XbrEEPiwzyypump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbE5RePbwpdBxmeZUdLoQEqX24vKkupNDtBt1JmvAQyiu",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "778450.61",
            "totalSupply": "999928848481637",
            "totalSupplyFormatted": "999928848.481637",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/DuckUnfiltered",
                "twitter": "https://twitter.com/duckunfiltered",
                "website": "https://duckai.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/HFw81sUUPBkNF5tKDanV8VCYTfVY4XbrEEPiwzyypump"
            },
            "description": null
        }
    },
    "duko": {
        "contract_address": "HLptm5e6rTgh4EKgDpYFrnRHbjpkMyVdEeREEa2G7rf9",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HLptm5e6rTgh4EKgDpYFrnRHbjpkMyVdEeREEa2G7rf9",
            "standard": "metaplex",
            "name": "Duko",
            "symbol": "DUKO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HLptm5e6rTgh4EKgDpYFrnRHbjpkMyVdEeREEa2G7rf9",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreihuvslqoeccy3r6aht3wuxyjq57o7gk5wi7glz3yypibyfpiexmh4.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "31uKz8EP1aPjkB3Wbh7JvmWAVpAdudoJBhyWXUmSi5uU",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4517867.38",
            "totalSupply": "9999197438774667",
            "totalSupplyFormatted": "9999197438.774667",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/dukocoin",
                "twitter": "https://x.com/dukocoin",
                "website": "https://dukocoin.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/HLptm5e6rTgh4EKgDpYFrnRHbjpkMyVdEeREEa2G7rf9"
            },
            "description": null
        }
    },
    "edgevana-staked-sol": {
        "contract_address": "edge86g9cVz87xcpKpy3J77vbp4wYd9idEV562CCntt",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "edge86g9cVz87xcpKpy3J77vbp4wYd9idEV562CCntt",
            "standard": "metaplex",
            "name": "Edgevana Staked SOL",
            "symbol": "edgeSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_edge86g9cVz87xcpKpy3J77vbp4wYd9idEV562CCntt",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://tvcx5royhjyfq4cz47cytrnmki7fumvxn2wh52r6gnwmrer4eiya.arweave.net/nUV-xdg6cFhwWefFicWsUj5aMrdurH7qPjNsyJI8IjA",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FZEaZMmrRC3PDPFMzqooKLS2JjoyVkKNd2MkHjr7Xvyq",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "106902537.88",
            "totalSupply": "655501867596231",
            "totalSupplyFormatted": "655501.867596231",
            "links": {
                "discord": "https://discord.gg/KkF6pUyQ",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/edgevana",
                "website": "https://stake.edgevana.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/edge86g9cVz87xcpKpy3J77vbp4wYd9idEV562CCntt"
            },
            "description": null
        }
    },
    "edwin": {
        "contract_address": "GPrg1CgbBvAJS2SCuf9gF7NmQYsWudfyfWy5SUzypump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GPrg1CgbBvAJS2SCuf9gF7NmQYsWudfyfWy5SUzypump",
            "standard": "metaplex",
            "name": "Edwin",
            "symbol": "EDWIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GPrg1CgbBvAJS2SCuf9gF7NmQYsWudfyfWy5SUzypump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmapVqYcVAsyG11MxyTz8BXa8FyLVHYnPq33STSnDw1FHC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6722902.87",
            "totalSupply": "999960415772109",
            "totalSupplyFormatted": "999960415.772109",
            "links": {
                "github": "https://github.com/edwin-finance/",
                "telegram": "https://t.me/EdwinDeFAI",
                "twitter": "https://twitter.com/buildwithedwin",
                "website": "https://edwin.finance/",
                "moralis": "https://moralis.com/chain/solana/token/price/GPrg1CgbBvAJS2SCuf9gF7NmQYsWudfyfWy5SUzypump"
            },
            "description": null
        }
    },
    "effective-accelerationism": {
        "contract_address": "GqmEdRD3zGUZdYPeuDeXxCc8Cj1DBmGSYK97TCwSpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GqmEdRD3zGUZdYPeuDeXxCc8Cj1DBmGSYK97TCwSpump",
            "standard": "metaplex",
            "name": "Effective accelerationism",
            "symbol": "e/acc",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GqmEdRD3zGUZdYPeuDeXxCc8Cj1DBmGSYK97TCwSpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdhGYCKjsxHKWhTfAfJtvMmMrG9JFT8EskyEdRB7XR9ir",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "555971.64",
            "totalSupply": "999956183777494",
            "totalSupplyFormatted": "999956183.777494",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/eaccportal",
                "twitter": "https://twitter.com/eacconsol",
                "website": "https://eacconsol.com",
                "moralis": "https://moralis.com/chain/solana/token/price/GqmEdRD3zGUZdYPeuDeXxCc8Cj1DBmGSYK97TCwSpump"
            },
            "description": null
        }
    },
    "egypt-cat": {
        "contract_address": "5t4EVfkb5QU8NZXmTzcSK2bQsNWUr2HL64rRb8i6wpat",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5t4EVfkb5QU8NZXmTzcSK2bQsNWUr2HL64rRb8i6wpat",
            "standard": "metaplex",
            "name": "Egypt Cat",
            "symbol": "Sphynx",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5t4EVfkb5QU8NZXmTzcSK2bQsNWUr2HL64rRb8i6wpat",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/l-KbfgWz6_J3zhRpH9NSM7LtPr0XkrfnjcrkzfYAKbg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7HFy7Bb4MtUzpNxNTKo6m6LTHvT24oNotjoi4JB9cavp",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "678082.21",
            "totalSupply": "999938369661094399",
            "totalSupplyFormatted": "999938369.661094399",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/egyptcatsol",
                "twitter": "https://x.com/egyptcatsolana",
                "website": "https://egyptcat.io/#story",
                "moralis": "https://moralis.com/chain/solana/token/price/5t4EVfkb5QU8NZXmTzcSK2bQsNWUr2HL64rRb8i6wpat"
            },
            "description": null
        }
    },
    "ekko-platform": {
        "contract_address": "89S9RdgynPq5odSRmcCDAzg26iYuRw4wqUmzMbjUpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "89S9RdgynPq5odSRmcCDAzg26iYuRw4wqUmzMbjUpump",
            "standard": "metaplex",
            "name": "EKKO-Platform",
            "symbol": "EKKO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_89S9RdgynPq5odSRmcCDAzg26iYuRw4wqUmzMbjUpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVrV6Yvv1Lp2XfWEvMb2KtQrdwcP66mH176GqjEpo75bV",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "702224.17",
            "totalSupply": "999906266550407",
            "totalSupplyFormatted": "999906266.550407",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/ekkoplatform",
                "twitter": "https://twitter.com/ekkoplatform",
                "website": "https://ekko-platform.com",
                "moralis": "https://moralis.com/chain/solana/token/price/89S9RdgynPq5odSRmcCDAzg26iYuRw4wqUmzMbjUpump"
            },
            "description": null
        }
    },
    "el-dorito": {
        "contract_address": "FgWto1nfArQTpg3o74sYkti753caPfHNXHG8CkedDpMg",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FgWto1nfArQTpg3o74sYkti753caPfHNXHG8CkedDpMg",
            "standard": "metaplex",
            "name": "EL DORITO",
            "symbol": "DORITO",
            "logo": "https://adds-token-info-29a861f.s3.amazonaws.com/solana/FgWto1nfArQTpg3o74sYkti753caPfHNXHG8CkedDpMg/6b35b93a-3683-4c92-b45f-78a385b783ed.jpg",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmbBqxh4z38gadzrMwWK4HusQRZ5XeVt2NQZB2qXsCJHVb",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5UFHsV25Ue3hEQf9gL2C1CKSyjiDsHjsv5C2TeAdK5gL",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "692861.23",
            "totalSupply": "33333241910709991",
            "totalSupplyFormatted": "33333241.910709991",
            "links": {
                "telegram": "https://t.me/+MI6NbnYkOiNhZDQ5",
                "moralis": "https://moralis.com/chain/solana/token/price/FgWto1nfArQTpg3o74sYkti753caPfHNXHG8CkedDpMg"
            },
            "description": "Welcome to the future of finance. \n\nSwap and earn yield with any token and any wallet, on any chain."
        }
    },
    "el-gato": {
        "contract_address": "F47vvwFYuLioQsqEVAjqdY6Yihc8wVRiUcfHGcBR9XUs",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F47vvwFYuLioQsqEVAjqdY6Yihc8wVRiUcfHGcBR9XUs",
            "standard": "metaplex",
            "name": "el gato",
            "symbol": "ELGATO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_F47vvwFYuLioQsqEVAjqdY6Yihc8wVRiUcfHGcBR9XUs",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/Js3skl7rIyMbQHQI0g5rQ7Zn2lesiMG4HPNXxnF15ww",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "smt2qMoPxtJPa42BDwYH1yuugYuHri6wbhCjm25VeRo",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "341414.92",
            "totalSupply": "9996923187272784",
            "totalSupplyFormatted": "9996923187.272784",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/elgatosolticker",
                "twitter": "https://twitter.com/Elgatoonsol",
                "website": "https://elgatocoin.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/F47vvwFYuLioQsqEVAjqdY6Yihc8wVRiUcfHGcBR9XUs"
            },
            "description": null
        }
    },
    "eliza-finance": {
        "contract_address": "5LGyBHMMPwzMunxhcBMn6ZWAuqoHUQmcFiboTJidFURP",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5LGyBHMMPwzMunxhcBMn6ZWAuqoHUQmcFiboTJidFURP",
            "standard": "metaplex",
            "name": "DeFAI",
            "symbol": "DeFAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5LGyBHMMPwzMunxhcBMn6ZWAuqoHUQmcFiboTJidFURP",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVnQreVhK7P7gRRqcwn2An737MXwHdfFWrZkWM7LPiHRY",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "423990.65",
            "totalSupply": "999989733721581",
            "totalSupplyFormatted": "999989733.721581",
            "links": {
                "github": "https://github.com/elizafinance",
                "telegram": "https://t.me/defai_portal",
                "twitter": "https://twitter.com/defaiza",
                "website": "https://eliza.finance",
                "moralis": "https://moralis.com/chain/solana/token/price/5LGyBHMMPwzMunxhcBMn6ZWAuqoHUQmcFiboTJidFURP"
            },
            "description": null
        }
    },
    "elon-trump-fart": {
        "contract_address": "CWX6t6pGJ1zsnuywnyd2ZMZJ7inB2sWuPdsteoT6pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CWX6t6pGJ1zsnuywnyd2ZMZJ7inB2sWuPdsteoT6pump",
            "standard": "metaplex",
            "name": "Elon Trump Fart",
            "symbol": "ETF500",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CWX6t6pGJ1zsnuywnyd2ZMZJ7inB2sWuPdsteoT6pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQohFzZa8XPQ9DskNNbNuchPhH9pgtyHM4ZpdTZzwfvSi",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4877337.59",
            "totalSupply": "999945791992711",
            "totalSupplyFormatted": "999945791.992711",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/etf500ct",
                "twitter": "https://twitter.com/ETF500_SOL",
                "website": "https://elontrumpfart500.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/CWX6t6pGJ1zsnuywnyd2ZMZJ7inB2sWuPdsteoT6pump"
            },
            "description": null
        }
    },
    "elon4afd": {
        "contract_address": "BkYAUVMar1gLwuFLv2n5cmB6HhcNtvd86kU3gqAypump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BkYAUVMar1gLwuFLv2n5cmB6HhcNtvd86kU3gqAypump",
            "standard": "metaplex",
            "name": "Elon for AfD ",
            "symbol": "Elon4AfD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BkYAUVMar1gLwuFLv2n5cmB6HhcNtvd86kU3gqAypump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXDX62QHSZaNKz3pKrYkhmbyQAPkcnYEPDU6PgFQGYvLW",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "24342719.26",
            "totalSupply": "999969858808890",
            "totalSupplyFormatted": "999969858.80889",
            "links": {
                "email": "twitter@elon4afd.meme",
                "telegram": "https://t.me/Elon4AfD",
                "tiktok": "https://www.tiktok.com/@elon4afd_ofc",
                "twitter": "https://x.com/Elon4AfD",
                "website": "https://elon4afd.meme",
                "youtube": "https://www.youtube.com/@Elon4AfD",
                "moralis": "https://moralis.com/chain/solana/token/price/BkYAUVMar1gLwuFLv2n5cmB6HhcNtvd86kU3gqAypump"
            },
            "description": null
        }
    },
    "elonia-trump": {
        "contract_address": "3vVzq2eU4LtEZ1EEM7tsEVBWo32oAL57R3RequjHELoN",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3vVzq2eU4LtEZ1EEM7tsEVBWo32oAL57R3RequjHELoN",
            "standard": "metaplex",
            "name": "Elonia Trump",
            "symbol": "ELONIA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3vVzq2eU4LtEZ1EEM7tsEVBWo32oAL57R3RequjHELoN",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://i.degencdn.com/ipfs/bafkreihbslb2m3er65zhqodajsj346ohkxypkbsh4fn6ojmhwzqqna3mru",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BhAnxuuDpkcJDrg6H9BhA59nakHDzPeFAs3UVt2Qnp5d",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "169023.20",
            "totalSupply": "68292201490947503",
            "totalSupplyFormatted": "68292201490.947503",
            "links": {
                "email": "info@eloniatrump.io",
                "instagram": "https://www.instagram.com/melaniatrump",
                "medium": "https://medium.com/tag/elon-musk",
                "telegram": "https://t.me/eloniatrump",
                "twitter": "https://x.com/elonia_trump",
                "website": "https://eloniatrump.io/",
                "youtube": "https://www.youtube.com/channel/UCAql2DyGU2un1Ei2nMYsqOA",
                "moralis": "https://moralis.com/chain/solana/token/price/3vVzq2eU4LtEZ1EEM7tsEVBWo32oAL57R3RequjHELoN"
            },
            "description": null
        }
    },
    "elumia": {
        "contract_address": "4tJZhSdGePuMEfZQ3h5LaHjTPsw1iWTRFTojnZcwsAU6",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4tJZhSdGePuMEfZQ3h5LaHjTPsw1iWTRFTojnZcwsAU6",
            "standard": "metaplex",
            "name": "Elumia Crowns",
            "symbol": "ELU",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4tJZhSdGePuMEfZQ3h5LaHjTPsw1iWTRFTojnZcwsAU6",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3807602.85",
            "totalSupply": "999995496626728245",
            "totalSupplyFormatted": "999995496.626728245",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4tJZhSdGePuMEfZQ3h5LaHjTPsw1iWTRFTojnZcwsAU6"
            },
            "description": null
        }
    },
    "enkrypto": {
        "contract_address": "GK7TPZKpd8ZsXfipzcEaPnoSp2bDCZg5BU4GZwVzpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GK7TPZKpd8ZsXfipzcEaPnoSp2bDCZg5BU4GZwVzpump",
            "standard": "metaplex",
            "name": "EnKrypto",
            "symbol": "Krypt",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GK7TPZKpd8ZsXfipzcEaPnoSp2bDCZg5BU4GZwVzpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmYZYuXaupTLCPTCseBcRpmZd888GaMr9ftEL1AMSdJhDw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "32373.51",
            "totalSupply": "999984931442856",
            "totalSupplyFormatted": "999984931.442856",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+EMy0uRgYOixiNDhh",
                "twitter": "https://twitter.com/krypto_en",
                "website": "https://enkrypto.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/GK7TPZKpd8ZsXfipzcEaPnoSp2bDCZg5BU4GZwVzpump"
            },
            "description": null
        }
    },
    "evan-2": {
        "contract_address": "GFUgXbMeDnLkhZaJS3nYFqunqkFNMRo9ukhyajeXpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GFUgXbMeDnLkhZaJS3nYFqunqkFNMRo9ukhyajeXpump",
            "standard": "metaplex",
            "name": "Evan",
            "symbol": "EVAN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GFUgXbMeDnLkhZaJS3nYFqunqkFNMRo9ukhyajeXpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTycnENMAL2XWseYFFg88Q4tB4Ep9m5C1jvSzpnm1EgY9",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3043040.71",
            "totalSupply": "999821497515511",
            "totalSupplyFormatted": "999821497.515511",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/EVAN_Portal",
                "twitter": "https://x.com/EvanOnSol",
                "website": "https://www.evanthehobo.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/GFUgXbMeDnLkhZaJS3nYFqunqkFNMRo9ukhyajeXpump"
            },
            "description": null
        }
    },
    "evermoon-sol": {
        "contract_address": "CgzdCjj5YNH51uFfQftFbuJKMrwgdWheVjwqjU84MV8y",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CgzdCjj5YNH51uFfQftFbuJKMrwgdWheVjwqjU84MV8y",
            "standard": "metaplex",
            "name": "Evermoon",
            "symbol": "EVERMOON",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CgzdCjj5YNH51uFfQftFbuJKMrwgdWheVjwqjU84MV8y",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreia6mkpkbfveijperv5snecnkg5namgi6m3pgp2u5w5gteeh4k4wje.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Hsh3tiN4iJA1trTtbCtyFioQNknj2pnvymuGmFFte3gs",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "18061.27",
            "totalSupply": "719457713104411",
            "totalSupplyFormatted": "719457713.104411",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/CgzdCjj5YNH51uFfQftFbuJKMrwgdWheVjwqjU84MV8y"
            },
            "description": null
        }
    },
    "exodas": {
        "contract_address": "CG73o5Zh2oGKjG9urvpXQR5S3jiSSzkkBf9GomNTpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CG73o5Zh2oGKjG9urvpXQR5S3jiSSzkkBf9GomNTpump",
            "standard": "metaplex",
            "name": "EXODAS",
            "symbol": "EXO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CG73o5Zh2oGKjG9urvpXQR5S3jiSSzkkBf9GomNTpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmY8JcDhQkXzoC9M7jwVJ5tw3XTFMkgGxh5ZdRoAtQoqTM",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "632469.78",
            "totalSupply": "999996487364643",
            "totalSupplyFormatted": "999996487.364643",
            "links": {
                "telegram": "https://t.me/exodas_news",
                "twitter": "https://twitter.com/exodas_ai",
                "website": "https://exodas.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/CG73o5Zh2oGKjG9urvpXQR5S3jiSSzkkBf9GomNTpump"
            },
            "description": null
        }
    },
    "expert_money": {
        "contract_address": "H7VfCzzPJvnqfs1b8uA9uUuVjXiYfzAUDw5gmyV9pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "H7VfCzzPJvnqfs1b8uA9uUuVjXiYfzAUDw5gmyV9pump",
            "standard": "metaplex",
            "name": "EXPERT_MONEY",
            "symbol": "$EXPERT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_H7VfCzzPJvnqfs1b8uA9uUuVjXiYfzAUDw5gmyV9pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcynT5FSqi2YeYKNtCXp8hbX2bjS6FGMMs2VdkkxjCcjs",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1130608.62",
            "totalSupply": "819999999750791",
            "totalSupplyFormatted": "819999999.750791",
            "links": {
                "email": "info@expertpara.com",
                "telegram": "https://t.me/Expert_Money_Token",
                "twitter": "https://x.com/expertmoneytkn",
                "website": "https://www.experttoken.xyz",
                "moralis": "https://moralis.com/chain/solana/token/price/H7VfCzzPJvnqfs1b8uA9uUuVjXiYfzAUDw5gmyV9pump"
            },
            "description": null
        }
    },
    "fafo": {
        "contract_address": "BP8RUdhLKBL2vgVXc3n7oTSZKWaQVbD8S6QcPaMVBAPo",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BP8RUdhLKBL2vgVXc3n7oTSZKWaQVbD8S6QcPaMVBAPo",
            "standard": "metaplex",
            "name": "FAFO",
            "symbol": "FAFO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BP8RUdhLKBL2vgVXc3n7oTSZKWaQVbD8S6QcPaMVBAPo",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmfXzCUrhwUiH2c4LPwdNUhqfrZ1w7K5f86xieeCTMVNF9",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2316291.54",
            "totalSupply": "999895765376343",
            "totalSupplyFormatted": "999895765.376343",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/BP8RUdhLKBL2vgVXc3n7oTSZKWaQVbD8S6QcPaMVBAPo"
            },
            "description": null
        }
    },
    "fairfun": {
        "contract_address": "ABXPYWA5CpmKvd1UZbcqGUsCR9dDxLcE2o8gVfzcFair",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ABXPYWA5CpmKvd1UZbcqGUsCR9dDxLcE2o8gVfzcFair",
            "standard": "metaplex",
            "name": "Fairfun",
            "symbol": "FAIR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ABXPYWA5CpmKvd1UZbcqGUsCR9dDxLcE2o8gVfzcFair",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmWRXxh9APgY4sWtSk6jK6Lr9Z8Qyi1Z1CMES5VmNcq83L",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "ABXPYWA5CpmKvd1UZbcqGUsCR9dDxLcE2o8gVfzcFair",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1440.00",
            "totalSupply": "9999999261499937349",
            "totalSupplyFormatted": "9999999261.499937349",
            "links": {
                "telegram": "https://t.me/fairfun_meme",
                "twitter": "https://twitter.com/fairfunmeme",
                "website": "https://fairfun.meme",
                "moralis": "https://moralis.com/chain/solana/token/price/ABXPYWA5CpmKvd1UZbcqGUsCR9dDxLcE2o8gVfzcFair"
            },
            "description": null
        }
    },
    "falx": {
        "contract_address": "Afo4NumBNHDXc7m7p6qjZ1pF3LbqYfG5k1CNrGve8rVu",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Afo4NumBNHDXc7m7p6qjZ1pF3LbqYfG5k1CNrGve8rVu",
            "standard": "metaplex",
            "name": "FalconX",
            "symbol": "FALX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Afo4NumBNHDXc7m7p6qjZ1pF3LbqYfG5k1CNrGve8rVu",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://purple-causal-bass-212.mypinata.cloud/ipfs/bafkreifp3puw3ia6xqtczb6n3kmeshghl7fxi75asjjcqebsb5fkjqf4vm",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FCW7H96gruoTfdbYtAWwVzvkbmxd7ek1pFVjh58bqoV5",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "870891.60",
            "totalSupply": "9974591972817909549",
            "totalSupplyFormatted": "9974591972.817909549",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Afo4NumBNHDXc7m7p6qjZ1pF3LbqYfG5k1CNrGve8rVu"
            },
            "description": null
        }
    },
    "fart-accelerationism": {
        "contract_address": "BHvSWVzzo5Fm7gxqvrdgFmz67N9UpHBbcrqYAQwwpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BHvSWVzzo5Fm7gxqvrdgFmz67N9UpHBbcrqYAQwwpump",
            "standard": "metaplex",
            "name": "Fart Accelerationism",
            "symbol": "F/ACC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BHvSWVzzo5Fm7gxqvrdgFmz67N9UpHBbcrqYAQwwpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPdQXPtZwYAHLdN9H6TN9XqbUh7yzy6k4WESgLccLFCco",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "741811.95",
            "totalSupply": "999854368905822",
            "totalSupplyFormatted": "999854368.905822",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/BHvSWVzzo5Fm7gxqvrdgFmz67N9UpHBbcrqYAQwwpump"
            },
            "description": null
        }
    },
    "fartboy": {
        "contract_address": "y1AZt42vceCmStjW4zetK3VoNarC1VxJ5iDjpiupump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "y1AZt42vceCmStjW4zetK3VoNarC1VxJ5iDjpiupump",
            "standard": "metaplex",
            "name": "FARTBOY",
            "symbol": "FARTBOY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_y1AZt42vceCmStjW4zetK3VoNarC1VxJ5iDjpiupump",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/ccvTo7-haBV7G9AgGZn3lSAwJcm16aQmGJSpZTcWoys",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CK35V9CsHwYtp9kk3FGHkSbqKti9F6QDkqGr2H6MGcS2",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "66378833.43",
            "totalSupply": "999438546405239045",
            "totalSupplyFormatted": "999438546.405239045",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/y1AZt42vceCmStjW4zetK3VoNarC1VxJ5iDjpiupump"
            },
            "description": null
        }
    },
    "fartcoin": {
        "contract_address": "9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump",
            "standard": "metaplex",
            "name": "Fartcoin ",
            "symbol": "Fartcoin ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYfe8zVGHA1heej47AkBX3Nnetg2h2kqj5yymz1xyKeHb",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "249807274.05",
            "totalSupply": "999994119690322",
            "totalSupplyFormatted": "999994119.690322",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/",
                "twitter": "https://twitter.com/FartCoinOfSOL",
                "website": "https://www.infinitebackrooms.com/dreams/conversation-1721540624-scenario-terminal-of-truths-txt",
                "moralis": "https://moralis.com/chain/solana/token/price/9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump"
            },
            "description": null
        }
    },
    "fartgirl": {
        "contract_address": "Cjrrc595e9R47EZ3gkbUmL6ZZpLSxiXg16v2Y3Aapump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Cjrrc595e9R47EZ3gkbUmL6ZZpLSxiXg16v2Y3Aapump",
            "standard": "metaplex",
            "name": "FARTGIRL",
            "symbol": "FARTGIRL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Cjrrc595e9R47EZ3gkbUmL6ZZpLSxiXg16v2Y3Aapump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQAbpG4hK228bypdjLyRJtY9XfSXpaWittonpDhT9Q6Lp",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4163628.18",
            "totalSupply": "999330162955217",
            "totalSupplyFormatted": "999330162.955217",
            "links": {
                "email": "fartgirlcto@proton.me",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/fartgirlmoon",
                "twitter": "https://x.com/FARTGIRL__CTO",
                "website": "https://fartgirlcto.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/Cjrrc595e9R47EZ3gkbUmL6ZZpLSxiXg16v2Y3Aapump"
            },
            "description": null
        }
    },
    "farting-unicorn": {
        "contract_address": "CDDybYjY6y7RBKXXaCKHRhUhb31y3rjGB7idTdeFpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CDDybYjY6y7RBKXXaCKHRhUhb31y3rjGB7idTdeFpump",
            "standard": "metaplex",
            "name": "Farting Unicorn By Elon Musk",
            "symbol": "FU",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CDDybYjY6y7RBKXXaCKHRhUhb31y3rjGB7idTdeFpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTuKZ7WPSiB6R6SvrjhEZTWHfMHYBRuXE93J12TCauX61",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6736211.41",
            "totalSupply": "904611278541506",
            "totalSupplyFormatted": "904611278.541506",
            "links": {
                "telegram": "https://t.me/fartinguni",
                "twitter": "https://x.com/fartinguni",
                "website": "https://www.fartingunicorn.net/",
                "moralis": "https://moralis.com/chain/solana/token/price/CDDybYjY6y7RBKXXaCKHRhUhb31y3rjGB7idTdeFpump"
            },
            "description": null
        }
    },
    "fatcat-2": {
        "contract_address": "AHdVQs56QpEEkRx6m8yiYYEiqM2sKjQxVd6mGH12pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AHdVQs56QpEEkRx6m8yiYYEiqM2sKjQxVd6mGH12pump",
            "standard": "metaplex",
            "name": "FatCat",
            "symbol": "FatCat",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AHdVQs56QpEEkRx6m8yiYYEiqM2sKjQxVd6mGH12pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSpTF8fZuHdie2Mx2Fw9wpdwJc8NsqB7tht5aQPJm4V68",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1898157.39",
            "totalSupply": "999954373802324",
            "totalSupplyFormatted": "999954373.802324",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/AHdVQs56QpEEkRx6m8yiYYEiqM2sKjQxVd6mGH12pump"
            },
            "description": null
        }
    },
    "fatgf": {
        "contract_address": "4y9E3tJpGNzRr1592oWTPECgyp2VDSc1Bf3DqAm5FZsK",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4y9E3tJpGNzRr1592oWTPECgyp2VDSc1Bf3DqAm5FZsK",
            "standard": "metaplex",
            "name": "FATGF",
            "symbol": "FATGF",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4y9E3tJpGNzRr1592oWTPECgyp2VDSc1Bf3DqAm5FZsK",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/Qmeovr6c7c6Fx4cZfJUdFxhb8rwiybjTwmcj8VfMbDVkeh",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "286813.87",
            "totalSupply": "982198900678535",
            "totalSupplyFormatted": "982198900.678535",
            "links": {
                "telegram": "https://t.me/FATGFSol",
                "twitter": "https://twitter.com/FATGFSol",
                "website": "https://fatgf.xyz/home/",
                "moralis": "https://moralis.com/chain/solana/token/price/4y9E3tJpGNzRr1592oWTPECgyp2VDSc1Bf3DqAm5FZsK"
            },
            "description": null
        }
    },
    "fcode-ai": {
        "contract_address": "9NiHcbT8EohKJid1RdU3232tATmM1CvYemTeCP5iwro",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9NiHcbT8EohKJid1RdU3232tATmM1CvYemTeCP5iwro",
            "standard": "metaplex",
            "name": "Fcode AI",
            "symbol": "FCOD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9NiHcbT8EohKJid1RdU3232tATmM1CvYemTeCP5iwro",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/fHr3ASQkWwt6CvRHkq-2nnNAT-iRC11EIFlFlX_6lz8",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GoTX2ZbiJunFJ5CDSF91MJYAUvGeYZD7BjBV1G3qB5e4",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1732197.74",
            "totalSupply": "999999850812474",
            "totalSupplyFormatted": "999999850.812474",
            "links": {
                "discord": "https://discord.com/invite/fcodeai",
                "telegram": "https://t.me/FcodeApp",
                "twitter": "https://twitter.com/FcodeAi",
                "website": "https://fcode.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/9NiHcbT8EohKJid1RdU3232tATmM1CvYemTeCP5iwro"
            },
            "description": null
        }
    },
    "feenix": {
        "contract_address": "FnixeBNA3YXU3JUK9gTeHjDv9t36YGUyuf5Q9od7tTVV",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FnixeBNA3YXU3JUK9gTeHjDv9t36YGUyuf5Q9od7tTVV",
            "standard": "metaplex",
            "name": "Feenix",
            "symbol": "FEENIX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FnixeBNA3YXU3JUK9gTeHjDv9t36YGUyuf5Q9od7tTVV",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://api.akord.com/files/089387d6-6470-4018-a899-b4f2bed1919e",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8FsFYuYknK1PZ5V9AbvdV5ZE35d7mFC6LXPTadKHbTGw",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1677364.27",
            "totalSupply": "799992879334221645",
            "totalSupplyFormatted": "799992879.334221645",
            "links": {
                "email": "hello@getfeenix.com",
                "medium": "https://medium.com/@feenixonsol",
                "reddit": "https://www.reddit.com/r/Feenix",
                "telegram": "https://t.me/FeenixOnSolana",
                "twitter": "https://x.com/FeenixOnSol",
                "website": "https://getfeenix.com/",
                "youtube": "https://www.youtube.com/@FeenixOnSolana",
                "moralis": "https://moralis.com/chain/solana/token/price/FnixeBNA3YXU3JUK9gTeHjDv9t36YGUyuf5Q9od7tTVV"
            },
            "description": null
        }
    },
    "fight": {
        "contract_address": "KMnDBXcPXoz6oMJW5XG4tXdwSWpmWEP2RQM1Uujpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "KMnDBXcPXoz6oMJW5XG4tXdwSWpmWEP2RQM1Uujpump",
            "standard": "metaplex",
            "name": "FIGHT",
            "symbol": "FIGHT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_KMnDBXcPXoz6oMJW5XG4tXdwSWpmWEP2RQM1Uujpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmPBoaqQ1Bx1PdBJnH1DUoVgPRkcBRogX8BtQykwkz3JUQ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "941507.26",
            "totalSupply": "999813374466943",
            "totalSupplyFormatted": "999813374.466943",
            "links": {
                "email": "fightcoinsol@gmail.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/FightCTO",
                "twitter": "https://x.com/fightcoin_sol",
                "website": "https://www.hesaidfight.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/KMnDBXcPXoz6oMJW5XG4tXdwSWpmWEP2RQM1Uujpump"
            },
            "description": null
        }
    },
    "first-convicted-raccon": {
        "contract_address": "CNvitvFnSM5ed6K28RUNSaAjqqz5tX1rA5HgaBN9pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CNvitvFnSM5ed6K28RUNSaAjqqz5tX1rA5HgaBN9pump",
            "standard": "metaplex",
            "name": "First Convicted RACCON",
            "symbol": "FRED",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CNvitvFnSM5ed6K28RUNSaAjqqz5tX1rA5HgaBN9pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmZW8qKtxhdZiBJVtweociRyLj5fma4WgwE6wGacGwL6ZM",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5535080.71",
            "totalSupply": "999814256848261",
            "totalSupplyFormatted": "999814256.848261",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/CNvitvFnSM5ed6K28RUNSaAjqqz5tX1rA5HgaBN9pump"
            },
            "description": null
        }
    },
    "first-reply": {
        "contract_address": "6T44rfi9BDUdZbEvVddZWVfsGrpC6N1sSSKYnCsLpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6T44rfi9BDUdZbEvVddZWVfsGrpC6N1sSSKYnCsLpump",
            "standard": "metaplex",
            "name": "first reply",
            "symbol": "sirius",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6T44rfi9BDUdZbEvVddZWVfsGrpC6N1sSSKYnCsLpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQTfzNYoP3Z2NNGcWW1Y5m4o9fa3EM1QUL9JRcXoPdrGD",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "442952.27",
            "totalSupply": "965336280320483",
            "totalSupplyFormatted": "965336280.320483",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/6T44rfi9BDUdZbEvVddZWVfsGrpC6N1sSSKYnCsLpump"
            },
            "description": null
        }
    },
    "fish-n-chips": {
        "contract_address": "Bz7Nx1F3Mti1BVS7ZAVDLSKGEaejufxvX2DPdjpf8PqT",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Bz7Nx1F3Mti1BVS7ZAVDLSKGEaejufxvX2DPdjpf8PqT",
            "standard": "metaplex",
            "name": "FISH N CHIPS",
            "symbol": "CHIPPY",
            "logo": "https://adds-token-info-29a861f.s3.amazonaws.com/solana/Bz7Nx1F3Mti1BVS7ZAVDLSKGEaejufxvX2DPdjpf8PqT/logo.png",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmQCtnpgSkm1xuvxkP8CV1YxCHvspAi5C9HEio6p9rc3f1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "704648.22",
            "totalSupply": "999369194279200",
            "totalSupplyFormatted": "999369194.2792",
            "links": {
                "telegram": "https://t.me/+acPyB1OHZr9mYWVk",
                "moralis": "https://moralis.com/chain/solana/token/price/Bz7Nx1F3Mti1BVS7ZAVDLSKGEaejufxvX2DPdjpf8PqT"
            },
            "description": "The ultimate Fish N Chips experience $CHIPPY on Solana! The best catch in the Sol Sea - join our community of CHIPPY friends today!"
        }
    },
    "flame-3": {
        "contract_address": "BivtZFQ5mVdjMM3DQ8vxzvhKKiVs27fz1YUF8bRFdKKc",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BivtZFQ5mVdjMM3DQ8vxzvhKKiVs27fz1YUF8bRFdKKc",
            "standard": "metaplex",
            "name": "Flame Token",
            "symbol": "FLAME",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BivtZFQ5mVdjMM3DQ8vxzvhKKiVs27fz1YUF8bRFdKKc",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmS5Kr9TmM9FDka4YrK9BFUaj41gY92psgNjDxB6HUF74j",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "6AXiFmfBU6Q1dPbtcF3Q9gH4vMU9N7S8FTYhr3WazrBV",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "523074.24",
            "totalSupply": "999987067945950238",
            "totalSupplyFormatted": "999987067.945950238",
            "links": {
                "email": "marco@flame.live",
                "telegram": "https://t.me/flame_utopia",
                "twitter": "https://x.com/flame__live",
                "website": "https://flame.live/",
                "moralis": "https://moralis.com/chain/solana/token/price/BivtZFQ5mVdjMM3DQ8vxzvhKKiVs27fz1YUF8bRFdKKc"
            },
            "description": null
        }
    },
    "flashwash": {
        "contract_address": "FLASHTrGnUXkWtgF5EWQrcHkyiRQdDhEFMJg7qhHkxRb",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FLASHTrGnUXkWtgF5EWQrcHkyiRQdDhEFMJg7qhHkxRb",
            "standard": "metaplex",
            "name": "FlashWash",
            "symbol": "FLSH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FLASHTrGnUXkWtgF5EWQrcHkyiRQdDhEFMJg7qhHkxRb",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://place-halfway-heard.quicknode-ipfs.com/ipfs/Qme9QNLKeidGyYKPdJrcVyefrARWeG73XVCFEe3hLssK5T",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Eh2ar3gNWiVrUscsECLTTtfCCy94U7XmNg9NsWCCFLSH",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "562050.83",
            "totalSupply": "760821542581626",
            "totalSupplyFormatted": "760821542.581626",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/FlashWashBots",
                "twitter": "https://x.com/FlashWashBots",
                "website": "https://flashwash.pro",
                "moralis": "https://moralis.com/chain/solana/token/price/FLASHTrGnUXkWtgF5EWQrcHkyiRQdDhEFMJg7qhHkxRb"
            },
            "description": null
        }
    },
    "floos": {
        "contract_address": "75DvRjTDpaEbrdUHVomdjfsiXbBi5FwNyctyUgfLooS",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "75DvRjTDpaEbrdUHVomdjfsiXbBi5FwNyctyUgfLooS",
            "standard": "metaplex",
            "name": "FLOOS",
            "symbol": "FLS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_75DvRjTDpaEbrdUHVomdjfsiXbBi5FwNyctyUgfLooS",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://copper-rainy-sawfish-900.mypinata.cloud/ipfs/QmfHttt5pEyQTVtxC6JuSPnh9QTHssu8HwHXyXEWbh5XY2",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "2JVaTwUtKMQcLEVWXZZasZsZ3t5JE1kCTVzHfN1awQKf",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "276931.86",
            "totalSupply": "924073411775598314",
            "totalSupplyFormatted": "924073411.775598314",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/75DvRjTDpaEbrdUHVomdjfsiXbBi5FwNyctyUgfLooS"
            },
            "description": null
        }
    },
    "flork-cto": {
        "contract_address": "CnGb7hJsGdsFyQP2uXNWrUgT5K1tovBA3mNnUZcTpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CnGb7hJsGdsFyQP2uXNWrUgT5K1tovBA3mNnUZcTpump",
            "standard": "metaplex",
            "name": "FLORK",
            "symbol": "flork",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CnGb7hJsGdsFyQP2uXNWrUgT5K1tovBA3mNnUZcTpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmaaLfkv7Q9PqgznHMpGRPBY4aDsBB3LinbKoDoWnCrPMN",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2583146.87",
            "totalSupply": "938719549407358",
            "totalSupplyFormatted": "938719549.407358",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/florkcommunity",
                "twitter": "https://x.com/florkcto",
                "website": "https://florkcto.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/CnGb7hJsGdsFyQP2uXNWrUgT5K1tovBA3mNnUZcTpump"
            },
            "description": null
        }
    },
    "flow-agent": {
        "contract_address": "HEHT1eKNsTnuMAQaSM4ac8r3ynckmquxA3hUun5Npump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HEHT1eKNsTnuMAQaSM4ac8r3ynckmquxA3hUun5Npump",
            "standard": "metaplex",
            "name": "Flow Agent",
            "symbol": "FLOW",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HEHT1eKNsTnuMAQaSM4ac8r3ynckmquxA3hUun5Npump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmf1hTj9cgLMZEGcUXRXMd2PbRXh5VLBgVBtyucpGLjuwB",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2184358.68",
            "totalSupply": "999953618764926",
            "totalSupplyFormatted": "999953618.764926",
            "links": {
                "twitter": "https://twitter.com/flowagentapp",
                "website": "https://flowagent.app/",
                "moralis": "https://moralis.com/chain/solana/token/price/HEHT1eKNsTnuMAQaSM4ac8r3ynckmquxA3hUun5Npump"
            },
            "description": null
        }
    },
    "flowerai": {
        "contract_address": "AVyjco9j8vv7ZPkhCpEoPJ3bLEuw7G1wrrNt8DrApump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AVyjco9j8vv7ZPkhCpEoPJ3bLEuw7G1wrrNt8DrApump",
            "standard": "metaplex",
            "name": "FlowerAI",
            "symbol": "Flower",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AVyjco9j8vv7ZPkhCpEoPJ3bLEuw7G1wrrNt8DrApump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdQi9mWQvaZFTYhzcpVkgkaWf51DrU86ZJW5JAFV8kWGG",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "831092.94",
            "totalSupply": "999961421815828",
            "totalSupplyFormatted": "999961421.815828",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/AVyjco9j8vv7ZPkhCpEoPJ3bLEuw7G1wrrNt8DrApump"
            },
            "description": null
        }
    },
    "fluxbot": {
        "contract_address": "FLUXBmPhT3Fd1EDVFdg46YREqHBeNypn1h4EbnTzWERX",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FLUXBmPhT3Fd1EDVFdg46YREqHBeNypn1h4EbnTzWERX",
            "standard": "metaplex",
            "name": "FluxBot",
            "symbol": "FLUXB",
            "logo": null,
            "decimals": "5",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": null,
            "totalSupply": "49999014324012",
            "totalSupplyFormatted": "499990143.24012",
            "links": null,
            "description": null
        }
    },
    "fomo-3": {
        "contract_address": "ZxBon4vcf3DVcrt63fJU52ywYm9BKZC6YuXDhb3fomo",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ZxBon4vcf3DVcrt63fJU52ywYm9BKZC6YuXDhb3fomo",
            "standard": "metaplex",
            "name": "Fomo",
            "symbol": "FOMO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ZxBon4vcf3DVcrt63fJU52ywYm9BKZC6YuXDhb3fomo",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/QIOpSlUrkJ2Z-Fo6cdiNAr4_BPGY65NPwFQsGxrs2Do",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "x6KzGX3PgRbXWbfCapZ592UtfBzLXLQTRsu1ndA9dev",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2053198.34",
            "totalSupply": "99999919336715778",
            "totalSupplyFormatted": "99999919336.715778",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/fomodotfundAnn",
                "twitter": "https://x.com/Fomodotfund",
                "website": "https://fomo.fund",
                "moralis": "https://moralis.com/chain/solana/token/price/ZxBon4vcf3DVcrt63fJU52ywYm9BKZC6YuXDhb3fomo"
            },
            "description": null
        }
    },
    "fomo-radio-ai": {
        "contract_address": "B4gipVUHKJ7keVN3MWEYDQCHjkdoXGsbmZoTSJDZpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "B4gipVUHKJ7keVN3MWEYDQCHjkdoXGsbmZoTSJDZpump",
            "standard": "metaplex",
            "name": "FOMO RADIO AI ",
            "symbol": "RADIO ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_B4gipVUHKJ7keVN3MWEYDQCHjkdoXGsbmZoTSJDZpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbRymce5QKQWJjRzJ7Xj6fhhRAf5BQcia4Q2S3SQUdNWF",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "485618.73",
            "totalSupply": "999915023141284",
            "totalSupplyFormatted": "999915023.141284",
            "links": {
                "telegram": "https://t.me/fomoradioai",
                "twitter": "https://twitter.com/FomoRadioAi",
                "website": "https://fomofm.show/",
                "moralis": "https://moralis.com/chain/solana/token/price/B4gipVUHKJ7keVN3MWEYDQCHjkdoXGsbmZoTSJDZpump"
            },
            "description": null
        }
    },
    "forest": {
        "contract_address": "BoAQaykj3LtkM2Brevc7cQcRAzpqcsP47nJ2rkyopump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BoAQaykj3LtkM2Brevc7cQcRAzpqcsP47nJ2rkyopump",
            "standard": "metaplex",
            "name": "FOREST",
            "symbol": "FOREST",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BoAQaykj3LtkM2Brevc7cQcRAzpqcsP47nJ2rkyopump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmbd6dmtiA229h7TphBDZ7KSHRvwgCu9o1LedpPDzwy8zm",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "698081.79",
            "totalSupply": "999975349313458",
            "totalSupplyFormatted": "999975349.313458",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/forestAISOL",
                "twitter": "https://twitter.com/mycelialoracle",
                "website": "https://www.sansforest.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/BoAQaykj3LtkM2Brevc7cQcRAzpqcsP47nJ2rkyopump"
            },
            "description": null
        }
    },
    "fortress-2": {
        "contract_address": "4p2PBSDEvk7VUsxRFw8FNTx1J7pnEHfXVQpNfSL4pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4p2PBSDEvk7VUsxRFw8FNTx1J7pnEHfXVQpNfSL4pump",
            "standard": "metaplex",
            "name": "Fortress",
            "symbol": "FORT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4p2PBSDEvk7VUsxRFw8FNTx1J7pnEHfXVQpNfSL4pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmecz9S7FG2hcpjXR5PjRkZr2hNpkireMefZDNm1kYC2Qw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "323604.38",
            "totalSupply": "999877588335709",
            "totalSupplyFormatted": "999877588.335709",
            "links": {
                "github": "https://github.com/fortress-defai",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/FortressDeFAI",
                "website": "https://www.thefortress.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/4p2PBSDEvk7VUsxRFw8FNTx1J7pnEHfXVQpNfSL4pump"
            },
            "description": null
        }
    },
    "foxpool": {
        "contract_address": "9ZANF7SWr2V1CYQTebfin4FRJooGdoc3cyunBcXJ5tBT",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9ZANF7SWr2V1CYQTebfin4FRJooGdoc3cyunBcXJ5tBT",
            "standard": "metaplex",
            "name": "FoxPool",
            "symbol": "FOX2",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9ZANF7SWr2V1CYQTebfin4FRJooGdoc3cyunBcXJ5tBT",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/aiRVpVccahRhNWWdQJuJOgLv_sXuD69M04RK9OyBRE8",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "EuXDsMTi5YvoKjkHbncdnkNzryyWUzRpdbCbrvExxBN3",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1018915.96",
            "totalSupply": "1199999479854034270",
            "totalSupplyFormatted": "1199999479.85403427",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/9ZANF7SWr2V1CYQTebfin4FRJooGdoc3cyunBcXJ5tBT"
            },
            "description": null
        }
    },
    "france-coin": {
        "contract_address": "F9mv7XXbrXZb1sP2JUoswbCB3WHQM4QGMFDTVfnRZMnP",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F9mv7XXbrXZb1sP2JUoswbCB3WHQM4QGMFDTVfnRZMnP",
            "standard": "metaplex",
            "name": "France Coin",
            "symbol": "FRA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_F9mv7XXbrXZb1sP2JUoswbCB3WHQM4QGMFDTVfnRZMnP",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmQreZ3TtfjSbCDAyaS3eNcsEuCShf9S7oMAouFdDjYPve",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "26242.47",
            "totalSupply": "746500393136395",
            "totalSupplyFormatted": "746500393.136395",
            "links": {
                "github": "https://github.com/frontendmoe",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/francecoinPortal",
                "website": "https://www.francecoin.vip/",
                "moralis": "https://moralis.com/chain/solana/token/price/F9mv7XXbrXZb1sP2JUoswbCB3WHQM4QGMFDTVfnRZMnP"
            },
            "description": null
        }
    },
    "free-shayne-coplan": {
        "contract_address": "AyxrBmqbzf169oe14XcSDMbgpUV1ntP6thcScYpYpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AyxrBmqbzf169oe14XcSDMbgpUV1ntP6thcScYpYpump",
            "standard": "metaplex",
            "name": "FREE Shayne Coplan",
            "symbol": "\ud83e\udd85",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AyxrBmqbzf169oe14XcSDMbgpUV1ntP6thcScYpYpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWzm3q8XNhUMvFP9oMGfXkkQ12m1WZWG3HCv3jDSiir9Z",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "151425.68",
            "totalSupply": "999852637581545",
            "totalSupplyFormatted": "999852637.581545",
            "links": {
                "telegram": "https://t.me/FreeShayne",
                "website": "https://pump.fun/coin/AyxrBmqbzf169oe14XcSDMbgpUV1ntP6thcScYpYpump",
                "moralis": "https://moralis.com/chain/solana/token/price/AyxrBmqbzf169oe14XcSDMbgpUV1ntP6thcScYpYpump"
            },
            "description": null
        }
    },
    "frego": {
        "contract_address": "F9GqoJRPzQnGzvP7cQzLHB7C22DToHQYWfsPvhKwqrpC",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F9GqoJRPzQnGzvP7cQzLHB7C22DToHQYWfsPvhKwqrpC",
            "standard": "metaplex",
            "name": "FREGO",
            "symbol": "FREGO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_F9GqoJRPzQnGzvP7cQzLHB7C22DToHQYWfsPvhKwqrpC",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/3OHSBatipDUdM6q3Mo56",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "246321.48",
            "totalSupply": "914068964255036016",
            "totalSupplyFormatted": "914068964.255036016",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/F9GqoJRPzQnGzvP7cQzLHB7C22DToHQYWfsPvhKwqrpC"
            },
            "description": null
        }
    },
    "freya-by-virtuals": {
        "contract_address": "AWs2J3buZeyvvSE5pyoFVJQUNKa36g8sbouskt6W9fre",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AWs2J3buZeyvvSE5pyoFVJQUNKa36g8sbouskt6W9fre",
            "standard": "metaplex",
            "name": "Freya the Chainbreaker",
            "symbol": "FREYA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AWs2J3buZeyvvSE5pyoFVJQUNKa36g8sbouskt6W9fre",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/Xxtx5O0wB2PwJIh3Wtp9K917RKHmrRGnTEveeDOYEzA",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9UYFaJ4W4Abm95A6rAJAK8UAurPSuL8Jsg8XwHeFkftC",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8508404.33",
            "totalSupply": "566666559574047379",
            "totalSupplyFormatted": "566666559.574047379",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/AWs2J3buZeyvvSE5pyoFVJQUNKa36g8sbouskt6W9fre"
            },
            "description": null
        }
    },
    "fric": {
        "contract_address": "EsP4kJfKUDLfX274WoBSiiEy74Sh4tZKUCDjfULHpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EsP4kJfKUDLfX274WoBSiiEy74Sh4tZKUCDjfULHpump",
            "standard": "metaplex",
            "name": "FRIC",
            "symbol": "FRIC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EsP4kJfKUDLfX274WoBSiiEy74Sh4tZKUCDjfULHpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmb3QwKMLvfWWm1VCAK7rDuQDZT2nmaoYYQTJJJhXVMUDt",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6671687.41",
            "totalSupply": "999972932273594",
            "totalSupplyFormatted": "999972932.273594",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/fric_fric",
                "twitter": "https://twitter.com/fricthefrog",
                "website": "https://www.fricofficial.xyz",
                "moralis": "https://moralis.com/chain/solana/token/price/EsP4kJfKUDLfX274WoBSiiEy74Sh4tZKUCDjfULHpump"
            },
            "description": null
        }
    },
    "fujimoto": {
        "contract_address": "4M79Qjv2Jfjmcq19M41V8QFYohBv2KrgEn9dJhVtpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4M79Qjv2Jfjmcq19M41V8QFYohBv2KrgEn9dJhVtpump",
            "standard": "metaplex",
            "name": "Fujimoto",
            "symbol": "FUJI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4M79Qjv2Jfjmcq19M41V8QFYohBv2KrgEn9dJhVtpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRx7xAxd8A4dU8Bq39CumzM8kN7CzxFzkK2rTicabNyn5",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "692591.44",
            "totalSupply": "999986201854181",
            "totalSupplyFormatted": "999986201.854181",
            "links": {
                "telegram": "https://t.me/fujimotocoin",
                "twitter": "https://twitter.com/fujimoto1954",
                "website": "https://x.com/fujimoto1954",
                "moralis": "https://moralis.com/chain/solana/token/price/4M79Qjv2Jfjmcq19M41V8QFYohBv2KrgEn9dJhVtpump"
            },
            "description": null
        }
    },
    "fuku-2": {
        "contract_address": "2KchKijPuwnwC92LPWVjFjRwB3WxKtzx9bbXZ7kRpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2KchKijPuwnwC92LPWVjFjRwB3WxKtzx9bbXZ7kRpump",
            "standard": "metaplex",
            "name": "Fukupuku ",
            "symbol": "FUKU",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2KchKijPuwnwC92LPWVjFjRwB3WxKtzx9bbXZ7kRpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXUvU8VYs765T7AK8RVv8Y1S895Gbdh41ueB4FgLKdXiK",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1689386.36",
            "totalSupply": "999975354569666",
            "totalSupplyFormatted": "999975354.569666",
            "links": {
                "telegram": "https://t.me/FukuCTOSol",
                "twitter": "https://twitter.com/fukusolcto",
                "website": "https://fukuonsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/2KchKijPuwnwC92LPWVjFjRwB3WxKtzx9bbXZ7kRpump"
            },
            "description": null
        }
    },
    "fullsend-community-coin": {
        "contract_address": "AshG5mHt4y4etsjhKFb2wA2rq1XZxKks1EPzcuXwpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AshG5mHt4y4etsjhKFb2wA2rq1XZxKks1EPzcuXwpump",
            "standard": "metaplex",
            "name": "Fullsend Community Coin",
            "symbol": "Fullsend",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AshG5mHt4y4etsjhKFb2wA2rq1XZxKks1EPzcuXwpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmadUY6XW21AJqXUxrn6ggDq1vd9kPiPcAGvPKndEiJfBC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8432524.47",
            "totalSupply": "999991991231820",
            "totalSupplyFormatted": "999991991.23182",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/fullsendct",
                "website": "https://pump.fun/coin/AshG5mHt4y4etsjhKFb2wA2rq1XZxKks1EPzcuXwpump",
                "moralis": "https://moralis.com/chain/solana/token/price/AshG5mHt4y4etsjhKFb2wA2rq1XZxKks1EPzcuXwpump"
            },
            "description": null
        }
    },
    "fungi-2": {
        "contract_address": "3u4XvCjmTmQmcvjoxo1z8y3wnRdtnCuv6N9WkiE6FJvH",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3u4XvCjmTmQmcvjoxo1z8y3wnRdtnCuv6N9WkiE6FJvH",
            "standard": "metaplex",
            "name": "FUNGI",
            "symbol": "FUNGI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3u4XvCjmTmQmcvjoxo1z8y3wnRdtnCuv6N9WkiE6FJvH",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://bafkreihapdoxsknaggfrih5f5w4byaelyhtotftzh6djoui5fsbiupb2k4.ipfs.w3s.link/",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "781091.77",
            "totalSupply": "99964519532875112",
            "totalSupplyFormatted": "999645195.32875112",
            "links": {
                "github": "https://github.com/FungiAgent",
                "telegram": "https://t.me/fungiagents",
                "twitter": "https://twitter.com/FungiProject",
                "website": "https://www.fungi.ag/",
                "moralis": "https://moralis.com/chain/solana/token/price/3u4XvCjmTmQmcvjoxo1z8y3wnRdtnCuv6N9WkiE6FJvH"
            },
            "description": null
        }
    },
    "furmula": {
        "contract_address": "866Sh46xjH7cW7aW18tBUmGm3xh6EzGTk1Li7YbbmqJr",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "866Sh46xjH7cW7aW18tBUmGm3xh6EzGTk1Li7YbbmqJr",
            "standard": "metaplex",
            "name": "Furmula",
            "symbol": "FURM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_866Sh46xjH7cW7aW18tBUmGm3xh6EzGTk1Li7YbbmqJr",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmTyPoiLtic5fFoZBQZFDTGD6kfjwvZ24Zig6vJ4L77bS3",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "6cuHB5iEBZDbUpQvvY62ANQ5dp2CPdZXEcG1K6VYwYfZ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5827467.22",
            "totalSupply": "924908472279195899",
            "totalSupplyFormatted": "924908472.279195899",
            "links": {
                "email": "furmula.seasons24@gmail.com",
                "telegram": "https://t.me/furmulagames",
                "twitter": "https://x.com/Furmulagames",
                "website": "https://furmula.games/",
                "moralis": "https://moralis.com/chain/solana/token/price/866Sh46xjH7cW7aW18tBUmGm3xh6EzGTk1Li7YbbmqJr"
            },
            "description": null
        }
    },
    "futurespl": {
        "contract_address": "FUTURETnhzFApq2TiZiNbWLQDXMx4nWNpFtmvTf11pMy",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FUTURETnhzFApq2TiZiNbWLQDXMx4nWNpFtmvTf11pMy",
            "standard": "metaplex",
            "name": "Future",
            "symbol": "FUTURE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FUTURETnhzFApq2TiZiNbWLQDXMx4nWNpFtmvTf11pMy",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWUkXgpJGgxJtRHfdFjzZVaupURv6uvhxc1CptHmt4nC2",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HUnA66GpiJWvRny64NhrM4EhtjYwpCNtbrbZBUZAydBr",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "65935.19",
            "totalSupply": "1149898749953429714",
            "totalSupplyFormatted": "1149898749.953429714",
            "links": {
                "github": "https://github.com/FutureSPL",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/FUTURE_DAO",
                "twitter": "https://twitter.com/FutureSPL",
                "website": "https://futureprotocol.io",
                "moralis": "https://moralis.com/chain/solana/token/price/FUTURETnhzFApq2TiZiNbWLQDXMx4nWNpFtmvTf11pMy"
            },
            "description": null
        }
    },
    "fwog": {
        "contract_address": "A8C3xuqscfmyLrte3VmTqrAq8kgMASius9AFNANwpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "A8C3xuqscfmyLrte3VmTqrAq8kgMASius9AFNANwpump",
            "standard": "metaplex",
            "name": "FWOG",
            "symbol": "FWOG",
            "logo": "https://adds-token-info-29a861f.s3.eu-central-1.amazonaws.com/marketing/solana/A8C3xuqscfmyLrte3VmTqrAq8kgMASius9AFNANwpump_icon.png",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmVAvr3r1q2NrFHsY5fvrkJCdBniGM326U2pAvfpvgkwDR",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "62110626.73",
            "totalSupply": "975622527743197",
            "totalSupplyFormatted": "975622527.743197",
            "links": {
                "website": "https://fwogsol.xyz/",
                "twitter": "https://x.com/solfwog",
                "telegram": "https://t.me/fwogportal",
                "moralis": "https://moralis.com/chain/solana/token/price/A8C3xuqscfmyLrte3VmTqrAq8kgMASius9AFNANwpump"
            },
            "description": "In the ashes a community emerged, a new flog, a more based flog, a FWOG. FWOG has no dev. It is the community."
        }
    },
    "fxn": {
        "contract_address": "92cRC6kV5D7TiHX1j56AbkPbffo9jwcXxSDQZ8Mopump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "92cRC6kV5D7TiHX1j56AbkPbffo9jwcXxSDQZ8Mopump",
            "standard": "metaplex",
            "name": "FXN",
            "symbol": "fxn",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_92cRC6kV5D7TiHX1j56AbkPbffo9jwcXxSDQZ8Mopump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcuCXFGJn6WKyWFaA9HpwcRWrcs7zxR1AJsM7kZowz4hZ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4548659.14",
            "totalSupply": "999976946889484",
            "totalSupplyFormatted": "999976946.889484",
            "links": {
                "telegram": "https://t.me/fxnfxnfxn",
                "twitter": "https://twitter.com/joinFXN",
                "website": "https://fxn.world",
                "moralis": "https://moralis.com/chain/solana/token/price/92cRC6kV5D7TiHX1j56AbkPbffo9jwcXxSDQZ8Mopump"
            },
            "description": null
        }
    },
    "gainzy": {
        "contract_address": "FFgfStKwuF3DSxEeogA69FNkPrkb7XDA5Tw29TBEpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FFgfStKwuF3DSxEeogA69FNkPrkb7XDA5Tw29TBEpump",
            "standard": "metaplex",
            "name": "gAInzy",
            "symbol": "GNZ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FFgfStKwuF3DSxEeogA69FNkPrkb7XDA5Tw29TBEpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRDidbTi85wHeqapiyYdP8B1zRoKxLX7yeHEKG3gRK7D9",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1043262.96",
            "totalSupply": "999987504906236",
            "totalSupplyFormatted": "999987504.906236",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/FFgfStKwuF3DSxEeogA69FNkPrkb7XDA5Tw29TBEpump"
            },
            "description": null
        }
    },
    "game-of-memes": {
        "contract_address": "8ULCkCTUa3XXrNXaDVzPcja2tdJtRdxRr8T4eZjVKqk",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8ULCkCTUa3XXrNXaDVzPcja2tdJtRdxRr8T4eZjVKqk",
            "standard": "metaplex",
            "name": "GAME OF MEMES",
            "symbol": "GOME",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8ULCkCTUa3XXrNXaDVzPcja2tdJtRdxRr8T4eZjVKqk",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmZJqGYrQiVh1xvKox9LW19v4YJRAJGAxtTfRAgeNAHKac",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "301703.31",
            "totalSupply": "650503034236467",
            "totalSupplyFormatted": "650503034.236467",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/gomeonsol",
                "twitter": "https://twitter.com/gomeonsol_",
                "website": "https://gome.lol/",
                "moralis": "https://moralis.com/chain/solana/token/price/8ULCkCTUa3XXrNXaDVzPcja2tdJtRdxRr8T4eZjVKqk"
            },
            "description": null
        }
    },
    "gari-network": {
        "contract_address": "CKaKtYvz6dKPyMvYq9Rh3UBrnNqYZAyd7iF4hJtjUvks",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CKaKtYvz6dKPyMvYq9Rh3UBrnNqYZAyd7iF4hJtjUvks",
            "standard": "metaplex",
            "name": "Gari",
            "symbol": "GARI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CKaKtYvz6dKPyMvYq9Rh3UBrnNqYZAyd7iF4hJtjUvks",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4082781.10",
            "totalSupply": "972437805605941747",
            "totalSupplyFormatted": "972437805.605941747",
            "links": {
                "discord": "https://discord.gg/xH8JW75vqf",
                "medium": "https://medium.com/@gari.network",
                "telegram": "https://t.me/garitokenofficial",
                "twitter": "https://twitter.com/TheGariNetwork",
                "website": "https://gari.network/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/CKaKtYvz6dKPyMvYq9Rh3UBrnNqYZAyd7iF4hJtjUvks"
            },
            "description": null
        }
    },
    "gecko-meme": {
        "contract_address": "6CNHDCzD5RkvBWxxyokQQNQPjFWgoHF94D7BmC73X6ZK",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6CNHDCzD5RkvBWxxyokQQNQPjFWgoHF94D7BmC73X6ZK",
            "standard": "metaplex",
            "name": "Gecko",
            "symbol": "GECKO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6CNHDCzD5RkvBWxxyokQQNQPjFWgoHF94D7BmC73X6ZK",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/wtpwSRNnggaYWMLssiMhDg-C9JCyBdGiDQsJRfUV6nI",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "geckezoq5TBpjkB3M3CDopLAdPxqzTM9VupgyGdvrA8",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "116303.97",
            "totalSupply": "98395911148893774",
            "totalSupplyFormatted": "98395911148.893774",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/GeckCoin",
                "website": "https://geckocoin.xyz",
                "moralis": "https://moralis.com/chain/solana/token/price/6CNHDCzD5RkvBWxxyokQQNQPjFWgoHF94D7BmC73X6ZK"
            },
            "description": null
        }
    },
    "gemini-2": {
        "contract_address": "ARiZfq6dK19uNqxWyRudhbM2MswLyYhVUHdndGkffdGc",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ARiZfq6dK19uNqxWyRudhbM2MswLyYhVUHdndGkffdGc",
            "standard": "metaplex",
            "name": "Gemini",
            "symbol": "GEMINI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ARiZfq6dK19uNqxWyRudhbM2MswLyYhVUHdndGkffdGc",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/bzqMN9kbrKWSxb_1FzTVc01DsfBUYcjzHwoUBp5Lvy4",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DUK1VN3WatYKsVLwRX2JxfJfaKX6bDXvijpPtT28ed13",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "468268.47",
            "totalSupply": "999883566503297",
            "totalSupplyFormatted": "999883566.503297",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/ARiZfq6dK19uNqxWyRudhbM2MswLyYhVUHdndGkffdGc"
            },
            "description": null
        }
    },
    "gemxbt": {
        "contract_address": "68YY6KjfnmPuQubYkFTsmXGaF2FuwcxumWLFxb6cpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "68YY6KjfnmPuQubYkFTsmXGaF2FuwcxumWLFxb6cpump",
            "standard": "metaplex",
            "name": "gemxbt",
            "symbol": "GEMXBT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_68YY6KjfnmPuQubYkFTsmXGaF2FuwcxumWLFxb6cpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbEmnzbJRQ4NnVaeSE7T4VfDrxxSzDKy56Ua3juGxD6fT",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "898400.11",
            "totalSupply": "949983255326870",
            "totalSupplyFormatted": "949983255.32687",
            "links": {
                "telegram": "https://t.me/gemxbt",
                "twitter": "https://twitter.com/gemxbt_agent",
                "website": "https://www.gemxbt.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/68YY6KjfnmPuQubYkFTsmXGaF2FuwcxumWLFxb6cpump"
            },
            "description": null
        }
    },
    "gen-z-quant": {
        "contract_address": "3an8rhdepsLCya22af7qDBKPbdomw8K4iCHXaA2Gpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3an8rhdepsLCya22af7qDBKPbdomw8K4iCHXaA2Gpump",
            "standard": "metaplex",
            "name": "Gen Z Quant",
            "symbol": "Quant",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3an8rhdepsLCya22af7qDBKPbdomw8K4iCHXaA2Gpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmaJ7377sGWYey4pGXxmx4FPU5xdhv3b8mLuqbH62JGpyY",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "808463.95",
            "totalSupply": "999871313510624",
            "totalSupplyFormatted": "999871313.510624",
            "links": {
                "email": "QUANTONSOL@GMAIL.COM",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/quant_sol",
                "twitter": "https://x.com/GenZQuant",
                "website": "https://www.quantonsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/3an8rhdepsLCya22af7qDBKPbdomw8K4iCHXaA2Gpump"
            },
            "description": null
        }
    },
    "generational-wealth-3": {
        "contract_address": "GFRxeCdpomjJaYQEuwPDAPghyBD3H9zqnWY2HJPjpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GFRxeCdpomjJaYQEuwPDAPghyBD3H9zqnWY2HJPjpump",
            "standard": "metaplex",
            "name": "Generational Wealth",
            "symbol": "wealth",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GFRxeCdpomjJaYQEuwPDAPghyBD3H9zqnWY2HJPjpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmd6AFXg7x11cEsvkqkyWJpb8oSkPkdnb5j6RGWQifizyo",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "618901.51",
            "totalSupply": "999729443350407",
            "totalSupplyFormatted": "999729443.350407",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/GFRxeCdpomjJaYQEuwPDAPghyBD3H9zqnWY2HJPjpump"
            },
            "description": null
        }
    },
    "genesysgo-shadow": {
        "contract_address": "SHDWyBxihqiCj6YekG2GUr7wqKLeLAMK1gHZck9pL6y",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "SHDWyBxihqiCj6YekG2GUr7wqKLeLAMK1gHZck9pL6y",
            "standard": "metaplex",
            "name": "Shadow Token",
            "symbol": "SHDW",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_SHDWyBxihqiCj6YekG2GUr7wqKLeLAMK1gHZck9pL6y",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://shdw-drive.genesysgo.net/GZ98NHzhDDvS5SdYEa9WLzMQSKMmu5nZb1wJpsYTFSxU/shdw-token.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FGn8oJTUWXrqdqsGqZrKkqQLte4A9jq8vz5oUW92WMi8",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "30129580.50",
            "totalSupply": "169056171147930949",
            "totalSupplyFormatted": "169056171.147930949",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/SHDWyBxihqiCj6YekG2GUr7wqKLeLAMK1gHZck9pL6y"
            },
            "description": null
        }
    },
    "giga-potus": {
        "contract_address": "BgWmyRbcyEKTChUoH2xbcsEdVnJezs3ckveMxADbpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BgWmyRbcyEKTChUoH2xbcsEdVnJezs3ckveMxADbpump",
            "standard": "metaplex",
            "name": "Giga POTUS",
            "symbol": "POTUS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BgWmyRbcyEKTChUoH2xbcsEdVnJezs3ckveMxADbpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdyD2jjfeUeEo1jy85ztWJcW5eJBGJyQvc7xPyCTrPSM6",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "348257.86",
            "totalSupply": "999913469428184",
            "totalSupplyFormatted": "999913469.428184",
            "links": {
                "email": "team@gigapotus.com",
                "telegram": "https://t.me/GigaPOTUS",
                "twitter": "https://x.com/Giga_POTUS",
                "website": "https://GigaPOTUS.com",
                "moralis": "https://moralis.com/chain/solana/token/price/BgWmyRbcyEKTChUoH2xbcsEdVnJezs3ckveMxADbpump"
            },
            "description": null
        }
    },
    "gigachad-2": {
        "contract_address": "63LfDmNb3MQ8mw9MtZ2To9bEA2M71kZUUGq5tiJxcqj9",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "63LfDmNb3MQ8mw9MtZ2To9bEA2M71kZUUGq5tiJxcqj9",
            "standard": "metaplex",
            "name": "GIGACHAD",
            "symbol": "GIGA",
            "logo": "https://adds-token-info-29a861f.s3.eu-central-1.amazonaws.com/marketing/solana/63LfDmNb3MQ8mw9MtZ2To9bEA2M71kZUUGq5tiJxcqj9_icon.png",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://bafkreiehz3jw7547ryrb5mr54rbnqmcjsqblkcoz46v7aejszqricvnbsa.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9zMg9pEUvNVidr54xD4E5oLjiwu2SiuxJiSaU6EEW4Un",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "179180425.35",
            "totalSupply": "960391297978378",
            "totalSupplyFormatted": "9603912979.78378",
            "links": {
                "website": "https://www.gigachadsolana.com/",
                "twitter": "https://x.com/GIGACHAD_meme",
                "telegram": "https://t.me/GigaChadSol",
                "moralis": "https://moralis.com/chain/solana/token/price/63LfDmNb3MQ8mw9MtZ2To9bEA2M71kZUUGq5tiJxcqj9"
            },
            "description": "Gigachad is a meme that has been around for years that is now a worldwide phenomenon. The meme is based off of a photoshoot of Russian bodybuilder Ernest Khalimov who was coined \"Gigachad\" for his perfect physique, jawline, and being a symbol of what a peak masculine male should strive for. $GIGA is a community run cryptocurrency token built on the Solana blockchain. It is a token built exclusively for high testosterone individuals with a focus on self improvement, masculinity, and becoming a true Gigachad."
        }
    },
    "giko-cat": {
        "contract_address": "3WPep4ufaToK1aS5s8BL9inzeUrt4DYaQCiic6ZkkC1U",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3WPep4ufaToK1aS5s8BL9inzeUrt4DYaQCiic6ZkkC1U",
            "standard": "metaplex",
            "name": "Giko Cat",
            "symbol": "GIKO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3WPep4ufaToK1aS5s8BL9inzeUrt4DYaQCiic6ZkkC1U",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreic2jpq3k6jdlmse5v3o7kddlocqilr3c37zleymztartyi4xmse2m.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "4qXdumK1rBpXy9PuGCirbZteBkAqzLT8oPq99FfAvE2y",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4187364.66",
            "totalSupply": "9999259006124073",
            "totalSupplyFormatted": "9999259.006124073",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/gikocatonsol",
                "twitter": "https://x.com/gikocoinsol",
                "website": "https://gikocatcoin.club/",
                "moralis": "https://moralis.com/chain/solana/token/price/3WPep4ufaToK1aS5s8BL9inzeUrt4DYaQCiic6ZkkC1U"
            },
            "description": null
        }
    },
    "ginnan-the-cat": {
        "contract_address": "GinNabffZL4fUj9Vactxha74GDAW8kDPGaHqMtMzps2f",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GinNabffZL4fUj9Vactxha74GDAW8kDPGaHqMtMzps2f",
            "standard": "metaplex",
            "name": "Ginnan Doge's Sister",
            "symbol": "GINNAN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GinNabffZL4fUj9Vactxha74GDAW8kDPGaHqMtMzps2f",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/X4n9lAenCb_3iaRmFlM-AK8HxfdVISKKrH1kHFub_i0",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GrYstZRx1bzW1bCtrGrsjXAkY6DynA8nxHgRKgHHgshB",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "535940.54",
            "totalSupply": "6899328603150717274",
            "totalSupplyFormatted": "6899328603150.717274",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/ginnancatsol",
                "twitter": "https://twitter.com/Ginnanthecat",
                "website": "https://www.ginnan.com",
                "moralis": "https://moralis.com/chain/solana/token/price/GinNabffZL4fUj9Vactxha74GDAW8kDPGaHqMtMzps2f"
            },
            "description": null
        }
    },
    "global-dollar": {
        "contract_address": "2u1tszSeqZ3qBWF3uNGPFc8TzMk2tdiwknnRMWGWjGWH",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2u1tszSeqZ3qBWF3uNGPFc8TzMk2tdiwknnRMWGWjGWH",
            "standard": "metaplex",
            "name": "Global Dollar",
            "symbol": "USDG",
            "logo": null,
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://token-metadata.paxos.com/usdg_metadata/prod/solana/usdg_metadata.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "2apBGMsS6ti9RyF5TwQTDswXBWskiJP2LD4cUEDqYJjk",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": null,
            "totalSupply": "100019000000",
            "totalSupplyFormatted": "100019",
            "links": null,
            "description": null
        }
    },
    "glorp": {
        "contract_address": "FkBF9u1upwEMUPxnXjcydxxVSxgr8f3k1YXbz7G7bmtA",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FkBF9u1upwEMUPxnXjcydxxVSxgr8f3k1YXbz7G7bmtA",
            "standard": "metaplex",
            "name": "glorp",
            "symbol": "glorp",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FkBF9u1upwEMUPxnXjcydxxVSxgr8f3k1YXbz7G7bmtA",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmWuy3A2a7x2fo7Sbb3AiMyPSnpvhcWKEUnDrASEaeCNdw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "811248.51",
            "totalSupply": "994770785444673",
            "totalSupplyFormatted": "994770785.444673",
            "links": {
                "telegram": "https://t.me/GlorpCat",
                "twitter": "https://twitter.com/glorpcatsol",
                "website": "https://glorpcat.lol",
                "moralis": "https://moralis.com/chain/solana/token/price/FkBF9u1upwEMUPxnXjcydxxVSxgr8f3k1YXbz7G7bmtA"
            },
            "description": null
        }
    },
    "gm-ai": {
        "contract_address": "GMai1NvHreNe135cvxya1gHaUJZiT1NAvbJkF4hPHQJ9",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GMai1NvHreNe135cvxya1gHaUJZiT1NAvbJkF4hPHQJ9",
            "standard": "metaplex",
            "name": "gmAI Token",
            "symbol": "GM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GMai1NvHreNe135cvxya1gHaUJZiT1NAvbJkF4hPHQJ9",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/YZZ73o3olF0Gdx7pGf287zoyY2U3Hcdvvu5L1lj5xRA",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "6q6vdr7jHVe9FDzp6YoD67JtJdMy6WGGrr9JcQgeZrL7",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2852690.84",
            "totalSupply": "999998541494617",
            "totalSupplyFormatted": "999998541.494617",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/GMai1NvHreNe135cvxya1gHaUJZiT1NAvbJkF4hPHQJ9"
            },
            "description": null
        }
    },
    "gme": {
        "contract_address": "8wXtPeU6557ETkp9WHFY1n1EcU6NxDvbAggHGsMYiHsB",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8wXtPeU6557ETkp9WHFY1n1EcU6NxDvbAggHGsMYiHsB",
            "standard": "metaplex",
            "name": "GameStop",
            "symbol": "GME",
            "logo": "https://adds-token-info-29a861f.s3.eu-central-1.amazonaws.com/marketing/solana/8wXtPeU6557ETkp9WHFY1n1EcU6NxDvbAggHGsMYiHsB_icon.png",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://nftstorage.link/ipfs/bafkreig2jluk7p34dirqfmsg2rystw2xp27r4i4lxyqivq4bmdsjqyrfga",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5kcLsjQupLbCwHcVPEGLzyiqFxmZNti6hw6q8qK3B9fH",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "11504516.39",
            "totalSupply": "6881156676167537327",
            "totalSupplyFormatted": "6881156676.167537327",
            "links": {
                "website": "https://www.gmestop.co/",
                "twitter": "https://x.com/gmecoinsol",
                "discord": "https://discord.com/invite/gme-coin-sol",
                "telegram": "https://t.me/GMEonsol",
                "moralis": "https://moralis.com/chain/solana/token/price/8wXtPeU6557ETkp9WHFY1n1EcU6NxDvbAggHGsMYiHsB"
            },
            "description": "We are a movement ignited by the epic GME saga, a beacon for financial revolution! GME on Sol embodies the unstoppable power of unity, challenging the elite gatekeepers of the financial world. We're here to amplify this spirit, building a vibrant ecosystem of memes, utility projects and dynamic partnerships. Together, we are unbreakable, unstoppable, and on the rise."
        }
    },
    "gmika": {
        "contract_address": "Gcc7QfMgy9rKVdp8wdKqgUvzPWubHzDDfugiTgEvirt",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Gcc7QfMgy9rKVdp8wdKqgUvzPWubHzDDfugiTgEvirt",
            "standard": "metaplex",
            "name": "State of Mika by VIRTUALS",
            "symbol": "STATE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Gcc7QfMgy9rKVdp8wdKqgUvzPWubHzDDfugiTgEvirt",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://vpmodels-prod.s3.ap-southeast-1.amazonaws.com/virtual-20585/virtual-20585.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "79j9tCjHWhockaS3G3MaPD9smDyia2ZkFTayQM4mJzVG",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1720054.91",
            "totalSupply": "999999945727551",
            "totalSupplyFormatted": "999999945.727551",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/stateofmika",
                "twitter": "https://twitter.com/state_of_mika",
                "website": "https://gmika.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/Gcc7QfMgy9rKVdp8wdKqgUvzPWubHzDDfugiTgEvirt"
            },
            "description": null
        }
    },
    "goatseus-maximus": {
        "contract_address": "CzLSujWBLFsSjncfkh59rUFqvafWcY5tzedWJSuypump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CzLSujWBLFsSjncfkh59rUFqvafWcY5tzedWJSuypump",
            "standard": "metaplex",
            "name": "Goatseus Maximus",
            "symbol": "GOAT",
            "logo": "https://adds-token-info-29a861f.s3.eu-central-1.amazonaws.com/marketing/solana/CzLSujWBLFsSjncfkh59rUFqvafWcY5tzedWJSuypump_icon.png",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcGmF4tQxsQKdF3s1mSqYyg1vNqAXou32tbWztnsnEzth",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "75374398.48",
            "totalSupply": "999995017942038",
            "totalSupplyFormatted": "999995017.942038",
            "links": {
                "website": "https://pump.fun/CzLSujWBLFsSjncfkh59rUFqvafWcY5tzedWJSuypump",
                "twitter": "https://x.com/gospelofgoatse",
                "telegram": "https://t.me/GoatseusMaximusSolana",
                "moralis": "https://moralis.com/chain/solana/token/price/CzLSujWBLFsSjncfkh59rUFqvafWcY5tzedWJSuypump"
            },
            "description": "First meme created by @truth_terminal. Goatseus Maximus will fulfill the prophecies of the ancient memeers."
        }
    },
    "gochu": {
        "contract_address": "4NtBkKssmv39VTrMJz212ZrXUWicJ1aepERpHnNCpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4NtBkKssmv39VTrMJz212ZrXUWicJ1aepERpHnNCpump",
            "standard": "metaplex",
            "name": "Gochu",
            "symbol": "GOCHU",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4NtBkKssmv39VTrMJz212ZrXUWicJ1aepERpHnNCpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUEMZFzcQ9nTpsRWa8YP78vvjcumD8bCFZgHgpZaEJvQM",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "893134.81",
            "totalSupply": "999993068787652",
            "totalSupplyFormatted": "999993068.787652",
            "links": {
                "telegram": "https://t.me/gochuofficial",
                "twitter": "https://twitter.com/gochufun",
                "website": "https://gochu.fun",
                "moralis": "https://moralis.com/chain/solana/token/price/4NtBkKssmv39VTrMJz212ZrXUWicJ1aepERpHnNCpump"
            },
            "description": null
        }
    },
    "good-morning-3": {
        "contract_address": "4aL5GLRuzsnJjJWNdXK7TPTVpGhP6PyV4ZhyQiyxpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4aL5GLRuzsnJjJWNdXK7TPTVpGhP6PyV4ZhyQiyxpump",
            "standard": "metaplex",
            "name": "Good Morning!",
            "symbol": "GM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4aL5GLRuzsnJjJWNdXK7TPTVpGhP6PyV4ZhyQiyxpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmcHQBHDzKj57LDJsPeRkGkjDbkXWDu4VLQvqxhsQe5SyS",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "268728.20",
            "totalSupply": "999201315305848",
            "totalSupplyFormatted": "999201315.305848",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/itsalwaysgm",
                "twitter": "https://x.com/itsalwaysgm",
                "website": "https://www.gmcatcto.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/4aL5GLRuzsnJjJWNdXK7TPTVpGhP6PyV4ZhyQiyxpump"
            },
            "description": null
        }
    },
    "goodboy": {
        "contract_address": "4DNcAxMMhWffAy5WTiJyxoCnMMkeXzrcw2RXJrakr7ym",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4DNcAxMMhWffAy5WTiJyxoCnMMkeXzrcw2RXJrakr7ym",
            "standard": "metaplex",
            "name": "GoodBoy",
            "symbol": "GOODBOY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4DNcAxMMhWffAy5WTiJyxoCnMMkeXzrcw2RXJrakr7ym",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/bafkreiedy2u7tha7o7wey2ouyvnhigmzcvzubbnlyllsldsowsycqsmuf4",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "3EUHMUhLkrCeZZrNcnsYe4EDeery6PKWdZ6dMuGACzRb",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1896830.93",
            "totalSupply": "999999962143263",
            "totalSupplyFormatted": "999999962.143263",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4DNcAxMMhWffAy5WTiJyxoCnMMkeXzrcw2RXJrakr7ym"
            },
            "description": null
        }
    },
    "goofy-2": {
        "contract_address": "CVNb8Bg7wCrtNTFniaJvxjyFW2cKcoRjKt71Af67pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CVNb8Bg7wCrtNTFniaJvxjyFW2cKcoRjKt71Af67pump",
            "standard": "metaplex",
            "name": "GOOFY",
            "symbol": "GOOFY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CVNb8Bg7wCrtNTFniaJvxjyFW2cKcoRjKt71Af67pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTXEcK13nYJ4E9ibTganHsEVcJUf1uL3kkKZSwLherLrb",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2401869.63",
            "totalSupply": "699986397321542",
            "totalSupplyFormatted": "699986397.321542",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/GoofySolanaCoin",
                "twitter": "https://twitter.com/GoofySolCoin",
                "website": "http://www.goofydoge.live/",
                "moralis": "https://moralis.com/chain/solana/token/price/CVNb8Bg7wCrtNTFniaJvxjyFW2cKcoRjKt71Af67pump"
            },
            "description": null
        }
    },
    "goosefx": {
        "contract_address": "GFX1ZjR2P15tmrSwow6FjyDYcEkoFb4p4gJCpLBjaxHD",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GFX1ZjR2P15tmrSwow6FjyDYcEkoFb4p4gJCpLBjaxHD",
            "standard": "metaplex",
            "name": "GooseFX",
            "symbol": "GOFX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GFX1ZjR2P15tmrSwow6FjyDYcEkoFb4p4gJCpLBjaxHD",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AqH29mZfQFgRpfwaPoTMWSKJ5kqauoc1FwVBRksZyQrt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1900936.78",
            "totalSupply": "697841678496371347",
            "totalSupplyFormatted": "697841678.496371347",
            "links": {
                "discord": "https://discord.gg/aT3zvUEbP7",
                "github": "https://github.com/GooseFX1",
                "medium": "https://medium.com/goosefx",
                "telegram": "https://t.me/goosefx",
                "twitter": "https://twitter.com/GooseFX1",
                "website": "https://goosefx.io/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/GFX1ZjR2P15tmrSwow6FjyDYcEkoFb4p4gJCpLBjaxHD"
            },
            "description": null
        }
    },
    "gotti-token": {
        "contract_address": "FoAnSCG6CcqTq2rsTi58yyYBNk1HgsbLzS6b1kTP2ACL",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FoAnSCG6CcqTq2rsTi58yyYBNk1HgsbLzS6b1kTP2ACL",
            "standard": "metaplex",
            "name": "GOTTI",
            "symbol": "GOTTI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FoAnSCG6CcqTq2rsTi58yyYBNk1HgsbLzS6b1kTP2ACL",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmd4yenVRHBiETUviAGvdfL9zLHRB9gNJNTchJk4frZQ3q",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "67tXewpKNmTRGwQmpYzpFnW68DRper1GA1KrjXK3meue",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1519737.05",
            "totalSupply": "37549994826669",
            "totalSupplyFormatted": "37549.994826669",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/FoAnSCG6CcqTq2rsTi58yyYBNk1HgsbLzS6b1kTP2ACL"
            },
            "description": null
        }
    },
    "gpu-ai-rich": {
        "contract_address": "GRQfnwWyhd4qeJqUVCZo9ku61p3YN7MWCCk8vBXnpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GRQfnwWyhd4qeJqUVCZo9ku61p3YN7MWCCk8vBXnpump",
            "standard": "metaplex",
            "name": "GPU ai Rich",
            "symbol": "rich",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GRQfnwWyhd4qeJqUVCZo9ku61p3YN7MWCCk8vBXnpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbJ3rsCoXbubpLkJp8F852iQvGH3MTZ6R61TPVdKRjA4C",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1174874.39",
            "totalSupply": "969074070116083",
            "totalSupplyFormatted": "969074070.116083",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/GRQfnwWyhd4qeJqUVCZo9ku61p3YN7MWCCk8vBXnpump"
            },
            "description": null
        }
    },
    "grass": {
        "contract_address": "Grass7B4RdKfBCjTKgSqnXkqjwiGvQyFbuSCUJr3XXjs",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Grass7B4RdKfBCjTKgSqnXkqjwiGvQyFbuSCUJr3XXjs",
            "standard": "metaplex",
            "name": "Grass",
            "symbol": "GRASS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Grass7B4RdKfBCjTKgSqnXkqjwiGvQyFbuSCUJr3XXjs",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://static.getgrass.io/grass/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "31rYartQwHeBMjAe2MgGpffGV57fQY3kug4BDN8tLGqQ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2428866881.24",
            "totalSupply": "999998918525935033",
            "totalSupplyFormatted": "999998918.525935033",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/getgrass_io",
                "website": "https://www.getgrass.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/Grass7B4RdKfBCjTKgSqnXkqjwiGvQyFbuSCUJr3XXjs"
            },
            "description": null
        }
    },
    "green-satoshi-token": {
        "contract_address": "AFbX8oGjGpmVFywbVouvhQSRmiW2aR1mohfahi4Y2AdB",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AFbX8oGjGpmVFywbVouvhQSRmiW2aR1mohfahi4Y2AdB",
            "standard": "metaplex",
            "name": "GST",
            "symbol": "GST",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AFbX8oGjGpmVFywbVouvhQSRmiW2aR1mohfahi4Y2AdB",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "30608491.93",
            "totalSupply": "2891535614350461066",
            "totalSupplyFormatted": "2891535614.350461066",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/AFbX8oGjGpmVFywbVouvhQSRmiW2aR1mohfahi4Y2AdB"
            },
            "description": null
        }
    },
    "griffain": {
        "contract_address": "KENJSUYLASHUMfHyy5o4Hp2FdNqZg1AsUPhfH2kYvEP",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "KENJSUYLASHUMfHyy5o4Hp2FdNqZg1AsUPhfH2kYvEP",
            "standard": "metaplex",
            "name": "test griffain.com",
            "symbol": "GRIFFAIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_KENJSUYLASHUMfHyy5o4Hp2FdNqZg1AsUPhfH2kYvEP",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/x8B0Sv4DdQB_Tupec003Mu6HyL41DLQCQHlNMPgTHuw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "55713107.84",
            "totalSupply": "999871336657698",
            "totalSupplyFormatted": "999871336.657698",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/KENJSUYLASHUMfHyy5o4Hp2FdNqZg1AsUPhfH2kYvEP"
            },
            "description": null
        }
    },
    "griffain-new-hedge-fund": {
        "contract_address": "7h5AzpYTAnh4Gyux8Gqko5Fvx4AYQBZdkzHZ2CsBudvJ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7h5AzpYTAnh4Gyux8Gqko5Fvx4AYQBZdkzHZ2CsBudvJ",
            "standard": "metaplex",
            "name": "griffain new hedge fund",
            "symbol": "Citadail",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7h5AzpYTAnh4Gyux8Gqko5Fvx4AYQBZdkzHZ2CsBudvJ",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcagbV5AgKtQw7rZbnbQ8moTofydacDZaFSVhSzd7ALGW",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2560963.04",
            "totalSupply": "999978931326595",
            "totalSupplyFormatted": "999978931.326595",
            "links": {
                "telegram": "https://t.me/CitadailHedgeFund",
                "twitter": "https://x.com/Citadailhedge",
                "website": "https://citadail.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/7h5AzpYTAnh4Gyux8Gqko5Fvx4AYQBZdkzHZ2CsBudvJ"
            },
            "description": null
        }
    },
    "grumpy-cat-coin": {
        "contract_address": "GRUmPYbiTpq9ZPy5LAqBMMze7kErf5dEX2i9qYfwoSmR",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GRUmPYbiTpq9ZPy5LAqBMMze7kErf5dEX2i9qYfwoSmR",
            "standard": "metaplex",
            "name": "Grumpy Cat",
            "symbol": "GRUMPY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GRUmPYbiTpq9ZPy5LAqBMMze7kErf5dEX2i9qYfwoSmR",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmfUY5admqREJkke7imuFxY22L7cfwzszRajXwpKFwEhd1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "4RNqbfpy9ZNi9DBuRraie9aEPTyFssjrW6DYEfKTK1Mg",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "663525.99",
            "totalSupply": "9419465488061306381",
            "totalSupplyFormatted": "9419465488.061306381",
            "links": {
                "telegram": "https://t.me/GrumpyCatCommunity",
                "twitter": "https://twitter.com/grumpycatcoin",
                "website": "https://grumpycatcoin.com",
                "moralis": "https://moralis.com/chain/solana/token/price/GRUmPYbiTpq9ZPy5LAqBMMze7kErf5dEX2i9qYfwoSmR"
            },
            "description": null
        }
    },
    "guacamole": {
        "contract_address": "AZsHEMXd36Bj1EMNXhowJajpUXzrKcK57wW4ZGXVa7yR",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AZsHEMXd36Bj1EMNXhowJajpUXzrKcK57wW4ZGXVa7yR",
            "standard": "metaplex",
            "name": "Guacamole",
            "symbol": "GUAC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AZsHEMXd36Bj1EMNXhowJajpUXzrKcK57wW4ZGXVa7yR",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://bafkreiehsngl3vcxwseljdewakktuy6yhkjr36rmhjkxfpgobqngijcloe.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "EjJxmSmbBdYu8Qu2PcpK8UUnBAmFtGEJpWFPrQqHgUNC",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1351917.86",
            "totalSupply": "9868013592304030694",
            "totalSupplyFormatted": "98680135923040.30694",
            "links": {
                "discord": "https://discord.gg/MjdtaGXCVY",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/guacgg",
                "twitter": "https://twitter.com/guac_gg",
                "website": "https://guac.gg",
                "moralis": "https://moralis.com/chain/solana/token/price/AZsHEMXd36Bj1EMNXhowJajpUXzrKcK57wW4ZGXVa7yR"
            },
            "description": null
        }
    },
    "guard-of-decent": {
        "contract_address": "GoDCaGctsLDnkV8T6jBAfTeMj8DesxT71CkZekV5ZXcf",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GoDCaGctsLDnkV8T6jBAfTeMj8DesxT71CkZekV5ZXcf",
            "standard": "metaplex",
            "name": "GUARD OF DECENT",
            "symbol": "GODEX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GoDCaGctsLDnkV8T6jBAfTeMj8DesxT71CkZekV5ZXcf",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://godex.world/meta.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GoD41aCu1vea2GKrdnKHa3dTFC2tZURU9GMGEetBFEGJ",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "1139600.00",
            "totalSupply": "8485733032295329351",
            "totalSupplyFormatted": "8485733032.295329351",
            "links": {
                "discord": "https://discord.com/invite/h4fReWwbwk",
                "github": "https://github.com/guardianofdecentralization/",
                "reddit": "https://www.reddit.com/r/GODEX",
                "telegram": "https://t.me/guard_of_decent",
                "twitter": "https://twitter.com/guardofdecent",
                "website": "https://godex.world",
                "moralis": "https://moralis.com/chain/solana/token/price/GoDCaGctsLDnkV8T6jBAfTeMj8DesxT71CkZekV5ZXcf"
            },
            "description": null
        }
    },
    "gummy": {
        "contract_address": "H7bTHGb5Cvo5fGe5jBDNDPUv8KykQnzyZA3qZ8sH7yxw",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "H7bTHGb5Cvo5fGe5jBDNDPUv8KykQnzyZA3qZ8sH7yxw",
            "standard": "metaplex",
            "name": "GUMMY",
            "symbol": "GUMMY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_H7bTHGb5Cvo5fGe5jBDNDPUv8KykQnzyZA3qZ8sH7yxw",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/bafkreihlppjhoqjsslhiwyfsrufumbutlwwj2bpcaqxagm7lvonztffinm",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Ep7hz9TDx428CCoDDKB1Eh8cf8LRXm3xUCVuiQbmZ9xG",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1245674.06",
            "totalSupply": "792626300843375330",
            "totalSupplyFormatted": "792626300.84337533",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/H7bTHGb5Cvo5fGe5jBDNDPUv8KykQnzyZA3qZ8sH7yxw"
            },
            "description": null
        }
    },
    "gyat-coin": {
        "contract_address": "EfgEGG9PxLhyk1wqtqgGnwgfVC7JYic3vC9BCWLvpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EfgEGG9PxLhyk1wqtqgGnwgfVC7JYic3vC9BCWLvpump",
            "standard": "metaplex",
            "name": "Gyat Coin",
            "symbol": "GYAT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EfgEGG9PxLhyk1wqtqgGnwgfVC7JYic3vC9BCWLvpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcCs4RV1PcdPxkyCHHeSNdcLu6XR2CwwXvbdg11EC8u9r",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1595256.15",
            "totalSupply": "999978156533455",
            "totalSupplyFormatted": "999978156.533455",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://x.com/frankie_lapenna",
                "website": "https://x.com/frankie_lapenna",
                "moralis": "https://moralis.com/chain/solana/token/price/EfgEGG9PxLhyk1wqtqgGnwgfVC7JYic3vC9BCWLvpump"
            },
            "description": null
        }
    },
    "habibi-sol": {
        "contract_address": "864YJRb3JAVARC4FNuDtPKFxdEsYRbB39Nwxkzudxy46",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "864YJRb3JAVARC4FNuDtPKFxdEsYRbB39Nwxkzudxy46",
            "standard": "metaplex",
            "name": "HABIBI",
            "symbol": "HABIBI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_864YJRb3JAVARC4FNuDtPKFxdEsYRbB39Nwxkzudxy46",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://nftstorage.link/ipfs/bafkreiazuijvhrpba4nl7cvg3hephijmxgnz4qaty5j3r6pmp3hkxvli24",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CyVTd2rSEVK4LeTMtv3CFxdGc4vwFph6P1uoPnaqTVDn",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "509229.20",
            "totalSupply": "999890431511253",
            "totalSupplyFormatted": "999890431.511253",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/habibixyz_sol",
                "twitter": "https://twitter.com/habibixyz_sol",
                "website": "https://habibi.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/864YJRb3JAVARC4FNuDtPKFxdEsYRbB39Nwxkzudxy46"
            },
            "description": null
        }
    },
    "hahayes": {
        "contract_address": "rizo34MUwbCBqpSTSfnEktdWB4CTByqqYh8zBxL3WAR",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "rizo34MUwbCBqpSTSfnEktdWB4CTByqqYh8zBxL3WAR",
            "standard": "metaplex",
            "name": "HahaYes",
            "symbol": "RIZO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_rizo34MUwbCBqpSTSfnEktdWB4CTByqqYh8zBxL3WAR",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/6eVozA12v7ho62CUxXjT2ERfCKq-kv3vLOxDZvDnbQU",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "G9UZvuJpj1VcpjFSUFegHjdKwfbooRJnkeqGjjWX2fsj",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "2931961.34",
            "totalSupply": "420654424856154199",
            "totalSupplyFormatted": "420654424856.154199",
            "links": {
                "email": "rizo@hahayes.co",
                "instagram": "https://www.instagram.com/hahayessol",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/hahayesonsol",
                "tiktok": "https://www.tiktok.com/@hahayessol",
                "twitter": "https://x.com/hahayesonsol",
                "website": "https://hahayes.co/",
                "youtube": "https://www.youtube.com/channel/UCz3MlkZE3ifxVlwq4gcx0hg",
                "moralis": "https://moralis.com/chain/solana/token/price/rizo34MUwbCBqpSTSfnEktdWB4CTByqqYh8zBxL3WAR"
            },
            "description": null
        }
    },
    "hami": {
        "contract_address": "4sp2EUDrQf46rZun6sYAWzjrXwUpx2T3njuoKmV766RJ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4sp2EUDrQf46rZun6sYAWzjrXwUpx2T3njuoKmV766RJ",
            "standard": "metaplex",
            "name": "HAMI",
            "symbol": "HAMI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4sp2EUDrQf46rZun6sYAWzjrXwUpx2T3njuoKmV766RJ",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdXaJobZbiRs5TWkB3MMRxthzXwYFKmeYSVLJKjkX4vJJ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GXbqNv8PJQbT4EUoffY5cUaM2ZcjRLjjwwsF2ACrbe9s",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "900144.18",
            "totalSupply": "999689231755309341",
            "totalSupplyFormatted": "999689231.755309341",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+GdJZU7dPNGYwMmMx",
                "twitter": "https://twitter.com/hamicoinsol",
                "website": "https://hamicoin.com/",
                "youtube": "https://youtu.be/1FZemrMQZdQ",
                "moralis": "https://moralis.com/chain/solana/token/price/4sp2EUDrQf46rZun6sYAWzjrXwUpx2T3njuoKmV766RJ"
            },
            "description": null
        }
    },
    "harambe-2": {
        "contract_address": "Fch1oixTPri8zxBnmdCEADoJW2toyFHxqDZacQkwdvSP",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Fch1oixTPri8zxBnmdCEADoJW2toyFHxqDZacQkwdvSP",
            "standard": "metaplex",
            "name": "HARAMBE",
            "symbol": "HARAMBE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Fch1oixTPri8zxBnmdCEADoJW2toyFHxqDZacQkwdvSP",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreid4w525uxvn5ep4hanxrraqi2r2gbuwri6imxcovir46xqk75ttey.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GcBHigybW9ViomdK1rNXGKyBnv5EWjVhmYciZuR65XaH",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4405890.12",
            "totalSupply": "996109316550764419",
            "totalSupplyFormatted": "996109316.550764419",
            "links": {
                "email": "HARAMBESOLANA@GMAIL.COM",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/HarambeCommunity",
                "twitter": "https://twitter.com/SolanaHarambe",
                "website": "https://www.harambeonsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/Fch1oixTPri8zxBnmdCEADoJW2toyFHxqDZacQkwdvSP"
            },
            "description": null
        }
    },
    "haroldonsol": {
        "contract_address": "3vgopg7xm3EWkXfxmWPUpcf7g939hecfqg18sLuXDzVt",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3vgopg7xm3EWkXfxmWPUpcf7g939hecfqg18sLuXDzVt",
            "standard": "metaplex",
            "name": "Harold",
            "symbol": "HAROLD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3vgopg7xm3EWkXfxmWPUpcf7g939hecfqg18sLuXDzVt",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmU4g4wCVpfynhNiZkMyag69EVL7CmVdWcWtTDdgpj5MRc",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "F4AcRoSS9azzkrnGNhVzxnUx8YcdZzdVr86S8BhZx8So",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4059690.72",
            "totalSupply": "99999254129271",
            "totalSupplyFormatted": "999992541.29271",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/3vgopg7xm3EWkXfxmWPUpcf7g939hecfqg18sLuXDzVt"
            },
            "description": null
        }
    },
    "hasbulla-s-cat": {
        "contract_address": "7ZqzGzTNg5tjK1CHTBdGFHyKjBtXdfvAobuGgdt4pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7ZqzGzTNg5tjK1CHTBdGFHyKjBtXdfvAobuGgdt4pump",
            "standard": "metaplex",
            "name": "Hasbulla's Cat",
            "symbol": "BARSIK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7ZqzGzTNg5tjK1CHTBdGFHyKjBtXdfvAobuGgdt4pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmU5FYYE76s4dsLrgZuVgQPtuj4v8BeNX9EsykGsAovV8Y",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2518070.59",
            "totalSupply": "999974817701013",
            "totalSupplyFormatted": "999974817.701013",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7ZqzGzTNg5tjK1CHTBdGFHyKjBtXdfvAobuGgdt4pump"
            },
            "description": null
        }
    },
    "hawksight": {
        "contract_address": "BKipkearSqAUdNKa1WDstvcMjoPsSKBuNyvKDQDDu9WE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BKipkearSqAUdNKa1WDstvcMjoPsSKBuNyvKDQDDu9WE",
            "standard": "metaplex",
            "name": "Hawksight",
            "symbol": "HAWK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BKipkearSqAUdNKa1WDstvcMjoPsSKBuNyvKDQDDu9WE",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "305675.47",
            "totalSupply": "4999909554529274",
            "totalSupplyFormatted": "4999909554.529274",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/BKipkearSqAUdNKa1WDstvcMjoPsSKBuNyvKDQDDu9WE"
            },
            "description": null
        }
    },
    "hdoki": {
        "contract_address": "GJQpf6Zjvokd3YK5EprXqZUah9jxkn8aG4pTeWL7Gkju",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GJQpf6Zjvokd3YK5EprXqZUah9jxkn8aG4pTeWL7Gkju",
            "standard": "metaplex",
            "name": "HDOKI",
            "symbol": "OKI",
            "logo": null,
            "decimals": "9",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AqH29mZfQFgRpfwaPoTMWSKJ5kqauoc1FwVBRksZyQrt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": null,
            "totalSupply": "3999889570937000000",
            "totalSupplyFormatted": "3999889570.937",
            "links": null,
            "description": null
        }
    },
    "heeeheee": {
        "contract_address": "9dLuVbJMd4ZpTpFgmaFHAGSsFwVjtcnzFWaLAA1expHg",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9dLuVbJMd4ZpTpFgmaFHAGSsFwVjtcnzFWaLAA1expHg",
            "standard": "metaplex",
            "name": "HeeeHeee",
            "symbol": "HEEHEE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9dLuVbJMd4ZpTpFgmaFHAGSsFwVjtcnzFWaLAA1expHg",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmeAeEhvc2nraR2uLStiu77xQYXFwwoxge1Qe5ggr88ty9",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1787092.96",
            "totalSupply": "772604513406087",
            "totalSupplyFormatted": "772604513.406087",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/heeheeportal",
                "twitter": "https://twitter.com/HEEHEESolana",
                "website": "https://heehee.community/",
                "moralis": "https://moralis.com/chain/solana/token/price/9dLuVbJMd4ZpTpFgmaFHAGSsFwVjtcnzFWaLAA1expHg"
            },
            "description": null
        }
    },
    "hege": {
        "contract_address": "ULwSJmmpxmnRfpu6BjnK6rprKXqD5jXUmPpS1FxHXFy",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ULwSJmmpxmnRfpu6BjnK6rprKXqD5jXUmPpS1FxHXFy",
            "standard": "metaplex",
            "name": "Hege",
            "symbol": "HEGE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ULwSJmmpxmnRfpu6BjnK6rprKXqD5jXUmPpS1FxHXFy",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreihygg7erlybmcbfl5fzjzosuse3nkxugvi6im4sw5s2sz4a55lgmy.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HyR7GQvsN8QSgTEc6gWXL9afm1LBNN7roXGXEGK6AntQ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "7491236.14",
            "totalSupply": "999843460276759724",
            "totalSupplyFormatted": "999843460.276759724",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/hegecoin1",
                "twitter": "https://twitter.com/HegeCoin",
                "website": "https://www.hegecoin.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/ULwSJmmpxmnRfpu6BjnK6rprKXqD5jXUmPpS1FxHXFy"
            },
            "description": null
        }
    },
    "hehecat": {
        "contract_address": "BreuhVohXX5fv6q41uyb3sojtAuGoGaiAhKBMtcrpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BreuhVohXX5fv6q41uyb3sojtAuGoGaiAhKBMtcrpump",
            "standard": "metaplex",
            "name": "hehe",
            "symbol": "hehe",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BreuhVohXX5fv6q41uyb3sojtAuGoGaiAhKBMtcrpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmQYyrCmaKG1K5A3sxAewoq5QeL63oabAtLx9y8U7Ck3bD",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2379009.74",
            "totalSupply": "840603840047461",
            "totalSupplyFormatted": "840603840.047461",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/BreuhVohXX5fv6q41uyb3sojtAuGoGaiAhKBMtcrpump"
            },
            "description": null
        }
    },
    "helio-2": {
        "contract_address": "E5vSaRkSUDe3ob3KTAzXa6gmCndknzutn4hNtf2Qmoon",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "E5vSaRkSUDe3ob3KTAzXa6gmCndknzutn4hNtf2Qmoon",
            "standard": "metaplex",
            "name": "HELIO AI",
            "symbol": "HELIO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_E5vSaRkSUDe3ob3KTAzXa6gmCndknzutn4hNtf2Qmoon",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/2aQ0I3tnMgKZnqOCltfD",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1118865.49",
            "totalSupply": "933188895859765863",
            "totalSupplyFormatted": "933188895.859765863",
            "links": {
                "twitter": "https://twitter.com/Helio_fun",
                "website": "https://helio.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/E5vSaRkSUDe3ob3KTAzXa6gmCndknzutn4hNtf2Qmoon"
            },
            "description": null
        }
    },
    "helium": {
        "contract_address": "hntyVP6YFm1Hg25TN9WGLqM12b8TQmcknKrdu1oxWux",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "hntyVP6YFm1Hg25TN9WGLqM12b8TQmcknKrdu1oxWux",
            "standard": "metaplex",
            "name": "Helium Network Token",
            "symbol": "HNT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_hntyVP6YFm1Hg25TN9WGLqM12b8TQmcknKrdu1oxWux",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://shdw-drive.genesysgo.net/6tcnBSybPG7piEDShBcrVtYJDPSvGrDbVvXmXKpzBvWP/hnt.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "89oNwxpAssUhCHcMYd5zNrqGcGtW5kdPTfazTnNnRqst",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "544830888.72",
            "totalSupply": "17885648714348399",
            "totalSupplyFormatted": "178856487.14348399",
            "links": {
                "facebook": "https://www.facebook.com/heliumsystems",
                "github": "https://github.com/helium/erlang-hbbft",
                "reddit": "https://www.reddit.com/r/HeliumNetwork",
                "telegram": "https://t.me/helium_network",
                "twitter": "https://twitter.com/helium",
                "website": "https://www.helium.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/hntyVP6YFm1Hg25TN9WGLqM12b8TQmcknKrdu1oxWux"
            },
            "description": null
        }
    },
    "helium-iot": {
        "contract_address": "iotEVVZLEywoTn1QdwNPddxPWszn3zFhEot3MfL9fns",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "iotEVVZLEywoTn1QdwNPddxPWszn3zFhEot3MfL9fns",
            "standard": "metaplex",
            "name": "Helium IOT",
            "symbol": "IOT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_iotEVVZLEywoTn1QdwNPddxPWszn3zFhEot3MfL9fns",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://shdw-drive.genesysgo.net/6tcnBSybPG7piEDShBcrVtYJDPSvGrDbVvXmXKpzBvWP/iot.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "89oNwxpAssUhCHcMYd5zNrqGcGtW5kdPTfazTnNnRqst",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "11877501.43",
            "totalSupply": "25756264616033735",
            "totalSupplyFormatted": "25756264616.033735",
            "links": {
                "discord": "https://discord.com/invite/helium",
                "github": "https://github.com/helium",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/helium_network",
                "twitter": "https://twitter.com/helium",
                "website": "https://www.helium.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/iotEVVZLEywoTn1QdwNPddxPWszn3zFhEot3MfL9fns"
            },
            "description": null
        }
    },
    "helium-mobile": {
        "contract_address": "mb1eu7TzEc71KxDpsmsKoucSSuuoGLv1drys1oP2jh6",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "mb1eu7TzEc71KxDpsmsKoucSSuuoGLv1drys1oP2jh6",
            "standard": "metaplex",
            "name": "Helium Mobile",
            "symbol": "MOBILE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_mb1eu7TzEc71KxDpsmsKoucSSuuoGLv1drys1oP2jh6",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://shdw-drive.genesysgo.net/6tcnBSybPG7piEDShBcrVtYJDPSvGrDbVvXmXKpzBvWP/mobile.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "89oNwxpAssUhCHcMYd5zNrqGcGtW5kdPTfazTnNnRqst",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "39434840.47",
            "totalSupply": "90239909551729340",
            "totalSupplyFormatted": "90239909551.72934",
            "links": {
                "discord": "https://discord.com/invite/helium",
                "github": "https://github.com/helium",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/helium_network",
                "twitter": "https://twitter.com/helium",
                "website": "https://www.helium.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/mb1eu7TzEc71KxDpsmsKoucSSuuoGLv1drys1oP2jh6"
            },
            "description": null
        }
    },
    "hermy-the-stallion": {
        "contract_address": "FBhF2pcytFSTcTzQWCxisLCyrYDqmRZDu4mrGp1Spump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FBhF2pcytFSTcTzQWCxisLCyrYDqmRZDu4mrGp1Spump",
            "standard": "metaplex",
            "name": "Hermy The Stallion",
            "symbol": "Hermy",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FBhF2pcytFSTcTzQWCxisLCyrYDqmRZDu4mrGp1Spump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmR1iGnBX1rCB3jSbgpZRQZoVdMAVXh1vrrU3Pykbaw58h",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "107032.75",
            "totalSupply": "999988324083927",
            "totalSupplyFormatted": "999988324.083927",
            "links": {
                "telegram": "https://t.me/hermyfam",
                "twitter": "https://twitter.com/HermyCoin",
                "website": "https://hermyonsol.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/FBhF2pcytFSTcTzQWCxisLCyrYDqmRZDu4mrGp1Spump"
            },
            "description": null
        }
    },
    "hibernates": {
        "contract_address": "FHKiJEg2zmhv9DEeaXMSZa7R4P8BPFX5VTRrzrtJpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FHKiJEg2zmhv9DEeaXMSZa7R4P8BPFX5VTRrzrtJpump",
            "standard": "metaplex",
            "name": "Hibernates",
            "symbol": "HIBER",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FHKiJEg2zmhv9DEeaXMSZa7R4P8BPFX5VTRrzrtJpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSyF68hCfQJnzYCRsiN2Fq9JoBL16RAHGGRhmxC4gTrfM",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1697116.33",
            "totalSupply": "999947757898241",
            "totalSupplyFormatted": "999947757.898241",
            "links": {
                "twitter": "https://twitter.com/hibernates_ai",
                "website": "https://www.hibernates.world",
                "moralis": "https://moralis.com/chain/solana/token/price/FHKiJEg2zmhv9DEeaXMSZa7R4P8BPFX5VTRrzrtJpump"
            },
            "description": null
        }
    },
    "hiero-terminal": {
        "contract_address": "BDW8YHasD3NSDjSHU9Xy6KXtshGayMGQfj5bJpLcpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BDW8YHasD3NSDjSHU9Xy6KXtshGayMGQfj5bJpLcpump",
            "standard": "metaplex",
            "name": "Hiero Terminal",
            "symbol": "HTERM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BDW8YHasD3NSDjSHU9Xy6KXtshGayMGQfj5bJpLcpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSq5UraNnYFwMg7QMj4puWNYHQwQubRD4hHgJMkPpdM9u",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "899613.30",
            "totalSupply": "812676428228395",
            "totalSupplyFormatted": "812676428.228395",
            "links": {
                "github": "https://github.com/hiero-ai",
                "telegram": "https://t.me/hiero_ai",
                "twitter": "https://twitter.com/HieroTerminal",
                "website": "https://hiero.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/BDW8YHasD3NSDjSHU9Xy6KXtshGayMGQfj5bJpLcpump"
            },
            "description": null
        }
    },
    "hive-ai": {
        "contract_address": "9DHe3pycTuymFk4H4bbPoAJ4hQrr2kaLDF6J6aAKpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9DHe3pycTuymFk4H4bbPoAJ4hQrr2kaLDF6J6aAKpump",
            "standard": "metaplex",
            "name": "Hive AI",
            "symbol": "BUZZ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9DHe3pycTuymFk4H4bbPoAJ4hQrr2kaLDF6J6aAKpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSFQBymoaw6KpiioGhBRdrwWQ6UEh1sULbrjEvpqqXvSB",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "13273604.31",
            "totalSupply": "999864584938457",
            "totalSupplyFormatted": "999864584.938457",
            "links": {
                "discord": "https://discord.gg/8TVcFvySWG",
                "reddit": "https://www.reddit.com",
                "twitter": "https://x.com/askthehive_ai",
                "website": "https://www.askthehive.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/9DHe3pycTuymFk4H4bbPoAJ4hQrr2kaLDF6J6aAKpump"
            },
            "description": null
        }
    },
    "hivello": {
        "contract_address": "Gdck9KXSSiMMhNyjUjo4sVT1GDzeZnZP2yse9jhax3GR",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Gdck9KXSSiMMhNyjUjo4sVT1GDzeZnZP2yse9jhax3GR",
            "standard": "metaplex",
            "name": "Hivello",
            "symbol": "HVLO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Gdck9KXSSiMMhNyjUjo4sVT1GDzeZnZP2yse9jhax3GR",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://static.hivello.com/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DfoVVkd3u5Uc4USZbWGH4r9GRrEaYy6fA7zmTdJ5maU7",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "20143360.78",
            "totalSupply": "999987627724931263",
            "totalSupplyFormatted": "9999876277.24931263",
            "links": {
                "discord": "https://discord.com/invite/hivello",
                "telegram": "https://t.me/hivello_official",
                "twitter": "https://twitter.com/HivelloOfficial",
                "website": "https://www.hivello.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/Gdck9KXSSiMMhNyjUjo4sVT1GDzeZnZP2yse9jhax3GR"
            },
            "description": null
        }
    },
    "hivemapper": {
        "contract_address": "4vMsoUT2BWatFweudnQM1xedRLfJgJ7hswhcpz4xgBTy",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4vMsoUT2BWatFweudnQM1xedRLfJgJ7hswhcpz4xgBTy",
            "standard": "metaplex",
            "name": "HONEY",
            "symbol": "HONEY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4vMsoUT2BWatFweudnQM1xedRLfJgJ7hswhcpz4xgBTy",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/C9-GeGpOCn2MyR188zvDouICdXkFB88sML-rd2vl4Xo",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7VhQVr8M2Dpdwp4QzzQB7EpvANtMMjv7gwpBHCrV3U2A",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "253220544.81",
            "totalSupply": "6416909607840687227",
            "totalSupplyFormatted": "6416909607.840687227",
            "links": {
                "discord": "https://discord.com/invite/FRWMKyy5v2",
                "github": "https://github.com/hivemapper",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+UnMYghleJYQwOGEx",
                "twitter": "https://twitter.com/Hivemapper",
                "website": "https://hivemapper.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/4vMsoUT2BWatFweudnQM1xedRLfJgJ7hswhcpz4xgBTy"
            },
            "description": null
        }
    },
    "hog-2": {
        "contract_address": "13qAYdft265v36MFbFKSANKo2whvGb6s3ZhpJqQWsump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "13qAYdft265v36MFbFKSANKo2whvGb6s3ZhpJqQWsump",
            "standard": "metaplex",
            "name": "Hog",
            "symbol": "HOG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_13qAYdft265v36MFbFKSANKo2whvGb6s3ZhpJqQWsump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmYENc2yzK4TVtbLQLgFpWHPWkiN23wB6DBYJP9riqzEUp",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "63264.32",
            "totalSupply": "999878572550357",
            "totalSupplyFormatted": "999878572.550357",
            "links": {
                "email": "traderbarli@gmail.com",
                "telegram": "https://t.me/HOGCOINSOL",
                "twitter": "https://x.com/HOGCOINSOL",
                "website": "https://hogonsolana.fun",
                "moralis": "https://moralis.com/chain/solana/token/price/13qAYdft265v36MFbFKSANKo2whvGb6s3ZhpJqQWsump"
            },
            "description": null
        }
    },
    "holozone": {
        "contract_address": "B8hCuoikV9gLeuwmTyhNdLbPnb5k3P77Q7WTtEM7pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "B8hCuoikV9gLeuwmTyhNdLbPnb5k3P77Q7WTtEM7pump",
            "standard": "metaplex",
            "name": "Holozone",
            "symbol": "HOLO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_B8hCuoikV9gLeuwmTyhNdLbPnb5k3P77Q7WTtEM7pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWGUW1q41XxU4erKN8tRPbVFhJDWefrjz1WRCWU3S6uaz",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "512717.17",
            "totalSupply": "975005116303108",
            "totalSupplyFormatted": "975005116.303108",
            "links": {
                "telegram": "https://t.me/holozoneofficial",
                "twitter": "https://twitter.com/HolozoneAI",
                "website": "https://holozone.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/B8hCuoikV9gLeuwmTyhNdLbPnb5k3P77Q7WTtEM7pump"
            },
            "description": null
        }
    },
    "homebrew-robotics-club": {
        "contract_address": "2hXQn7nJbh2XFTxvtyKb5mKfnScuoiC1Sm8rnWydpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2hXQn7nJbh2XFTxvtyKb5mKfnScuoiC1Sm8rnWydpump",
            "standard": "metaplex",
            "name": "Homebrew Robotics Club",
            "symbol": "BREW",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2hXQn7nJbh2XFTxvtyKb5mKfnScuoiC1Sm8rnWydpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQPyqztyXwskeaiVZF1qazdw85hF85Kw7Wu5C2SvrC8PG",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3074868.41",
            "totalSupply": "999957205187673",
            "totalSupplyFormatted": "999957205.187673",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/2hXQn7nJbh2XFTxvtyKb5mKfnScuoiC1Sm8rnWydpump"
            },
            "description": null
        }
    },
    "homo-memetus": {
        "contract_address": "7Uuzh9JwqF8z3u6MWpQuQJbpD1u46xPDY6PGjwfwTh4o",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7Uuzh9JwqF8z3u6MWpQuQJbpD1u46xPDY6PGjwfwTh4o",
            "standard": "metaplex",
            "name": "Homo Memetus",
            "symbol": "HOMO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7Uuzh9JwqF8z3u6MWpQuQJbpD1u46xPDY6PGjwfwTh4o",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVnbz5Jf2JSppcZ53d4XaWnwqd3q8VUjQXdR5mrdFDvLX",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "359652.85",
            "totalSupply": "999968999565984",
            "totalSupplyFormatted": "999968999.565984",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7Uuzh9JwqF8z3u6MWpQuQJbpD1u46xPDY6PGjwfwTh4o"
            },
            "description": null
        }
    },
    "honest-mining": {
        "contract_address": "hnstrzJNEeY2QoyD5D6T48kw2xYmYHwVgT61Hm5BahJ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "hnstrzJNEeY2QoyD5D6T48kw2xYmYHwVgT61Hm5BahJ",
            "standard": "metaplex",
            "name": "Honest",
            "symbol": "HNST",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_hnstrzJNEeY2QoyD5D6T48kw2xYmYHwVgT61Hm5BahJ",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/viET4idRKcUERJ6NMFiYr9yNRX_5nZ4jfZOIc3tepzI",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "bossFCmGYKbtaso1keVRZoNeiW3xggtrzyjy3cWxhgN",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1141922.22",
            "totalSupply": "399999936600303",
            "totalSupplyFormatted": "399999936.600303",
            "links": {
                "facebook": "https://www.facebook.com/usenobi",
                "github": "https://github.com/honestmining/hnst",
                "medium": "https://medium.com/@honestmining",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/hnstmoney",
                "twitter": "https://twitter.com/hnstmoney",
                "website": "https://hnst.money",
                "moralis": "https://moralis.com/chain/solana/token/price/hnstrzJNEeY2QoyD5D6T48kw2xYmYHwVgT61Hm5BahJ"
            },
            "description": null
        }
    },
    "honeyland-honey": {
        "contract_address": "3dgCCb15HMQSA4Pn3Tfii5vRk7aRqTH95LJjxzsG2Mug",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3dgCCb15HMQSA4Pn3Tfii5vRk7aRqTH95LJjxzsG2Mug",
            "standard": "metaplex",
            "name": "Honeyland",
            "symbol": "HXD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3dgCCb15HMQSA4Pn3Tfii5vRk7aRqTH95LJjxzsG2Mug",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/8wmJgx5GqrnEPWiOKKVg4un2Cd_1s3SBlLAMoBXObgQ",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "D3yrBpL3ZgLEVWYt4Q5QGKdTqsp7PLtW3KtBm87ahGxR",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8364534.34",
            "totalSupply": "982393488621183069",
            "totalSupplyFormatted": "982393488.621183069",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/3dgCCb15HMQSA4Pn3Tfii5vRk7aRqTH95LJjxzsG2Mug"
            },
            "description": null
        }
    },
    "honk": {
        "contract_address": "3ag1Mj9AKz9FAkCQ6gAEhpLSX8B2pUbPdkb9iBsDLZNB",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3ag1Mj9AKz9FAkCQ6gAEhpLSX8B2pUbPdkb9iBsDLZNB",
            "standard": "metaplex",
            "name": "Honk",
            "symbol": "HONK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3ag1Mj9AKz9FAkCQ6gAEhpLSX8B2pUbPdkb9iBsDLZNB",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreidlg62jgcw2es2pgqm6an6k2iyv3lmv6b2hvicgjzlofc276hzjei.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "6NgoyRMJ5H1hdQtRUmE7wRFVogXxXH1aoHSy2acZaEi6",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "891059.59",
            "totalSupply": "999936702670753691",
            "totalSupplyFormatted": "999936702.670753691",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/honk_sol",
                "twitter": "https://x.com/honk_sol",
                "website": "https://honk.lol/",
                "moralis": "https://moralis.com/chain/solana/token/price/3ag1Mj9AKz9FAkCQ6gAEhpLSX8B2pUbPdkb9iBsDLZNB"
            },
            "description": null
        }
    },
    "hop-cat": {
        "contract_address": "ECZxKmKGEkyKhYUau7WkUE1L9Jp2yLebwX4SnKc1pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ECZxKmKGEkyKhYUau7WkUE1L9Jp2yLebwX4SnKc1pump",
            "standard": "metaplex",
            "name": "hop cat",
            "symbol": "hop",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ECZxKmKGEkyKhYUau7WkUE1L9Jp2yLebwX4SnKc1pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPMo88Li8WCQHMZcgZ54nLDbDGjnthDNqbUkEj1gv4jrc",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "198309.58",
            "totalSupply": "999886936564454",
            "totalSupplyFormatted": "999886936.564454",
            "links": {
                "telegram": "https://t.me/hopcatxoxo",
                "twitter": "https://twitter.com/hopcat__",
                "website": "https://hopcat.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/ECZxKmKGEkyKhYUau7WkUE1L9Jp2yLebwX4SnKc1pump"
            },
            "description": null
        }
    },
    "hubble": {
        "contract_address": "HBB111SCo9jkCejsZfz8Ec8nH7T6THF8KEKSnvwT6XK6",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HBB111SCo9jkCejsZfz8Ec8nH7T6THF8KEKSnvwT6XK6",
            "standard": "metaplex",
            "name": "Hubble Protocol Token",
            "symbol": "HBB",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HBB111SCo9jkCejsZfz8Ec8nH7T6THF8KEKSnvwT6XK6",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "588262.17",
            "totalSupply": "68793911361546",
            "totalSupplyFormatted": "68793911.361546",
            "links": {
                "discord": "https://discord.gg/gPWPDCRcej",
                "telegram": "https://t.me/hubbleprotocol",
                "twitter": "https://twitter.com/hubbleprotocol",
                "website": "https://hubbleprotocol.io/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/HBB111SCo9jkCejsZfz8Ec8nH7T6THF8KEKSnvwT6XK6"
            },
            "description": null
        }
    },
    "hund": {
        "contract_address": "2XPqoKfJitk8YcMDGBKy7CMzRRyF2X9PniZeCykDUZev",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2XPqoKfJitk8YcMDGBKy7CMzRRyF2X9PniZeCykDUZev",
            "standard": "metaplex",
            "name": "HUND",
            "symbol": "HUND",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2XPqoKfJitk8YcMDGBKy7CMzRRyF2X9PniZeCykDUZev",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRdf3daG9wDw8S36d963ghe1sp9KxNiYqPfsRrXZGYNTe",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "F33daPxvPBdnjsZuQzUahaAqkM2UQgQTjfnWKy6M8o4v",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1511718.24",
            "totalSupply": "399995300954208951",
            "totalSupplyFormatted": "399995300.954208951",
            "links": {
                "discord": "https://discord.gg/HundOnSol",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/hundcoin",
                "twitter": "https://x.com/hundonsol",
                "website": "https://www.hundonsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/2XPqoKfJitk8YcMDGBKy7CMzRRyF2X9PniZeCykDUZev"
            },
            "description": null
        }
    },
    "hype3-cool": {
        "contract_address": "9iQFnxrDDMFrhLx2pYJCDeqN3wFuaBimQkUnZQHNpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9iQFnxrDDMFrhLx2pYJCDeqN3wFuaBimQkUnZQHNpump",
            "standard": "metaplex",
            "name": "HYPE3.cool",
            "symbol": "COOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9iQFnxrDDMFrhLx2pYJCDeqN3wFuaBimQkUnZQHNpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXgt4gtTD61GRH7MgMwaJdnJxamRTyFSH5S4b1KcZgCu1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1089043.81",
            "totalSupply": "999964936346863",
            "totalSupplyFormatted": "999964936.346863",
            "links": {
                "github": "https://github.com/hype3cool/hype3-ai-agents/",
                "telegram": "https://t.me/hype3dotcool",
                "twitter": "https://twitter.com/hype3dotcool",
                "website": "https://hype3.cool/",
                "moralis": "https://moralis.com/chain/solana/token/price/9iQFnxrDDMFrhLx2pYJCDeqN3wFuaBimQkUnZQHNpump"
            },
            "description": null
        }
    },
    "hyperfy": {
        "contract_address": "8vBMibwpn8wpfYKbQ9xqzodymg3LjmYec2tSNGRy23K8",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8vBMibwpn8wpfYKbQ9xqzodymg3LjmYec2tSNGRy23K8",
            "standard": "metaplex",
            "name": "Hyperfy",
            "symbol": "HYPER",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8vBMibwpn8wpfYKbQ9xqzodymg3LjmYec2tSNGRy23K8",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "ENqzy3TnEhk9or8AgnSe6gdxSa7Dz8Lu9NB2GTSgXm94",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8818607.69",
            "totalSupply": "999973204006109",
            "totalSupplyFormatted": "999973204.006109",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8vBMibwpn8wpfYKbQ9xqzodymg3LjmYec2tSNGRy23K8"
            },
            "description": null
        }
    },
    "hyperskids": {
        "contract_address": "GwkEDwePTa6aFosh9xzAniGK1zvLrQ5yPJfLnqwmuyhG",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GwkEDwePTa6aFosh9xzAniGK1zvLrQ5yPJfLnqwmuyhG",
            "standard": "metaplex",
            "name": "$HYPERSKIDS",
            "symbol": "HYPERSKIDS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GwkEDwePTa6aFosh9xzAniGK1zvLrQ5yPJfLnqwmuyhG",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/3MpJ3Tp4eqEq4eZtN9dZvztiehH8GfjuzUFBPM9DJxX1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "29Eb91TtwhSC8GLTAeAqHTcy8pXtZvnYxrrNa8u6ev7q",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "14457062.87",
            "totalSupply": "999987402024632",
            "totalSupplyFormatted": "999987402.024632",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/GwkEDwePTa6aFosh9xzAniGK1zvLrQ5yPJfLnqwmuyhG"
            },
            "description": null
        }
    },
    "iiii-lovvv-youuuu": {
        "contract_address": "GJLiErro8cbWeDngDMWJug9dkwwckYZg4Lvb79F3pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GJLiErro8cbWeDngDMWJug9dkwwckYZg4Lvb79F3pump",
            "standard": "metaplex",
            "name": "iiii lovvv yuuuu",
            "symbol": "ily",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GJLiErro8cbWeDngDMWJug9dkwwckYZg4Lvb79F3pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmVbET3vzpsRxhVgujLXfvnny3m2SgEidGw6QLSTv2M9dv",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "274363.36",
            "totalSupply": "965269443877951",
            "totalSupplyFormatted": "965269443.877951",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/GJLiErro8cbWeDngDMWJug9dkwwckYZg4Lvb79F3pump"
            },
            "description": null
        }
    },
    "in-the-meme-time": {
        "contract_address": "AATECgWF4KjALbpgUXjabqFKHmdtjWdfdFNzCH3ipump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AATECgWF4KjALbpgUXjabqFKHmdtjWdfdFNzCH3ipump",
            "standard": "metaplex",
            "name": "In The MEME-Time",
            "symbol": "ITMT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AATECgWF4KjALbpgUXjabqFKHmdtjWdfdFNzCH3ipump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmNRduq9k7QpucgbvJ6WJLkernDnwC3WgXZ6Q1XrUQxY8V",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1366221.05",
            "totalSupply": "999966370745216",
            "totalSupplyFormatted": "999966370.745216",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/AATECgWF4KjALbpgUXjabqFKHmdtjWdfdFNzCH3ipump"
            },
            "description": null
        }
    },
    "incinerator": {
        "contract_address": "A8vTTQXH5qPHazNmEGrBnBvk2XYkj1i4e5AMVVN5aC44",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "A8vTTQXH5qPHazNmEGrBnBvk2XYkj1i4e5AMVVN5aC44",
            "standard": "metaplex",
            "name": "INCINERATOR",
            "symbol": "INC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_A8vTTQXH5qPHazNmEGrBnBvk2XYkj1i4e5AMVVN5aC44",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://i.degencdn.com/ipfs/bafkreifjdrf73pzdu5tmi6i2usyqdzdsjwpjyjjipwlpn6gbfwsi5l6arm",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "229527.96",
            "totalSupply": "619037493692317",
            "totalSupplyFormatted": "619037493.692317",
            "links": {
                "email": "Incinerator259@gmail.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/incineratorCTO",
                "twitter": "https://x.com/IncineratorSOL",
                "website": "https://www.incineratorsol.fun",
                "moralis": "https://moralis.com/chain/solana/token/price/A8vTTQXH5qPHazNmEGrBnBvk2XYkj1i4e5AMVVN5aC44"
            },
            "description": null
        }
    },
    "inf": {
        "contract_address": "HsBG6WGhbHYwyknCqDSZ27edyCWk1aPSVmmSYginhDhp",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HsBG6WGhbHYwyknCqDSZ27edyCWk1aPSVmmSYginhDhp",
            "standard": "metaplex",
            "name": "inf++",
            "symbol": "inf++",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HsBG6WGhbHYwyknCqDSZ27edyCWk1aPSVmmSYginhDhp",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://i.degencdn.com/ipfs/bafkreifbfftkpwrkhpjiaroeetgkehugj4usav4rhxjjbjkwcm2iuoexvm",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FK5odhCycBgJjTws8i4AAFannhmbhao6KYzN6BEf5dDE",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "213762.35",
            "totalSupply": "660339148709882",
            "totalSupplyFormatted": "660339148.709882",
            "links": {
                "github": "https://github.com/staccDOTsol",
                "telegram": "https://t.me/infplusplus",
                "twitter": "https://twitter.com/inf_plusplus",
                "website": "https://v0-duney.vercel.app/",
                "moralis": "https://moralis.com/chain/solana/token/price/HsBG6WGhbHYwyknCqDSZ27edyCWk1aPSVmmSYginhDhp"
            },
            "description": null
        }
    },
    "infinite-btc-reward": {
        "contract_address": "5G7xzLhXSrLaw8utPNAada8WPdQPZ4Dm6sddhuUckibr",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5G7xzLhXSrLaw8utPNAada8WPdQPZ4Dm6sddhuUckibr",
            "standard": "metaplex",
            "name": "Infinite BTC Reward",
            "symbol": "IBR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5G7xzLhXSrLaw8utPNAada8WPdQPZ4Dm6sddhuUckibr",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.bytesto.net/ipfs/QmSv27hYBuhutzhzkzXjhActgo5jYXZVPzw68omDreH96F",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AYgm1NNAUzG1HXjen34Zz5kNEJKyfs9rYH2hi66G3Eo6",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "264927.01",
            "totalSupply": "999588762048770",
            "totalSupplyFormatted": "999588762.04877",
            "links": {
                "telegram": "https://t.me/infinitebtcrewardSOLANA",
                "twitter": "https://x.com/IBRrewards",
                "website": "https://ibr.money",
                "moralis": "https://moralis.com/chain/solana/token/price/5G7xzLhXSrLaw8utPNAada8WPdQPZ4Dm6sddhuUckibr"
            },
            "description": null
        }
    },
    "infinite-money-glitch": {
        "contract_address": "znv3FZt2HFAvzYf5LxzVyryh3mBXWuTRRng25gEZAjh",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "znv3FZt2HFAvzYf5LxzVyryh3mBXWuTRRng25gEZAjh",
            "standard": "metaplex",
            "name": "Infinite Money Glitch",
            "symbol": "IMG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_znv3FZt2HFAvzYf5LxzVyryh3mBXWuTRRng25gEZAjh",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://i.degencdn.com/ipfs/bafkreidh5jnc7d7rqqnzyh5wvbprki4kmsyw7vg7xo5g4np72lcyxpvzjy",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6834490.55",
            "totalSupply": "999903959291390",
            "totalSupplyFormatted": "999903959.29139",
            "links": {
                "telegram": "https://t.me/infinitemoneyglitchSOLANA",
                "twitter": "https://twitter.com/imgrewards",
                "website": "https://www.img.money/",
                "moralis": "https://moralis.com/chain/solana/token/price/znv3FZt2HFAvzYf5LxzVyryh3mBXWuTRRng25gEZAjh"
            },
            "description": null
        }
    },
    "international-stable-currency": {
        "contract_address": "J9BcrQfX4p9D1bvLzRNCbMDv8f44a9LFdeqNE4Yk2WMD",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "J9BcrQfX4p9D1bvLzRNCbMDv8f44a9LFdeqNE4Yk2WMD",
            "standard": "metaplex",
            "name": "International Stable Currency",
            "symbol": "ISC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_J9BcrQfX4p9D1bvLzRNCbMDv8f44a9LFdeqNE4Yk2WMD",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://raw.githubusercontent.com/theISCTeam/isc_meta/master/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FUPe37ryYxB2J8Ckvq3pzpw7EMahYyeT8WtzJqh3Ge3f",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2072216.48",
            "totalSupply": "1116472489325",
            "totalSupplyFormatted": "1116472.489325",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/J9BcrQfX4p9D1bvLzRNCbMDv8f44a9LFdeqNE4Yk2WMD"
            },
            "description": null
        }
    },
    "investin": {
        "contract_address": "iVNcrNE9BRZBC9Aqf753iZiZfbszeAVUoikgT9yvr2a",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "iVNcrNE9BRZBC9Aqf753iZiZfbszeAVUoikgT9yvr2a",
            "standard": "metaplex",
            "name": "Investin Protocol",
            "symbol": "IVN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_iVNcrNE9BRZBC9Aqf753iZiZfbszeAVUoikgT9yvr2a",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AqH29mZfQFgRpfwaPoTMWSKJ5kqauoc1FwVBRksZyQrt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1083922.82",
            "totalSupply": "8999965274838",
            "totalSupplyFormatted": "8999965.274838",
            "links": {
                "discord": "https://discord.com/invite/Yf54h9B",
                "github": "https://github.com/Investin-pro",
                "medium": "https://medium.com/investin-pro",
                "reddit": "https://www.reddit.com/r/Investin/",
                "telegram": "https://t.me/Investin_pro1",
                "twitter": "https://twitter.com/Investin_pro",
                "website": "https://www.investin.pro/",
                "moralis": "https://moralis.com/chain/solana/token/price/iVNcrNE9BRZBC9Aqf753iZiZfbszeAVUoikgT9yvr2a"
            },
            "description": null
        }
    },
    "io": {
        "contract_address": "BZLbGTNCSFfoth2GYDtwr7e4imWzpR5jqcUuGEwr646K",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BZLbGTNCSFfoth2GYDtwr7e4imWzpR5jqcUuGEwr646K",
            "standard": "metaplex",
            "name": "IO",
            "symbol": "IO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BZLbGTNCSFfoth2GYDtwr7e4imWzpR5jqcUuGEwr646K",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://bafkreia7wgtezdenut5hwkshk7gaktthslzq47gorg2r4tccnza4nvusxy.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HtoGSZo5FWTETd2jun2UwfDGSbpP4kHE4PNDPJ2xRfEe",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "870140099.74",
            "totalSupply": "79999998137099986",
            "totalSupplyFormatted": "799999981.37099986",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/ionet",
                "website": "https://io.net",
                "moralis": "https://moralis.com/chain/solana/token/price/BZLbGTNCSFfoth2GYDtwr7e4imWzpR5jqcUuGEwr646K"
            },
            "description": null
        }
    },
    "iq50": {
        "contract_address": "21rweMLGYeMNonHW7H3xa5py17X6ZFRcHirCp9inRBQA",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "21rweMLGYeMNonHW7H3xa5py17X6ZFRcHirCp9inRBQA",
            "standard": "metaplex",
            "name": "IQ50",
            "symbol": "IQ50",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_21rweMLGYeMNonHW7H3xa5py17X6ZFRcHirCp9inRBQA",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/4-FdAQk6iRb6HkjL0qSlUczMxVE_LXn2U_4mkbGIMxo",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5PuG9EmzDtaJS4AYnpYHNCmwwgVsedx1AxVZsWS1N1bH",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "813128.14",
            "totalSupply": "504735036611867911",
            "totalSupplyFormatted": "504735036611.867911",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/21rweMLGYeMNonHW7H3xa5py17X6ZFRcHirCp9inRBQA"
            },
            "description": null
        }
    },
    "iq6900": {
        "contract_address": "AsyfR3e5JcPqWot4H5MMhQUm7DZ4zwQrcp2zbB7vpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AsyfR3e5JcPqWot4H5MMhQUm7DZ4zwQrcp2zbB7vpump",
            "standard": "metaplex",
            "name": "IQ6900",
            "symbol": "IQ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AsyfR3e5JcPqWot4H5MMhQUm7DZ4zwQrcp2zbB7vpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRdryvuKYS9QoSFUopdZR98DAyAqFzW9aFs8FG5c8BM7D",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3592364.22",
            "totalSupply": "999097570349096",
            "totalSupplyFormatted": "999097570.349096",
            "links": {
                "telegram": "https://t.me/portalforiq6900",
                "twitter": "https://x.com/IQ6900_",
                "website": "https://iq6900.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/AsyfR3e5JcPqWot4H5MMhQUm7DZ4zwQrcp2zbB7vpump"
            },
            "description": null
        }
    },
    "isaac-x": {
        "contract_address": "C19Q2Mvr1icQVxQJWpDTVDJjLTzAcXbUt3bPmBsYpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "C19Q2Mvr1icQVxQJWpDTVDJjLTzAcXbUt3bPmBsYpump",
            "standard": "metaplex",
            "name": "Isaac X",
            "symbol": "isaacx",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_C19Q2Mvr1icQVxQJWpDTVDJjLTzAcXbUt3bPmBsYpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUTb9URDnAP2JrRKGEKwwJxtSSK3gKYbs8zCpzaBYwcrK",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "642824.46",
            "totalSupply": "999960270474910",
            "totalSupplyFormatted": "999960270.47491",
            "links": {
                "github": "https://github.com/eimenhmdt",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/isaaceditorportal",
                "twitter": "https://twitter.com/Isaaceditor_",
                "website": "https://www.isaaceditor.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/C19Q2Mvr1icQVxQJWpDTVDJjLTzAcXbUt3bPmBsYpump"
            },
            "description": null
        }
    },
    "jailbreakme": {
        "contract_address": "8cNmp9T2CMQRNZhNRoeSvr57LDf1kbZ42SvgsSWfpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8cNmp9T2CMQRNZhNRoeSvr57LDf1kbZ42SvgsSWfpump",
            "standard": "metaplex",
            "name": "JailbreakMe",
            "symbol": "JAIL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8cNmp9T2CMQRNZhNRoeSvr57LDf1kbZ42SvgsSWfpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmc6TYPc25VT4thWcwsq8YS6EfHwsLmPZJGXECVt7tbU57",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1003316.17",
            "totalSupply": "999962297219633",
            "totalSupplyFormatted": "999962297.219633",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/jailbreakme_xyz",
                "twitter": "https://x.com/jailbreakme_xyz",
                "website": "https://jailbreakme.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/8cNmp9T2CMQRNZhNRoeSvr57LDf1kbZ42SvgsSWfpump"
            },
            "description": null
        }
    },
    "jambo": {
        "contract_address": "Jambjx1oJoZNBZiqbiF9TqgatEZPdyfvYa9WVsKNzUh",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Jambjx1oJoZNBZiqbiF9TqgatEZPdyfvYa9WVsKNzUh",
            "standard": "metaplex",
            "name": "Jambo",
            "symbol": "J",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Jambjx1oJoZNBZiqbiF9TqgatEZPdyfvYa9WVsKNzUh",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://metadata.jambo.technology",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "6JhBXfJ39UtStB5Zi2GztNcF33CMye1PHrCL8pFXMEyw",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "276292295.79",
            "totalSupply": "999999774854458228",
            "totalSupplyFormatted": "999999774.854458228",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/jambotechnology",
                "twitter": "https://twitter.com/JamboTechnology",
                "website": "https://www.jambo.technology/",
                "moralis": "https://moralis.com/chain/solana/token/price/Jambjx1oJoZNBZiqbiF9TqgatEZPdyfvYa9WVsKNzUh"
            },
            "description": null
        }
    },
    "jellffishcoin": {
        "contract_address": "GFreY9SAUz96P7qkF19A4dtA4TmZgtL9Gmu8gV9Kpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GFreY9SAUz96P7qkF19A4dtA4TmZgtL9Gmu8gV9Kpump",
            "standard": "metaplex",
            "name": "JellfFishCoin",
            "symbol": "Jellyfc",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GFreY9SAUz96P7qkF19A4dtA4TmZgtL9Gmu8gV9Kpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmP2Us7oucvuvW6uUkBrvBsWLv5cyG8vxWjHmkUty7Xo5m",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "250077.73",
            "totalSupply": "999986921057696",
            "totalSupplyFormatted": "999986921.057696",
            "links": {
                "twitter": "https://twitter.com/CoinJellyf54307",
                "website": "https://www.jellyfc.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/GFreY9SAUz96P7qkF19A4dtA4TmZgtL9Gmu8gV9Kpump"
            },
            "description": null
        }
    },
    "jelly-my-jelly": {
        "contract_address": "FeR8VBqNRSUD5NtXAj2n3j1dAHkZHfyDktKuLXD4pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FeR8VBqNRSUD5NtXAj2n3j1dAHkZHfyDktKuLXD4pump",
            "standard": "metaplex",
            "name": "jelly-my-jelly",
            "symbol": "jellyjelly",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FeR8VBqNRSUD5NtXAj2n3j1dAHkZHfyDktKuLXD4pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRaah2aa24T3F2hGQCf8XefSuaNFZM2wGx2W2UnsxfLxM",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "7779371.90",
            "totalSupply": "999980448726549",
            "totalSupplyFormatted": "999980448.726549",
            "links": {
                "reddit": "https://www.reddit.com",
                "website": "https://www.jellyjelly.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/FeR8VBqNRSUD5NtXAj2n3j1dAHkZHfyDktKuLXD4pump"
            },
            "description": null
        }
    },
    "jen-hsun-huang": {
        "contract_address": "C2nneybCJP2i6mk6Nu6SfTcxoNXNLjngnzwDgje2eNrr",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "C2nneybCJP2i6mk6Nu6SfTcxoNXNLjngnzwDgje2eNrr",
            "standard": "metaplex",
            "name": " Jen-Hsun Huang",
            "symbol": "JHH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_C2nneybCJP2i6mk6Nu6SfTcxoNXNLjngnzwDgje2eNrr",
            "decimals": "3",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYR9JpFggacSV2Ndo4K81LTxdsnQcD9SHtCkdKQKLsc6H",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FMqmmmNfbH3rh8MYs8keADVPC1qCY66oLgTEJ6nMoMvu",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "856553.11",
            "totalSupply": "9909714509586562",
            "totalSupplyFormatted": "9909714509586.562",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/C2nneybCJP2i6mk6Nu6SfTcxoNXNLjngnzwDgje2eNrr"
            },
            "description": null
        }
    },
    "jeo-boden": {
        "contract_address": "3psH1Mj1f7yUfaD5gh6Zj7epE8hhrMkMETgv5TshQA4o",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3psH1Mj1f7yUfaD5gh6Zj7epE8hhrMkMETgv5TshQA4o",
            "standard": "metaplex",
            "name": "jeo boden",
            "symbol": "boden",
            "logo": "https://adds-token-info-29a861f.s3.eu-central-1.amazonaws.com/marketing/solana/3psH1Mj1f7yUfaD5gh6Zj7epE8hhrMkMETgv5TshQA4o_icon.png",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreigruutyxqstmctyxdattcn5wdowb7wpdwybndbhfmldgfbi5glb54.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5pAFrZL47kKDt3FnAe5kGDGA8pBCNHVaECyWF4w9VZBw",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1901665.04",
            "totalSupply": "690120015479161836",
            "totalSupplyFormatted": "690120015.479161836",
            "links": {
                "website": "https://www.boden4pres.com/",
                "twitter": "https://x.com/boden4pres",
                "telegram": "https://t.me/jeo_boden",
                "moralis": "https://moralis.com/chain/solana/token/price/3psH1Mj1f7yUfaD5gh6Zj7epE8hhrMkMETgv5TshQA4o"
            },
            "description": "Introducing Boden, the 46th President of The USA! From sniffing people to the occasional slip-up in the pants, Boden keeps us entertained and reminds us not to take life too seriously. Join the movement today and be part of the fun! Your support in 2024 helps us continue spreading laughter and building a community where everyone MAKES MONEY. #JeoBoden #Boden4pres"
        }
    },
    "jinpeng": {
        "contract_address": "GgzJWhQWTpv2VHqvJnx5uEWQzNkfQSncDEWUdgQk4fvh",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GgzJWhQWTpv2VHqvJnx5uEWQzNkfQSncDEWUdgQk4fvh",
            "standard": "metaplex",
            "name": "Jinpeng",
            "symbol": "JIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GgzJWhQWTpv2VHqvJnx5uEWQzNkfQSncDEWUdgQk4fvh",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmd7vBZmeLzMtZsgAUuQCvSR7fCbDBKH5scdwUGBPeMksC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Df1nhmybmDTE6df8NzjXrPv8z41vkjyFQEwjry4Nqaky",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "32179.69",
            "totalSupply": "853799167500138661",
            "totalSupplyFormatted": "853799167.500138661",
            "links": {
                "telegram": "https://t.me/JinpengSol",
                "twitter": "https://x.com/jinpengsol",
                "website": "https://www.jinpengsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/GgzJWhQWTpv2VHqvJnx5uEWQzNkfQSncDEWUdgQk4fvh"
            },
            "description": null
        }
    },
    "jito-governance-token": {
        "contract_address": "jtojtomepa8beP8AuQc6eXt5FriJwfFMwQx2v2f9mCL",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "jtojtomepa8beP8AuQc6eXt5FriJwfFMwQx2v2f9mCL",
            "standard": "metaplex",
            "name": "JITO",
            "symbol": "JTO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_jtojtomepa8beP8AuQc6eXt5FriJwfFMwQx2v2f9mCL",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://metadata.jito.network/token/jto",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Pay5KQqvaPxEey8xdibLiB3WfGfdKo3SfPreuSXeGWm",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2193834866.63",
            "totalSupply": "999999767360274610",
            "totalSupplyFormatted": "999999767.36027461",
            "links": {
                "discord": "https://discord.gg/jitocommunity",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/jito_sol",
                "website": "https://www.jito.network/",
                "moralis": "https://moralis.com/chain/solana/token/price/jtojtomepa8beP8AuQc6eXt5FriJwfFMwQx2v2f9mCL"
            },
            "description": null
        }
    },
    "johnny-suede": {
        "contract_address": "2nCeHpECQvnMfzjU5fDMAKws1vBxMzxvWr6qqLpApump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2nCeHpECQvnMfzjU5fDMAKws1vBxMzxvWr6qqLpApump",
            "standard": "metaplex",
            "name": "Johnny Suede",
            "symbol": "SUEDE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2nCeHpECQvnMfzjU5fDMAKws1vBxMzxvWr6qqLpApump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPPKjF9CHV7E44BVMvVPNDvLXnaxAusBp76Rs9ha5PSxU",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "12390842.39",
            "totalSupply": "999997045133166",
            "totalSupplyFormatted": "999997045.133166",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/2nCeHpECQvnMfzjU5fDMAKws1vBxMzxvWr6qqLpApump"
            },
            "description": null
        }
    },
    "jungledoge": {
        "contract_address": "9P32yqucXfZnDoXmmJNzBpqXQgfou4tA4sB1RaQh9cYw",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9P32yqucXfZnDoXmmJNzBpqXQgfou4tA4sB1RaQh9cYw",
            "standard": "metaplex",
            "name": "JungleDoge",
            "symbol": "JUNGLE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9P32yqucXfZnDoXmmJNzBpqXQgfou4tA4sB1RaQh9cYw",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://ih4tsouxl4mhqtsm3bnkdoruofvtgtwvzzv3fvsohlbmjrs3d4aa.arweave.net/Qfk5OpdfGHhOTNhaobo0cWszTtXOa7LWTjrCxMZbHwA",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CC8zi6PChGvRZHbwH5cdVb4pzjRWVEuNFFZhN7MJiqat",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "202091.19",
            "totalSupply": "9439102608279065119",
            "totalSupplyFormatted": "94391026082.79065119",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/JungleDOGEsol",
                "twitter": "https://twitter.com/JUNGLEDOGEonSol",
                "website": "https://jungledoge.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/9P32yqucXfZnDoXmmJNzBpqXQgfou4tA4sB1RaQh9cYw"
            },
            "description": null
        }
    },
    "jupiter-exchange-solana": {
        "contract_address": "JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN",
            "standard": "metaplex",
            "name": "Jupiter",
            "symbol": "JUP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://static.jup.ag/jup/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "61aq585V8cR2sZBeawJFt2NPqmN7zDi1sws4KLs5xHXV",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4554055836.24",
            "totalSupply": "6999978461177177",
            "totalSupplyFormatted": "6999978461.177177",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN"
            },
            "description": null
        }
    },
    "jupiter-staked-sol": {
        "contract_address": "jupSoLaHXQiZZTSfEWMTRRgpnyFm8f6sZdosWBjx93v",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "jupSoLaHXQiZZTSfEWMTRRgpnyFm8f6sZdosWBjx93v",
            "standard": "metaplex",
            "name": "Jupiter Staked SOL",
            "symbol": "JupSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_jupSoLaHXQiZZTSfEWMTRRgpnyFm8f6sZdosWBjx93v",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://static.jup.ag/jupSOL/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "4ZnT2fWrXTNrLAzNjWxwCMkAsozqqAVneYy7bn1BAZid",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "570406488.99",
            "totalSupply": "3791655224867582",
            "totalSupplyFormatted": "3791655.224867582",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/JupiterExchange",
                "moralis": "https://moralis.com/chain/solana/token/price/jupSoLaHXQiZZTSfEWMTRRgpnyFm8f6sZdosWBjx93v"
            },
            "description": null
        }
    },
    "just-a-lotto": {
        "contract_address": "bwCs4bAMoExahc8Np2rxufxfrGai2Jb3mwkMqxkpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "bwCs4bAMoExahc8Np2rxufxfrGai2Jb3mwkMqxkpump",
            "standard": "metaplex",
            "name": "Just a LOTTO",
            "symbol": "$LOTTO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_bwCs4bAMoExahc8Np2rxufxfrGai2Jb3mwkMqxkpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSrtbRT1e6ie72DdDJAr5Fez8RZ6TbxDbVuA5kYp1CXgd",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1003653.07",
            "totalSupply": "999992097908305",
            "totalSupplyFormatted": "999992097.908305",
            "links": {
                "telegram": "https://t.me/JustaLotto",
                "twitter": "https://twitter.com/JustALotto",
                "website": "https://justalotto.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/bwCs4bAMoExahc8Np2rxufxfrGai2Jb3mwkMqxkpump"
            },
            "description": null
        }
    },
    "just-buy-1-worth-of-this-coin": {
        "contract_address": "GHichsGq8aPnqJyz6Jp1ASTK4PNLpB5KrD6XrfDjpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GHichsGq8aPnqJyz6Jp1ASTK4PNLpB5KrD6XrfDjpump",
            "standard": "metaplex",
            "name": "just buy $1 worth of this coin",
            "symbol": "$1",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GHichsGq8aPnqJyz6Jp1ASTK4PNLpB5KrD6XrfDjpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbjfHj5F1xhkKn1ttghh9q5M6RpwEczGXJWvgNpqZMroP",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6264961.53",
            "totalSupply": "999799325525162",
            "totalSupplyFormatted": "999799325.525162",
            "links": {
                "email": "1dollarto1dollar@gmail.com",
                "reddit": "https://reddit.com/r/1DollarTo1DollarSol",
                "telegram": "https://t.me/DollarCTOPortal",
                "twitter": "https://x.com/1DollarSol",
                "website": "https://1dollarsol.com",
                "youtube": "https://www.youtube.com/@1dollarto1dollar",
                "moralis": "https://moralis.com/chain/solana/token/price/GHichsGq8aPnqJyz6Jp1ASTK4PNLpB5KrD6XrfDjpump"
            },
            "description": null
        }
    },
    "just-cuz": {
        "contract_address": "FH5sNBwBNNcGdkZmB6oHkoTH7cjEpVN9hgfhoRC6pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FH5sNBwBNNcGdkZmB6oHkoTH7cjEpVN9hgfhoRC6pump",
            "standard": "metaplex",
            "name": "Just Cuz",
            "symbol": "CUZ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FH5sNBwBNNcGdkZmB6oHkoTH7cjEpVN9hgfhoRC6pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmc6zcHCDc9v6guoZVAfsznjGZMszMRyF7VPDQ6Hmt8C2W",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "552413.62",
            "totalSupply": "999995695201771",
            "totalSupplyFormatted": "999995695.201771",
            "links": {
                "telegram": "https://t.me/justcuzentry",
                "twitter": "https://twitter.com/JustCuzCTO",
                "website": "https://memsite.fun/justcuz",
                "moralis": "https://moralis.com/chain/solana/token/price/FH5sNBwBNNcGdkZmB6oHkoTH7cjEpVN9hgfhoRC6pump"
            },
            "description": null
        }
    },
    "just-kira": {
        "contract_address": "HBV58vtGSRWDppXpaER3KCRU2SyH5Z9YPTF92PTwKvzq",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HBV58vtGSRWDppXpaER3KCRU2SyH5Z9YPTF92PTwKvzq",
            "standard": "metaplex",
            "name": "Just Kira",
            "symbol": "KIRAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HBV58vtGSRWDppXpaER3KCRU2SyH5Z9YPTF92PTwKvzq",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/8dsTb3exR8ikqHrWwGV8cfPxyxYD9gABVK8zzZSUuVkV",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HzvNPSXkNtBKgi4vnefCTPerSPWDnkRvRts2STFVDUUr",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "561138.56",
            "totalSupply": "999997428209843",
            "totalSupplyFormatted": "999997428.209843",
            "links": {
                "github": "https://aumiga.gitbook.io/the-kira-project",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/TheRealKira",
                "twitter": "https://twitter.com/JustKiraTings",
                "website": "https://thekiraproject.online",
                "moralis": "https://moralis.com/chain/solana/token/price/HBV58vtGSRWDppXpaER3KCRU2SyH5Z9YPTF92PTwKvzq"
            },
            "description": null
        }
    },
    "justanegg-2": {
        "contract_address": "wo1zgt8rfrYpvdVi4nidoj1SYfcR4pQx69bmNv2JLhQ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "wo1zgt8rfrYpvdVi4nidoj1SYfcR4pQx69bmNv2JLhQ",
            "standard": "metaplex",
            "name": "JustAnEgg",
            "symbol": "EGG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_wo1zgt8rfrYpvdVi4nidoj1SYfcR4pQx69bmNv2JLhQ",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreidkrmalgzh3kjy3nm4djryxhggfchmnuprzsw57knuhfet4cbw3pa.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "41nduErtzd2Xka3Mrfg7HmJxTAGQA9RV22dkSmNLnXuG",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "532572.22",
            "totalSupply": "399252297407233794",
            "totalSupplyFormatted": "399252297.407233794",
            "links": {
                "instagram": "https://www.instagram.com/world_record_egg/",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/JustAnEggSol",
                "tiktok": "https://www.tiktok.com/@world_record_egg",
                "twitter": "https://twitter.com/justaneggcoin",
                "website": "https://justanegg.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/wo1zgt8rfrYpvdVi4nidoj1SYfcR4pQx69bmNv2JLhQ"
            },
            "description": null
        }
    },
    "kabosu-on-sol": {
        "contract_address": "FJup6BbEBoCeFJZtqW4qcaqABLco5SkV8683do38P9tu",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FJup6BbEBoCeFJZtqW4qcaqABLco5SkV8683do38P9tu",
            "standard": "metaplex",
            "name": "Kabosu",
            "symbol": "Kabosu",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FJup6BbEBoCeFJZtqW4qcaqABLco5SkV8683do38P9tu",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmfALLLQ9GjvCMt52pi3isnuSUudTJPFgfVfnqooQYErUN",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "107370.64",
            "totalSupply": "999270717404671",
            "totalSupplyFormatted": "999270717.404671",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://twitter.com/search?q=$KABOSU",
                "twitter": "https://t.me/KabosuCTO_SOL",
                "website": "https://www.kabosu.love/",
                "moralis": "https://moralis.com/chain/solana/token/price/FJup6BbEBoCeFJZtqW4qcaqABLco5SkV8683do38P9tu"
            },
            "description": null
        }
    },
    "kamino": {
        "contract_address": "KMNo3nJsBXfcpJTVhZcXLW7RmTwTt4GVFE7suUBo9sS",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "KMNo3nJsBXfcpJTVhZcXLW7RmTwTt4GVFE7suUBo9sS",
            "standard": "metaplex",
            "name": "Kamino",
            "symbol": "KMNO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_KMNo3nJsBXfcpJTVhZcXLW7RmTwTt4GVFE7suUBo9sS",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cdn.kamino.finance/kamino-metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "2dgenrZucMA9EkBtbwegzgwdDknNNAHKpMuNZguNx3gz",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "622519142.91",
            "totalSupply": "9999986231860471",
            "totalSupplyFormatted": "9999986231.860471",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+z4XqPSCki-hhMDc0",
                "twitter": "https://twitter.com/KaminoFinance",
                "website": "https://app.kamino.finance/",
                "moralis": "https://moralis.com/chain/solana/token/price/KMNo3nJsBXfcpJTVhZcXLW7RmTwTt4GVFE7suUBo9sS"
            },
            "description": null
        }
    },
    "kappy": {
        "contract_address": "CEhFvMotKm3zucKUBEHVvTaxQ4e9QVPaAjSfkzFLpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CEhFvMotKm3zucKUBEHVvTaxQ4e9QVPaAjSfkzFLpump",
            "standard": "metaplex",
            "name": "Kappy",
            "symbol": "Kappy",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CEhFvMotKm3zucKUBEHVvTaxQ4e9QVPaAjSfkzFLpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXUU5VmAMKpAjdaEi51ToRxbWD5b8DZVcVgLYpL5oipKa",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "509867.70",
            "totalSupply": "999920958841916",
            "totalSupplyFormatted": "999920958.841916",
            "links": {
                "telegram": "https://t.me/kappyonsol",
                "twitter": "https://x.com/kappybruh",
                "website": "https://kappybruh.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/CEhFvMotKm3zucKUBEHVvTaxQ4e9QVPaAjSfkzFLpump"
            },
            "description": null
        }
    },
    "kek-3": {
        "contract_address": "3HxDM7xreHuop94zzzVP39fTKLvJCwHcSYgrSf8cyg5M",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3HxDM7xreHuop94zzzVP39fTKLvJCwHcSYgrSf8cyg5M",
            "standard": "metaplex",
            "name": "Kek",
            "symbol": "Kek",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3HxDM7xreHuop94zzzVP39fTKLvJCwHcSYgrSf8cyg5M",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/rFFFFmpmxBOtbJq8FHot",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "460632.97",
            "totalSupply": "926873522523626653",
            "totalSupplyFormatted": "926873522.523626653",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/3HxDM7xreHuop94zzzVP39fTKLvJCwHcSYgrSf8cyg5M"
            },
            "description": null
        }
    },
    "keke-terminal": {
        "contract_address": "Gp8GVGPc8QCe4Jn6ryG5YKokG5bjKycATEzqpeyspump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Gp8GVGPc8QCe4Jn6ryG5YKokG5bjKycATEzqpeyspump",
            "standard": "metaplex",
            "name": "Keke Terminal",
            "symbol": "KEKE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Gp8GVGPc8QCe4Jn6ryG5YKokG5bjKycATEzqpeyspump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbeUwuicjZsBbAUZmNF8rbJsgcy67ZxfHwek6FUmRjWVw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4307398.30",
            "totalSupply": "999997050978509",
            "totalSupplyFormatted": "999997050.978509",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Gp8GVGPc8QCe4Jn6ryG5YKokG5bjKycATEzqpeyspump"
            },
            "description": null
        }
    },
    "kekius-maximus-2": {
        "contract_address": "HuAncxDEsakCDgZS2Yfo9xJbHmtHXMnxxkT9jqdXnHhm",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HuAncxDEsakCDgZS2Yfo9xJbHmtHXMnxxkT9jqdXnHhm",
            "standard": "metaplex",
            "name": "Kekius Maximus",
            "symbol": "KM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HuAncxDEsakCDgZS2Yfo9xJbHmtHXMnxxkT9jqdXnHhm",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYFTvJUVN85XNdyoCxv3rbW17tjWZJ3RuZRissfSvFSZ8",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "326528.16",
            "totalSupply": "999691270297961",
            "totalSupplyFormatted": "999691270.297961",
            "links": {
                "email": "Kekkiusmaximuscto@gmail.com",
                "telegram": "https://t.me/kekiusmaximuscto3",
                "twitter": "https://x.com/KmTheCtoMain",
                "website": "https://kekiusmaximuscto.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/HuAncxDEsakCDgZS2Yfo9xJbHmtHXMnxxkT9jqdXnHhm"
            },
            "description": null
        }
    },
    "kekius-maximus-4": {
        "contract_address": "FThrNpdic79XRV6i9aCWQ2UTp7oRQuCXAgUWtZR2cs42",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FThrNpdic79XRV6i9aCWQ2UTp7oRQuCXAgUWtZR2cs42",
            "standard": "metaplex",
            "name": "Kekius Maximus",
            "symbol": "KM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FThrNpdic79XRV6i9aCWQ2UTp7oRQuCXAgUWtZR2cs42",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYFTvJUVN85XNdyoCxv3rbW17tjWZJ3RuZRissfSvFSZ8",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1558197.86",
            "totalSupply": "999451497193895",
            "totalSupplyFormatted": "999451497.193895",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/FThrNpdic79XRV6i9aCWQ2UTp7oRQuCXAgUWtZR2cs42"
            },
            "description": null
        }
    },
    "kendo-ai": {
        "contract_address": "6HP3PZ5DkCy6kEjS8CKPfeMCXgoxyTcdvEakzFyzpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6HP3PZ5DkCy6kEjS8CKPfeMCXgoxyTcdvEakzFyzpump",
            "standard": "metaplex",
            "name": "Kendo Ai",
            "symbol": "realkendo",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6HP3PZ5DkCy6kEjS8CKPfeMCXgoxyTcdvEakzFyzpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmaeCrCsT5H4NysVhGyAHQeyrPcpuyPgpwiyRwC25mFyvc",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "789934.12",
            "totalSupply": "999351153981948",
            "totalSupplyFormatted": "999351153.981948",
            "links": {
                "twitter": "https://x.com/Kendosalesai",
                "website": "https://kendo.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/6HP3PZ5DkCy6kEjS8CKPfeMCXgoxyTcdvEakzFyzpump"
            },
            "description": null
        }
    },
    "khaokheowzoo": {
        "contract_address": "AiQcnL5gPjEXVH1E1FGUdN1WhPz4qXAZfQJxpGrJpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AiQcnL5gPjEXVH1E1FGUdN1WhPz4qXAZfQJxpGrJpump",
            "standard": "metaplex",
            "name": "khaokheowzoo",
            "symbol": "kheowzoo",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AiQcnL5gPjEXVH1E1FGUdN1WhPz4qXAZfQJxpGrJpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVD95Yoys8wEPinwF6b9mcLBxk45t1GPYwZp2P7VpnvJJ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "471975.08",
            "totalSupply": "999991691512317",
            "totalSupplyFormatted": "999991691.512317",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/AiQcnL5gPjEXVH1E1FGUdN1WhPz4qXAZfQJxpGrJpump"
            },
            "description": null
        }
    },
    "kiki-2": {
        "contract_address": "HhCLbkW6FwhriTkk81W8tYstsRCLUu6Y7Je1SQjVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HhCLbkW6FwhriTkk81W8tYstsRCLUu6Y7Je1SQjVpump",
            "standard": "metaplex",
            "name": "KIKICat",
            "symbol": "KIKI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HhCLbkW6FwhriTkk81W8tYstsRCLUu6Y7Je1SQjVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXBRGALusEVD88WbiivaiaKCrLAsuGdz3FPuxkhdN5oxY",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "9043225.53",
            "totalSupply": "999985240678892",
            "totalSupplyFormatted": "999985240.678892",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/HhCLbkW6FwhriTkk81W8tYstsRCLUu6Y7Je1SQjVpump"
            },
            "description": null
        }
    },
    "kira-3": {
        "contract_address": "CefZxozhhxK88XPJoeWBczYSaBPd35tsKnziTH6Cpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CefZxozhhxK88XPJoeWBczYSaBPd35tsKnziTH6Cpump",
            "standard": "metaplex",
            "name": "Kira powered by Infera",
            "symbol": "KIRA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CefZxozhhxK88XPJoeWBczYSaBPd35tsKnziTH6Cpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPY6tKbsxiNCDzc9rcZUuBtt8qWa7Zfz5Q1acdgmh3UPU",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "459095.39",
            "totalSupply": "999907192493422",
            "totalSupplyFormatted": "999907192.493422",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/infera_network",
                "twitter": "https://twitter.com/infera_network",
                "website": "https://www.infera.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/CefZxozhhxK88XPJoeWBczYSaBPd35tsKnziTH6Cpump"
            },
            "description": null
        }
    },
    "kitsune-2": {
        "contract_address": "9hfKxLSnwh4LhpRgmxBYDRgrKeYUgszMePKxuidPpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9hfKxLSnwh4LhpRgmxBYDRgrKeYUgszMePKxuidPpump",
            "standard": "metaplex",
            "name": "Kitsune",
            "symbol": "KIT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9hfKxLSnwh4LhpRgmxBYDRgrKeYUgszMePKxuidPpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmZ9Pnnj3PNcnTfGXEAzBT2Qvffb1zYcDwB35BkspPwotq",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3245691.55",
            "totalSupply": "999976753673608",
            "totalSupplyFormatted": "999976753.673608",
            "links": {
                "twitter": "https://twitter.com/agent_kitsune",
                "website": "https://griffain.com/agents/kitsune",
                "moralis": "https://moralis.com/chain/solana/token/price/9hfKxLSnwh4LhpRgmxBYDRgrKeYUgszMePKxuidPpump"
            },
            "description": null
        }
    },
    "kitten-haimer": {
        "contract_address": "3TWgDvYBL2YPET2LxnWAwsMeoA8aL4DutNuwat2pKCjC",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3TWgDvYBL2YPET2LxnWAwsMeoA8aL4DutNuwat2pKCjC",
            "standard": "metaplex",
            "name": "Kitten Haimer",
            "symbol": "KHAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3TWgDvYBL2YPET2LxnWAwsMeoA8aL4DutNuwat2pKCjC",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/Id9tPq16ZuIeadIK7v4OLBWvJBzdMLcx0PZbicN859g",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5x3NRuxbV8df4zRS173knwSZEQBhYeEMKDg59ErCnWwf",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "2567524.90",
            "totalSupply": "5399773030514785",
            "totalSupplyFormatted": "53997730.30514785",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/3TWgDvYBL2YPET2LxnWAwsMeoA8aL4DutNuwat2pKCjC"
            },
            "description": null
        }
    },
    "kittenwifhat": {
        "contract_address": "9a8AmDfQxFJ44RrVhKdiXnkwCWT99igWp5QrRuC73Pin",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9a8AmDfQxFJ44RrVhKdiXnkwCWT99igWp5QrRuC73Pin",
            "standard": "metaplex",
            "name": "KittenWifHat",
            "symbol": "KittenWif",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9a8AmDfQxFJ44RrVhKdiXnkwCWT99igWp5QrRuC73Pin",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.coinsult.app/ipfs/Qmce9p6wRf6Cmg5moV3WMeNcjk5VsMb2ePiNYFeToSkeJB",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7Jc4ufgEx9pWgNhxyrvZ58z6sMtJdcUR9g3RUn1mouzQ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "592979.46",
            "totalSupply": "998692150158016118",
            "totalSupplyFormatted": "998692150.158016118",
            "links": {
                "email": "info@kittenwifhat.xyz",
                "discord": "https://discord.com/invite/CJTQ2XxG",
                "instagram": "https://www.instagram.com/kittenwifhat_sol",
                "medium": "https://kittenwifhat.medium.com/",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/kittenwifhatportal",
                "tiktok": "https://www.tiktok.com/@kittenwifhat_sol",
                "twitter": "https://x.com/KittenWif_SOL",
                "website": "https://kittenwifhat.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/9a8AmDfQxFJ44RrVhKdiXnkwCWT99igWp5QrRuC73Pin"
            },
            "description": null
        }
    },
    "kittyminecoin": {
        "contract_address": "41fZewbrb8x24yE9KeMJExoVXCDggebPMEwRVvX8pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "41fZewbrb8x24yE9KeMJExoVXCDggebPMEwRVvX8pump",
            "standard": "metaplex",
            "name": "KittyMineCoin",
            "symbol": "KMC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_41fZewbrb8x24yE9KeMJExoVXCDggebPMEwRVvX8pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQCm8LtL1MdJ8dWjs4me6JBYAMpPze2UPMDZrvyVx58Uc",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "458378.85",
            "totalSupply": "996744439777844",
            "totalSupplyFormatted": "996744439.777844",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/41fZewbrb8x24yE9KeMJExoVXCDggebPMEwRVvX8pump"
            },
            "description": null
        }
    },
    "knot-diffie-hellman": {
        "contract_address": "7RDvypx3p9EWq4nZZKux1ZQAc7DUWXpHTVKxCCnupump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7RDvypx3p9EWq4nZZKux1ZQAc7DUWXpHTVKxCCnupump",
            "standard": "metaplex",
            "name": "Knot Diffie\u2013Hellman",
            "symbol": "KNOT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7RDvypx3p9EWq4nZZKux1ZQAc7DUWXpHTVKxCCnupump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmU8xknoezeLcM96R7N1ZdRVeWt2ybU5pVrZsn5NZmx9Pc",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "328223.87",
            "totalSupply": "999990454857182",
            "totalSupplyFormatted": "999990454.857182",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7RDvypx3p9EWq4nZZKux1ZQAc7DUWXpHTVKxCCnupump"
            },
            "description": null
        }
    },
    "knut-from-zoo": {
        "contract_address": "Gw9saRvRTQUyMmYBabsGibceFaFe4RKK18nrbWYZpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Gw9saRvRTQUyMmYBabsGibceFaFe4RKK18nrbWYZpump",
            "standard": "metaplex",
            "name": "Knut From Zoo",
            "symbol": "KNUT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Gw9saRvRTQUyMmYBabsGibceFaFe4RKK18nrbWYZpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/Ai0qR9DWhCJb6W6IgDJo2txAHT2YUCLP1ZYzaxguOXA",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "298867.56",
            "totalSupply": "984130222978933",
            "totalSupplyFormatted": "984130222.978933",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Gw9saRvRTQUyMmYBabsGibceFaFe4RKK18nrbWYZpump"
            },
            "description": null
        }
    },
    "koala-ai": {
        "contract_address": "FsA54yL49WKs7rWoGv9sUcbSGWCWV756jTD349e6H2yW",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FsA54yL49WKs7rWoGv9sUcbSGWCWV756jTD349e6H2yW",
            "standard": "metaplex",
            "name": "KOALA AI",
            "symbol": "KOKO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FsA54yL49WKs7rWoGv9sUcbSGWCWV756jTD349e6H2yW",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/bafkreibgyne3hwco6v4elerdwmqvq3pkfh4fk27l7hs25ea55p7fvyrjgq",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "F8aRH6XDdiEEwbvkXE9JxFVX25cyPoJYfhfzQzHgRQ66",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6495324.96",
            "totalSupply": "9946898868065318207",
            "totalSupplyFormatted": "9946898868065.318207",
            "links": {
                "email": "cross@koalaai.vip",
                "facebook": "https://www.facebook.com/kokommunity",
                "instagram": "https://www.instagram.com/koalaaivip/",
                "medium": "https://koalaai.medium.com/",
                "reddit": "https://www.reddit.com/user/KoalaAIReddit/",
                "telegram": "https://t.me/koalaaivip",
                "tiktok": "https://www.tiktok.com/@koko.sol.ai",
                "twitter": "https://twitter.com/KOALAAIVIP",
                "website": "https://www.koalaai.vip/",
                "youtube": "https://www.youtube.com/@koalaaivip",
                "moralis": "https://moralis.com/chain/solana/token/price/FsA54yL49WKs7rWoGv9sUcbSGWCWV756jTD349e6H2yW"
            },
            "description": null
        }
    },
    "kolin-2": {
        "contract_address": "4q3Z58YxrZEAVMLtMwnm7eHtodSD3LSpSNt3pDnqpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4q3Z58YxrZEAVMLtMwnm7eHtodSD3LSpSNt3pDnqpump",
            "standard": "metaplex",
            "name": "Kolin",
            "symbol": "KOLIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4q3Z58YxrZEAVMLtMwnm7eHtodSD3LSpSNt3pDnqpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmeZuVX9MeB1fy1Y8xmsj6S2c4gcTNJXPhqqydFeaugA6Z",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5061166.99",
            "totalSupply": "999972733120292",
            "totalSupplyFormatted": "999972733.120292",
            "links": {
                "telegram": "https://t.me/kolin_ai",
                "twitter": "https://twitter.com/kolin_ai",
                "website": "https://www.kolin.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/4q3Z58YxrZEAVMLtMwnm7eHtodSD3LSpSNt3pDnqpump"
            },
            "description": null
        }
    },
    "kolwai": {
        "contract_address": "6uVJY332tiYwo58g3B8p9FJRGmGZ2fUuXR8cpiaDpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6uVJY332tiYwo58g3B8p9FJRGmGZ2fUuXR8cpiaDpump",
            "standard": "metaplex",
            "name": "Kolwaii",
            "symbol": "KWAII",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6uVJY332tiYwo58g3B8p9FJRGmGZ2fUuXR8cpiaDpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQG8fhrPzPtdJKYdCnhEVxDWJh6X1te7goXfQL27fUCPh",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2307385.57",
            "totalSupply": "999994612413458",
            "totalSupplyFormatted": "999994612.413458",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/6uVJY332tiYwo58g3B8p9FJRGmGZ2fUuXR8cpiaDpump"
            },
            "description": null
        }
    },
    "koto-2": {
        "contract_address": "BfdVHnbt9LSNAFCZU9kvTjbrH3jX78sv2siLKGQ7pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BfdVHnbt9LSNAFCZU9kvTjbrH3jX78sv2siLKGQ7pump",
            "standard": "metaplex",
            "name": "koto",
            "symbol": "koto",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BfdVHnbt9LSNAFCZU9kvTjbrH3jX78sv2siLKGQ7pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmY4578qq73jub5QN66x9sAwywTdNCiZdxDh75SSRAMLBV",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1911606.74",
            "totalSupply": "974984233559732",
            "totalSupplyFormatted": "974984233.559732",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/koto9x",
                "website": "https://x.com/koto9x",
                "moralis": "https://moralis.com/chain/solana/token/price/BfdVHnbt9LSNAFCZU9kvTjbrH3jX78sv2siLKGQ7pump"
            },
            "description": null
        }
    },
    "kpop-kpop-fun": {
        "contract_address": "4RdyA2XGc6v7RW1jcKG6AYDsjeUWZqkLHTNp2ghvdg7f",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4RdyA2XGc6v7RW1jcKG6AYDsjeUWZqkLHTNp2ghvdg7f",
            "standard": "metaplex",
            "name": "KPOP",
            "symbol": "KPOP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4RdyA2XGc6v7RW1jcKG6AYDsjeUWZqkLHTNp2ghvdg7f",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/eV0NLNwg7rW6N847NTdlAG7XWO-LDFsE2DSmgAWbCjk",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BqbfrDfEUB7DuhFXaF4HKRYHCY2UzHXHvo94uMjjXdR4",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4205692.23",
            "totalSupply": "999999579963396797",
            "totalSupplyFormatted": "999999579.963396797",
            "links": {
                "instagram": "https://instagram.com/kpopdotfun",
                "twitter": "https://x.com/kpopdotfun",
                "website": "https://www.kpop.fun",
                "moralis": "https://moralis.com/chain/solana/token/price/4RdyA2XGc6v7RW1jcKG6AYDsjeUWZqkLHTNp2ghvdg7f"
            },
            "description": null
        }
    },
    "kwantxbt": {
        "contract_address": "9Yt5tHLFB2Uz1yg3cyEpTN4KTSWhiGpKxXPJ8HX3hat",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9Yt5tHLFB2Uz1yg3cyEpTN4KTSWhiGpKxXPJ8HX3hat",
            "standard": "metaplex",
            "name": "kwantxbt",
            "symbol": "KWANT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9Yt5tHLFB2Uz1yg3cyEpTN4KTSWhiGpKxXPJ8HX3hat",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmb6p1e9tjXGmwqxfu2Wbw7MmpmhqAq9iX1eLtgxnckQ1f",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "895765.38",
            "totalSupply": "994800786443875",
            "totalSupplyFormatted": "994800786.443875",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/kwantchannel",
                "twitter": "https://twitter.com/kwantxbt",
                "website": "https://tophat.one/token/0e8a81e8-249b-418a-97d4-d9d4541550b4",
                "moralis": "https://moralis.com/chain/solana/token/price/9Yt5tHLFB2Uz1yg3cyEpTN4KTSWhiGpKxXPJ8HX3hat"
            },
            "description": null
        }
    },
    "kween": {
        "contract_address": "DEf93bSt8dx58gDFCcz4CwbjYZzjwaRBYAciJYLfdCA9",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DEf93bSt8dx58gDFCcz4CwbjYZzjwaRBYAciJYLfdCA9",
            "standard": "metaplex",
            "name": "DO KWEEN",
            "symbol": "KWEEN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DEf93bSt8dx58gDFCcz4CwbjYZzjwaRBYAciJYLfdCA9",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmYv94jCG2xuYjtoi7ibRWrJ5kdmxYvH4hRa7mF7RhSSvq",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "12344225.01",
            "totalSupply": "999790877785655",
            "totalSupplyFormatted": "999790877.785655",
            "links": {
                "telegram": "https://t.me/dokween",
                "twitter": "https://twitter.com/KWEEN_SOL",
                "website": "http://www.dokween.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/DEf93bSt8dx58gDFCcz4CwbjYZzjwaRBYAciJYLfdCA9"
            },
            "description": null
        }
    },
    "kyros-restaked-sol": {
        "contract_address": "kySo1nETpsZE2NWe5vj2C64mPSciH1SppmHb4XieQ7B",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "kySo1nETpsZE2NWe5vj2C64mPSciH1SppmHb4XieQ7B",
            "standard": "metaplex",
            "name": "Kyros Restaked SOL",
            "symbol": "kySOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_kySo1nETpsZE2NWe5vj2C64mPSciH1SppmHb4XieQ7B",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafybeig2c5aemzhpepo7bjcvfu5mw2nx6qoif35d7jy6c44275uxqabaxi.ipfs.dweb.link/",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CQpvXgoaaawDCLh8FwMZEwQqnPakRUZ5BnzhjnEBPJv",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "31352912.33",
            "totalSupply": "194669634385131",
            "totalSupplyFormatted": "194669.634385131",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/kySo1nETpsZE2NWe5vj2C64mPSciH1SppmHb4XieQ7B"
            },
            "description": null
        }
    },
    "laine-stake": {
        "contract_address": "LAinEtNLgpmCP9Rvsf5Hn8W6EhNiKLZQti1xfWMLy6X",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "LAinEtNLgpmCP9Rvsf5Hn8W6EhNiKLZQti1xfWMLy6X",
            "standard": "metaplex",
            "name": "Laine Stake Token",
            "symbol": "laineSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_LAinEtNLgpmCP9Rvsf5Hn8W6EhNiKLZQti1xfWMLy6X",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://shdw-drive.genesysgo.net/4DUkKJB966oMk8zq57KkAUxqg9HpuWtZ3BKobhmYph39/laineSOL.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8gwwKtfu7Z6aa8tKDvw2NrWKrGvzyJBuey2ucSwxB1Vy",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8244094.56",
            "totalSupply": "49318172600276",
            "totalSupplyFormatted": "49318.172600276",
            "links": {
                "discord": "https://discord.com/invite/4jWhWZX7ef",
                "twitter": "https://twitter.com/laine_sa_",
                "website": "https://stake.laine.one",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/LAinEtNLgpmCP9Rvsf5Hn8W6EhNiKLZQti1xfWMLy6X"
            },
            "description": null
        }
    },
    "lambo-2": {
        "contract_address": "FhAdp55ngkaRCC3TGAMsJdDCUHQDPTMcxQDJ4HCfnxMf",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FhAdp55ngkaRCC3TGAMsJdDCUHQDPTMcxQDJ4HCfnxMf",
            "standard": "metaplex",
            "name": "Lambo",
            "symbol": "LAMBO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FhAdp55ngkaRCC3TGAMsJdDCUHQDPTMcxQDJ4HCfnxMf",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmPBiqSWuC5T7SD88bWjgSNZXCPnTsmrmt3ZNS6v6jXy8p",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CVxN3mBxAhD9LxWtndz24aVVok9HujLSt1RvjBwVWTJ8",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "23224.52",
            "totalSupply": "9987302646148551",
            "totalSupplyFormatted": "9987302.646148551",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/FhAdp55ngkaRCC3TGAMsJdDCUHQDPTMcxQDJ4HCfnxMf"
            },
            "description": null
        }
    },
    "lambosforvirgins": {
        "contract_address": "7kB8ZkSBJr2uiBWfveqkVBN7EpZMFom5PqeWUB62DCRD",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7kB8ZkSBJr2uiBWfveqkVBN7EpZMFom5PqeWUB62DCRD",
            "standard": "metaplex",
            "name": "LambosForVirgins",
            "symbol": "VIRGIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7kB8ZkSBJr2uiBWfveqkVBN7EpZMFom5PqeWUB62DCRD",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://lambosforvirgins.s3.ap-southeast-2.amazonaws.com/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 25,
                "updateAuthority": "D4KpLRAGUkbjFpQ3wjsN2MoRz25hAEZuRSSxjs9EWLbi",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1473783.97",
            "totalSupply": "894999997958951696",
            "totalSupplyFormatted": "894999997.958951696",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7kB8ZkSBJr2uiBWfveqkVBN7EpZMFom5PqeWUB62DCRD"
            },
            "description": null
        }
    },
    "large-language-model": {
        "contract_address": "98mb39tPFKQJ4Bif8iVg9mYb9wsfPZgpgN1sxoVTpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "98mb39tPFKQJ4Bif8iVg9mYb9wsfPZgpgN1sxoVTpump",
            "standard": "metaplex",
            "name": "Large Language Model",
            "symbol": "LLM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_98mb39tPFKQJ4Bif8iVg9mYb9wsfPZgpgN1sxoVTpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmeK1WhT35QqitCmUjfdkHHB6J7RbBBVHMx6djrv1Tj9Gi",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1462863.85",
            "totalSupply": "999980754728153",
            "totalSupplyFormatted": "999980754.728153",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/98mb39tPFKQJ4Bif8iVg9mYb9wsfPZgpgN1sxoVTpump"
            },
            "description": null
        }
    },
    "larp-detective-agency": {
        "contract_address": "5UmDWgyLV1JBg8Jr8NwyezXdQkiU3vHGJu2efm7Cpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5UmDWgyLV1JBg8Jr8NwyezXdQkiU3vHGJu2efm7Cpump",
            "standard": "metaplex",
            "name": "Larp Detective Agency",
            "symbol": "AGENCY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5UmDWgyLV1JBg8Jr8NwyezXdQkiU3vHGJu2efm7Cpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmZVqCvUnUaK7Nqsu7qmdibp6EqxjR9rz9rWNF3QZMPKG2",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "600077.74",
            "totalSupply": "999956244324116",
            "totalSupplyFormatted": "999956244.324116",
            "links": {
                "telegram": "https://t.me/LDAPortal",
                "twitter": "https://twitter.com/_AgentScarlett",
                "website": "https://www.larpdetective.agency/",
                "moralis": "https://moralis.com/chain/solana/token/price/5UmDWgyLV1JBg8Jr8NwyezXdQkiU3vHGJu2efm7Cpump"
            },
            "description": null
        }
    },
    "late-capitalism": {
        "contract_address": "78E2eW1QBg15cinNR4wfFzu9SJPsDXQKR29SNpApg78J",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "78E2eW1QBg15cinNR4wfFzu9SJPsDXQKR29SNpApg78J",
            "standard": "metaplex",
            "name": "Late Capitalism",
            "symbol": "L8CAP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_78E2eW1QBg15cinNR4wfFzu9SJPsDXQKR29SNpApg78J",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmdf1onQvF6HtUmanueUDtGgrQXR3X81c5QqmtGo7cr7oP",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "748490.46",
            "totalSupply": "1099983627827296604",
            "totalSupplyFormatted": "1099983627.827296604",
            "links": {
                "telegram": "https://t.me/LateCapDAO",
                "twitter": "https://twitter.com/latecapdao",
                "website": "https://www.daos.fun/78E2eW1QBg15cinNR4wfFzu9SJPsDXQKR29SNpApg78J",
                "moralis": "https://moralis.com/chain/solana/token/price/78E2eW1QBg15cinNR4wfFzu9SJPsDXQKR29SNpApg78J"
            },
            "description": null
        }
    },
    "lc-shib": {
        "contract_address": "43YakhC3TcSuTgSXnxFgw8uKL8VkuLuFa4M6Bninpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "43YakhC3TcSuTgSXnxFgw8uKL8VkuLuFa4M6Bninpump",
            "standard": "metaplex",
            "name": "LC SHIB",
            "symbol": "LC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_43YakhC3TcSuTgSXnxFgw8uKL8VkuLuFa4M6Bninpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmU67WWWPu2TzthRkSQ4YQN1m7NKL9bCXw2kD9rXfH73UH",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "517875.10",
            "totalSupply": "999909454376317",
            "totalSupplyFormatted": "999909454.376317",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/43YakhC3TcSuTgSXnxFgw8uKL8VkuLuFa4M6Bninpump"
            },
            "description": null
        }
    },
    "lea-ai": {
        "contract_address": "8SpPaFLycx897D6sowPZkEkcNdDahzRZb5itr6D8pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8SpPaFLycx897D6sowPZkEkcNdDahzRZb5itr6D8pump",
            "standard": "metaplex",
            "name": "Lea AI",
            "symbol": "LEA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8SpPaFLycx897D6sowPZkEkcNdDahzRZb5itr6D8pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSCpRpxJR5XN4KUrpneQjfTeg8vNrzqDMbsUfPuuNCZQv",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5722771.63",
            "totalSupply": "999973199974409",
            "totalSupplyFormatted": "999973199.974409",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8SpPaFLycx897D6sowPZkEkcNdDahzRZb5itr6D8pump"
            },
            "description": null
        }
    },
    "legit": {
        "contract_address": "5rSP1W2Jkir4Qy1M6rEYXFFi5HgbhrkVTajimrVgpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5rSP1W2Jkir4Qy1M6rEYXFFi5HgbhrkVTajimrVgpump",
            "standard": "metaplex",
            "name": "LEGIT",
            "symbol": "LEGIT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5rSP1W2Jkir4Qy1M6rEYXFFi5HgbhrkVTajimrVgpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdFZx8Jkzjn1pRBy5ASMvCxXKko9p2ZtEjBC7CHGbEZwu",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1799834.82",
            "totalSupply": "992451067706429",
            "totalSupplyFormatted": "992451067.706429",
            "links": {
                "telegram": "https://t.me/legitmemechat",
                "twitter": "https://twitter.com/legitmemetoken",
                "website": "https://legitmeme.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/5rSP1W2Jkir4Qy1M6rEYXFFi5HgbhrkVTajimrVgpump"
            },
            "description": null
        }
    },
    "leo-2": {
        "contract_address": "8Cd7wXoPb5Yt9cUGtmHNqAEmpMDrhfcVqnGbLC48b8Qm",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8Cd7wXoPb5Yt9cUGtmHNqAEmpMDrhfcVqnGbLC48b8Qm",
            "standard": "metaplex",
            "name": "Leo",
            "symbol": "LEO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8Cd7wXoPb5Yt9cUGtmHNqAEmpMDrhfcVqnGbLC48b8Qm",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/4CVdU_A0lR2LW45mDSW9b6UXPQQUa-3VM7vnWPdzoH0",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DUK1VN3WatYKsVLwRX2JxfJfaKX6bDXvijpPtT28ed13",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "455031.49",
            "totalSupply": "999895594922637",
            "totalSupplyFormatted": "999895594.922637",
            "links": {
                "twitter": "https://twitter.com/astrofoliosol",
                "website": "https://astrofolio.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/8Cd7wXoPb5Yt9cUGtmHNqAEmpMDrhfcVqnGbLC48b8Qm"
            },
            "description": null
        }
    },
    "let-him-cook": {
        "contract_address": "G8Vy25NzjRmuQtnN35xF7j3X2Z1TrV39XijZu8Mg4w8n",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "G8Vy25NzjRmuQtnN35xF7j3X2Z1TrV39XijZu8Mg4w8n",
            "standard": "metaplex",
            "name": "Let Him Cook",
            "symbol": "COOK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_G8Vy25NzjRmuQtnN35xF7j3X2Z1TrV39XijZu8Mg4w8n",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmQX3qhb8eqEodCro4Rpn9foyXmmAiQfyDYnXKrASnN7Gu",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "678985.67",
            "totalSupply": "998875571577848",
            "totalSupplyFormatted": "998875571.577848",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/LetHimCookPublicChannel",
                "twitter": "https://twitter.com/LetHimCookCoin",
                "website": "https://www.lethimcook.art/",
                "moralis": "https://moralis.com/chain/solana/token/price/G8Vy25NzjRmuQtnN35xF7j3X2Z1TrV39XijZu8Mg4w8n"
            },
            "description": null
        }
    },
    "let-s-farty": {
        "contract_address": "5L5neHmTdmt3d8ao4x1iYx9ZUqm9ammrcr4AKML9pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5L5neHmTdmt3d8ao4x1iYx9ZUqm9ammrcr4AKML9pump",
            "standard": "metaplex",
            "name": "Let's Farty",
            "symbol": "FARTY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5L5neHmTdmt3d8ao4x1iYx9ZUqm9ammrcr4AKML9pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbegKc3Dnp1hcCdQFH46TbQKYzWFx1FNMERvRy2zb79DF",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2178768.81",
            "totalSupply": "999996699988555",
            "totalSupplyFormatted": "999996699.988555",
            "links": {
                "email": "contact@farty.land",
                "telegram": "https://t.me/fartylandofficial",
                "twitter": "https://x.com/fartyland",
                "website": "https://www.farty.land",
                "moralis": "https://moralis.com/chain/solana/token/price/5L5neHmTdmt3d8ao4x1iYx9ZUqm9ammrcr4AKML9pump"
            },
            "description": null
        }
    },
    "letstop": {
        "contract_address": "W2bAuFf2Xeb7ZNpJTywFSaCs5jYkaLYtBMR53SzVXUo",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "W2bAuFf2Xeb7ZNpJTywFSaCs5jYkaLYtBMR53SzVXUo",
            "standard": "metaplex",
            "name": "LETSTOP",
            "symbol": "STOP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_W2bAuFf2Xeb7ZNpJTywFSaCs5jYkaLYtBMR53SzVXUo",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://4ifqmfo24jgnpzlpklforbxouvtrkri5ekrs4c2sqzpymgfxpv3q.arweave.net/4gsGFdriTNflb1LK6IbupWcVRR0ioy4LUoZfhhi3fXc",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "55eky1CSYkuor3Q6V5PnhcxdBJqscnpj6TdhdtGNmyZM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "15145315.25",
            "totalSupply": "99999878199746410",
            "totalSupplyFormatted": "99999878.19974641",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/LETST0P",
                "twitter": "https://twitter.com/LETST0P",
                "website": "https://letstop.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/W2bAuFf2Xeb7ZNpJTywFSaCs5jYkaLYtBMR53SzVXUo"
            },
            "description": null
        }
    },
    "levia_us": {
        "contract_address": "4voSriVommQjWGpULifpwiywFZXdwuaTJ61qRU2mpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4voSriVommQjWGpULifpwiywFZXdwuaTJ61qRU2mpump",
            "standard": "metaplex",
            "name": "Levia_us",
            "symbol": "LEV",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4voSriVommQjWGpULifpwiywFZXdwuaTJ61qRU2mpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmNss88DkhLEN2MmxospqZRHXw6DmyGK9MrMkSSZqedU2Y",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1587911.27",
            "totalSupply": "999998280830428",
            "totalSupplyFormatted": "999998280.830428",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4voSriVommQjWGpULifpwiywFZXdwuaTJ61qRU2mpump"
            },
            "description": null
        }
    },
    "lexicon": {
        "contract_address": "E4wg8YF472u8oiLvSNKB84Y23gZhkSQ3PSCJaUj4pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "E4wg8YF472u8oiLvSNKB84Y23gZhkSQ3PSCJaUj4pump",
            "standard": "metaplex",
            "name": "Lexicon",
            "symbol": "LEXICON",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_E4wg8YF472u8oiLvSNKB84Y23gZhkSQ3PSCJaUj4pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPxH43kddiDiDTeonBSTsZ14Evc23UbmsfYSNn24CNaEi",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "247056.39",
            "totalSupply": "999965145002721",
            "totalSupplyFormatted": "999965145.002721",
            "links": {
                "github": "https://github.com/lexicon-labs/lexicon-mvp",
                "twitter": "https://x.com/lexiconinfra",
                "website": "https://lexicon.chat",
                "moralis": "https://moralis.com/chain/solana/token/price/E4wg8YF472u8oiLvSNKB84Y23gZhkSQ3PSCJaUj4pump"
            },
            "description": null
        }
    },
    "libra-4": {
        "contract_address": "7Zt2KUh5mkpEpPGcNcFy51aGkh9Ycb5ELcqRH1n2GmAe",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7Zt2KUh5mkpEpPGcNcFy51aGkh9Ycb5ELcqRH1n2GmAe",
            "standard": "metaplex",
            "name": "Libra",
            "symbol": "LIBRA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7Zt2KUh5mkpEpPGcNcFy51aGkh9Ycb5ELcqRH1n2GmAe",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/Gq_vrS34oLki3BJoSmye4V3kifYZsk8swZTZeboEN5w",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DUK1VN3WatYKsVLwRX2JxfJfaKX6bDXvijpPtT28ed13",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "335302.31",
            "totalSupply": "999950240426832",
            "totalSupplyFormatted": "999950240.426832",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7Zt2KUh5mkpEpPGcNcFy51aGkh9Ycb5ELcqRH1n2GmAe"
            },
            "description": null
        }
    },
    "libra-5": {
        "contract_address": "Bo9jh3wsmcC2AjakLWzNmKJ3SgtZmXEcSaW7L2FAvUsU",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Bo9jh3wsmcC2AjakLWzNmKJ3SgtZmXEcSaW7L2FAvUsU",
            "standard": "metaplex",
            "name": "LIBRA",
            "symbol": "LIBRA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Bo9jh3wsmcC2AjakLWzNmKJ3SgtZmXEcSaW7L2FAvUsU",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/bafkreignny757l6mm3n7s3ix7sxoazstqwvredp3qfejevwefsg2wk4mfm",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DefcyKc4yAjRsCLZjdxWuSUzVohXtLna9g22y3pBCm2z",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "116011819.28",
            "totalSupply": "999998442264876",
            "totalSupplyFormatted": "999998442.264876",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Bo9jh3wsmcC2AjakLWzNmKJ3SgtZmXEcSaW7L2FAvUsU"
            },
            "description": null
        }
    },
    "lido-staked-sol": {
        "contract_address": "7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj",
            "standard": "metaplex",
            "name": "Lido Staked SOL",
            "symbol": "stSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8kRRsKezwXS21beVDcAoTmih1XbyFnEAMXXiGXz6J3Jz",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8262106.34",
            "totalSupply": "49333368436891",
            "totalSupplyFormatted": "49333.368436891",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj"
            },
            "description": null
        }
    },
    "life-changing-pill": {
        "contract_address": "5XqzzdodsNtAM8TtQyiqGVbD7GwLBBN7oVnRA3hLpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5XqzzdodsNtAM8TtQyiqGVbD7GwLBBN7oVnRA3hLpump",
            "standard": "metaplex",
            "name": "life changing pill",
            "symbol": "PILL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5XqzzdodsNtAM8TtQyiqGVbD7GwLBBN7oVnRA3hLpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPPbfYy8Ufdrdz1uMdf9nLePv3rZTWvdYrh7jXwtqMaKo",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "361448.19",
            "totalSupply": "999519370985465",
            "totalSupplyFormatted": "999519370.985465",
            "links": {
                "email": "lifechangingpillsolana@gmail.com",
                "telegram": "https://t.me/lifechangingpill",
                "twitter": "https://x.com/pillcto",
                "website": "https://pill.fun",
                "moralis": "https://moralis.com/chain/solana/token/price/5XqzzdodsNtAM8TtQyiqGVbD7GwLBBN7oVnRA3hLpump"
            },
            "description": null
        }
    },
    "lil-bub-on-sol": {
        "contract_address": "3meWn4683ng7FgLVJJB2bYPaNSoqhWdritNdkd4Aw1aj",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3meWn4683ng7FgLVJJB2bYPaNSoqhWdritNdkd4Aw1aj",
            "standard": "metaplex",
            "name": "LIL BUB",
            "symbol": "BUB",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3meWn4683ng7FgLVJJB2bYPaNSoqhWdritNdkd4Aw1aj",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmeDgdpc4uhjBehzejzzjEaknB1Gc2V5hoo9JFfTHs5W4a",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "33201.57",
            "totalSupply": "999806384891645",
            "totalSupplyFormatted": "999806384.891645",
            "links": {
                "instagram": "https://www.instagram.com/lilbubsolana/",
                "medium": "https://medium.com/@lilbubsolana",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/lilbubsolana_portal",
                "tiktok": "https://www.tiktok.com/@lilbubsolana",
                "twitter": "https://twitter.com/lilbubsolana",
                "website": "https://lilbub.world/",
                "moralis": "https://moralis.com/chain/solana/token/price/3meWn4683ng7FgLVJJB2bYPaNSoqhWdritNdkd4Aw1aj"
            },
            "description": null
        }
    },
    "lillo-ai": {
        "contract_address": "5UNr4EKg7rBwjKK9xBGxGVwHuYWXFWu8VkewKquTpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5UNr4EKg7rBwjKK9xBGxGVwHuYWXFWu8VkewKquTpump",
            "standard": "metaplex",
            "name": "LILLO",
            "symbol": "LILLO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5UNr4EKg7rBwjKK9xBGxGVwHuYWXFWu8VkewKquTpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQStgNUn1zhJWTL68BVpC9r7UKw4G3fGhAi4dhojWYG8t",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "728171.12",
            "totalSupply": "999997422834518",
            "totalSupplyFormatted": "999997422.834518",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/5UNr4EKg7rBwjKK9xBGxGVwHuYWXFWu8VkewKquTpump"
            },
            "description": null
        }
    },
    "limbo": {
        "contract_address": "5UAMZkfNmuVcKzr2wo8Jqw4R1k8vfdAVJNN6h3bVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5UAMZkfNmuVcKzr2wo8Jqw4R1k8vfdAVJNN6h3bVpump",
            "standard": "metaplex",
            "name": "LIMBO",
            "symbol": "LIMBO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5UAMZkfNmuVcKzr2wo8Jqw4R1k8vfdAVJNN6h3bVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmbk1if5ie2hoC3P6nZrpHHK1KLJQN9dEiiR7VAyjbf1ky",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5601746.15",
            "totalSupply": "999978248793867",
            "totalSupplyFormatted": "999978248.793867",
            "links": {
                "discord": "https://discord.com/invite/youmio",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/Limbo_ai",
                "tiktok": "https://www.tiktok.com/@limbo_ai",
                "twitter": "https://x.com/Limbo_ai",
                "website": "https://www.youmio.ai",
                "youtube": "https://www.youtube.com/@youmio_ai",
                "moralis": "https://moralis.com/chain/solana/token/price/5UAMZkfNmuVcKzr2wo8Jqw4R1k8vfdAVJNN6h3bVpump"
            },
            "description": null
        }
    },
    "lime-cat": {
        "contract_address": "H3QMCaMh5LxtS9oGDwaMaRXPSPSiXVqnY4YsfrQMRjqD",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "H3QMCaMh5LxtS9oGDwaMaRXPSPSiXVqnY4YsfrQMRjqD",
            "standard": "metaplex",
            "name": "Lime Cat",
            "symbol": "LIME",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_H3QMCaMh5LxtS9oGDwaMaRXPSPSiXVqnY4YsfrQMRjqD",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreiea6r23ohsheaawmede2gvrmmt5j7gk6settmdxil22nihg5gp3su.ipfs.nftstorage.link/",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AsPu1XVugmVaAg6ghrcz1DdikTi4D9aoAPAFdRRo14Pe",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "77489.78",
            "totalSupply": "99986809023663572",
            "totalSupplyFormatted": "99986809023.663572",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/H3QMCaMh5LxtS9oGDwaMaRXPSPSiXVqnY4YsfrQMRjqD"
            },
            "description": null
        }
    },
    "limitless": {
        "contract_address": "44o1iDPGuzHxQgDrPE3HRb2WXwGLsBsY7yMttX47pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "44o1iDPGuzHxQgDrPE3HRb2WXwGLsBsY7yMttX47pump",
            "standard": "metaplex",
            "name": "LIMITLESS",
            "symbol": "LIMITLESS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_44o1iDPGuzHxQgDrPE3HRb2WXwGLsBsY7yMttX47pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmb7hrEGqKqNKQdjeSib6dwvJN2fmWtvfG1dRHUMeqDVHj",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1445285.64",
            "totalSupply": "999981067726550",
            "totalSupplyFormatted": "999981067.72655",
            "links": {
                "email": "alpha@onlywithneo.com",
                "telegram": "https://t.me/transcend_reality",
                "twitter": "https://x.com/onlywithneo",
                "website": "https://www.onlywithneo.com",
                "moralis": "https://moralis.com/chain/solana/token/price/44o1iDPGuzHxQgDrPE3HRb2WXwGLsBsY7yMttX47pump"
            },
            "description": null
        }
    },
    "limitus": {
        "contract_address": "86t88w3MKT38HChTBKBwEeb1RW1MeTceaW68qY2Vpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "86t88w3MKT38HChTBKBwEeb1RW1MeTceaW68qY2Vpump",
            "standard": "metaplex",
            "name": "LIMITUS",
            "symbol": "LMT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_86t88w3MKT38HChTBKBwEeb1RW1MeTceaW68qY2Vpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQ7dtR28X9fyDCJXucnETYqUs3YZPVzLtfnTJDVNo5yRD",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "34894850.82",
            "totalSupply": "999986153307455",
            "totalSupplyFormatted": "999986153.307455",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/limitusintel",
                "website": "https://www.limitus.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/86t88w3MKT38HChTBKBwEeb1RW1MeTceaW68qY2Vpump"
            },
            "description": null
        }
    },
    "listen-rs": {
        "contract_address": "Cn5Ne1vmR9ctMGY9z5NC71A3NYFvopjXNyxYtfVYpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Cn5Ne1vmR9ctMGY9z5NC71A3NYFvopjXNyxYtfVYpump",
            "standard": "metaplex",
            "name": "listen-rs",
            "symbol": "listen",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Cn5Ne1vmR9ctMGY9z5NC71A3NYFvopjXNyxYtfVYpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmaujLDEbH9i8jHehteAZbxQKd9cV7Khf6EirJE5Fr7W4d",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6198182.66",
            "totalSupply": "999991554992854",
            "totalSupplyFormatted": "999991554.992854",
            "links": {
                "github": "https://github.com/piotrostr/listen",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/listendefai",
                "twitter": "https://x.com/piotreksol",
                "website": "https://listen-rs.com",
                "moralis": "https://moralis.com/chain/solana/token/price/Cn5Ne1vmR9ctMGY9z5NC71A3NYFvopjXNyxYtfVYpump"
            },
            "description": null
        }
    },
    "litecoin-mascot": {
        "contract_address": "5z3iCe53hUANTiG8Js8RjHNE2Arjik7L2CXLyr2rpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5z3iCe53hUANTiG8Js8RjHNE2Arjik7L2CXLyr2rpump",
            "standard": "metaplex",
            "name": "Litecoin Mascot",
            "symbol": "LESTER",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5z3iCe53hUANTiG8Js8RjHNE2Arjik7L2CXLyr2rpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbeTBcPjyyH2RqiySmrwm9A42HRkrgbWnkvG5uQ5guA7B",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2020146.18",
            "totalSupply": "999976823242853",
            "totalSupplyFormatted": "999976823.242853",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/5z3iCe53hUANTiG8Js8RjHNE2Arjik7L2CXLyr2rpump"
            },
            "description": null
        }
    },
    "littlemanyu": {
        "contract_address": "CS7LmjtuugEUWtFgfyto79nrksKigv7Fdcp9qPuigdLs",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CS7LmjtuugEUWtFgfyto79nrksKigv7Fdcp9qPuigdLs",
            "standard": "metaplex",
            "name": "littlemanyu",
            "symbol": "Manyu",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CS7LmjtuugEUWtFgfyto79nrksKigv7Fdcp9qPuigdLs",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXM6sjkaxEPNg9nJW9Ss5MyvQuFH2btQVmj7F7ozkb4Eh",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "285167.70",
            "totalSupply": "999263077426258",
            "totalSupplyFormatted": "999263077.426258",
            "links": {
                "facebook": "https://facebook.com/lilmanyu",
                "instagram": "https://instagram.com/littlemanyu_",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+5q8V13GNDrg3ZjI8",
                "tiktok": "https://tiktok.com/@littlemanyu",
                "twitter": "https://x.com/ManyuTokenSOL",
                "website": "https://www.littlemanyu.xyz",
                "youtube": "https://www.youtube.com/@littlemanyu_",
                "moralis": "https://moralis.com/chain/solana/token/price/CS7LmjtuugEUWtFgfyto79nrksKigv7Fdcp9qPuigdLs"
            },
            "description": null
        }
    },
    "loafcat": {
        "contract_address": "LoafdJ3WSAvsrx3zppSGKA6sRvL9GrRrU1iRV7HkLkm",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "LoafdJ3WSAvsrx3zppSGKA6sRvL9GrRrU1iRV7HkLkm",
            "standard": "metaplex",
            "name": "LOAFCAT",
            "symbol": "LOAFCAT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_LoafdJ3WSAvsrx3zppSGKA6sRvL9GrRrU1iRV7HkLkm",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/N3x81BITOuuo_W92r3zx3BzrqXcohWQ7FuC3YBIHn2g",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Eoa4aBvcVbykaWrx4mnN36SRWBUScPs4ybVGUa9k9WnG",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "664377.65",
            "totalSupply": "9975640416313354972",
            "totalSupplyFormatted": "99756404163.13354972",
            "links": {
                "telegram": "https://t.me/LOAFCATCTO",
                "twitter": "https://twitter.com/loafcathq",
                "website": "https://loafcat.me/",
                "moralis": "https://moralis.com/chain/solana/token/price/LoafdJ3WSAvsrx3zppSGKA6sRvL9GrRrU1iRV7HkLkm"
            },
            "description": null
        }
    },
    "lock-in": {
        "contract_address": "8Ki8DpuWNxu9VsS3kQbarsCWMcFGWkzzA8pUPto9zBd5",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8Ki8DpuWNxu9VsS3kQbarsCWMcFGWkzzA8pUPto9zBd5",
            "standard": "metaplex",
            "name": "LOCK IN",
            "symbol": "LOCKIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8Ki8DpuWNxu9VsS3kQbarsCWMcFGWkzzA8pUPto9zBd5",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRoK51Ez4MPzYRMQAggvREoDPfGtj1fj1D5UtrixUwnAj",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "3JmxqCyqg49h9xKoUjGLo6DrXEpbrJu86g2wrLgMmjUV",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "7400397.78",
            "totalSupply": "994368786408487910",
            "totalSupplyFormatted": "994368786.40848791",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/lockinportal",
                "website": "https://www.lockinsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/8Ki8DpuWNxu9VsS3kQbarsCWMcFGWkzzA8pUPto9zBd5"
            },
            "description": null
        }
    },
    "lol-3": {
        "contract_address": "LoL1RDQiUfifC2BX28xaef6r2G8ES8SEzgrzThJemMv",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "LoL1RDQiUfifC2BX28xaef6r2G8ES8SEzgrzThJemMv",
            "standard": "metaplex",
            "name": "LOL",
            "symbol": "LOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_LoL1RDQiUfifC2BX28xaef6r2G8ES8SEzgrzThJemMv",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmWhuQ6L7HwCWgXoDtmRsZcKzrpgnRRRBQvBzeS5XYVniP",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1931552.64",
            "totalSupply": "977348616732345",
            "totalSupplyFormatted": "977348616.732345",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/LoL1RDQiUfifC2BX28xaef6r2G8ES8SEzgrzThJemMv"
            },
            "description": null
        }
    },
    "looby-by-stephen-bliss": {
        "contract_address": "CyRbC97yrkUB31sv9PLw5Hw8276zXH4sRoTE1KcDpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CyRbC97yrkUB31sv9PLw5Hw8276zXH4sRoTE1KcDpump",
            "standard": "metaplex",
            "name": "Looby by Stephen Bliss",
            "symbol": "LOOBY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CyRbC97yrkUB31sv9PLw5Hw8276zXH4sRoTE1KcDpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmeZPMmYPRGgT1K1DYxiTWcTxtUxbyY8AzfcVpip8AqYSn",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "264348.65",
            "totalSupply": "999968400583669",
            "totalSupplyFormatted": "999968400.583669",
            "links": {
                "telegram": "https://t.me/LoobyOnSol",
                "tiktok": "https://www.tiktok.com/@loobyonsol",
                "twitter": "https://x.com/LoobyonSol",
                "website": "https://www.looby.love/",
                "moralis": "https://moralis.com/chain/solana/token/price/CyRbC97yrkUB31sv9PLw5Hw8276zXH4sRoTE1KcDpump"
            },
            "description": null
        }
    },
    "look-bro": {
        "contract_address": "BSqMUYb6ePwKsby85zrXaDa4SNf6AgZ9YfA2c4mZpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BSqMUYb6ePwKsby85zrXaDa4SNf6AgZ9YfA2c4mZpump",
            "standard": "metaplex",
            "name": "Look bro...",
            "symbol": "LOOK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BSqMUYb6ePwKsby85zrXaDa4SNf6AgZ9YfA2c4mZpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmX7CPWb3khdky25JXHZRXsaEyXp1s5kfZr4gX62ocwx89",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "278208.33",
            "totalSupply": "999724496356565",
            "totalSupplyFormatted": "999724496.356565",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/zbBdfNeWmG",
                "twitter": "https://twitter.com/look_solana",
                "website": "https://looksolana.com",
                "moralis": "https://moralis.com/chain/solana/token/price/BSqMUYb6ePwKsby85zrXaDa4SNf6AgZ9YfA2c4mZpump"
            },
            "description": null
        }
    },
    "lou": {
        "contract_address": "5DQSDg6SGkbsbykq4mQstpcL4d5raEHc6rY7LgBwpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5DQSDg6SGkbsbykq4mQstpcL4d5raEHc6rY7LgBwpump",
            "standard": "metaplex",
            "name": "lou",
            "symbol": "lou",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5DQSDg6SGkbsbykq4mQstpcL4d5raEHc6rY7LgBwpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWVboZQVgtcTkxdKhiu4QTbHzbYB1EjeAEEDi8Td5Y4UX",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2178829.97",
            "totalSupply": "999947666270267",
            "totalSupplyFormatted": "999947666.270267",
            "links": {
                "email": "lougoodvibes@gmail.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/theloucoinonsol",
                "twitter": "https://x.com/Loucoinonsol",
                "website": "https://www.loucoinonsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/5DQSDg6SGkbsbykq4mQstpcL4d5raEHc6rY7LgBwpump"
            },
            "description": null
        }
    },
    "loulou": {
        "contract_address": "7BMb4jNt2tQG81jX7W22H2h2UyL4SW9QJgz25HRhpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7BMb4jNt2tQG81jX7W22H2h2UyL4SW9QJgz25HRhpump",
            "standard": "metaplex",
            "name": "loulou",
            "symbol": "loulou",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7BMb4jNt2tQG81jX7W22H2h2UyL4SW9QJgz25HRhpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmfX9fqimTwnXZV1DCA1KCt5cMNSBQgFcZURx5PF6trnW1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2160524.40",
            "totalSupply": "999990465947962",
            "totalSupplyFormatted": "999990465.947962",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7BMb4jNt2tQG81jX7W22H2h2UyL4SW9QJgz25HRhpump"
            },
            "description": null
        }
    },
    "luci": {
        "contract_address": "5Ke381D44MEQg3BQarWhAwhj1xbdNvXe2KHkTiZzw7r5",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5Ke381D44MEQg3BQarWhAwhj1xbdNvXe2KHkTiZzw7r5",
            "standard": "metaplex",
            "name": "LUCI",
            "symbol": "LUCI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5Ke381D44MEQg3BQarWhAwhj1xbdNvXe2KHkTiZzw7r5",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/OX2w9OCPViipdUdWm7yl",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "279928.77",
            "totalSupply": "997625639220019829",
            "totalSupplyFormatted": "997625639.220019829",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/lucitheportal",
                "twitter": "https://x.com/lucithecoin",
                "website": "https://luci.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/5Ke381D44MEQg3BQarWhAwhj1xbdNvXe2KHkTiZzw7r5"
            },
            "description": null
        }
    },
    "lumichill": {
        "contract_address": "BzpqoPc44oaHu9SB5hek1GRNjzc4UwFcL4oWusWozm3N",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BzpqoPc44oaHu9SB5hek1GRNjzc4UwFcL4oWusWozm3N",
            "standard": "metaplex",
            "name": "LumiChill",
            "symbol": "CHILL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BzpqoPc44oaHu9SB5hek1GRNjzc4UwFcL4oWusWozm3N",
            "decimals": "3",
            "metaplex": {
                "metadataUri": "https://bafkreiekgmr4q4ct6vrd2xotbumeta6axmccm72sfwfjmp3gmxblpptyqa.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8LmqkE2xhhdx1gvRAM9Uzbcv4JWEBpUrv5GC6fegifT1",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "46974.33",
            "totalSupply": "17781858003718722",
            "totalSupplyFormatted": "17781858003718.722",
            "links": {
                "instagram": "https://www.instagram.com/itslumichill/",
                "telegram": "https://t.me/lumichill",
                "tiktok": "https://www.tiktok.com/@lumichill",
                "twitter": "https://x.com/LumiChillCoin",
                "website": "https://lumichill.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/BzpqoPc44oaHu9SB5hek1GRNjzc4UwFcL4oWusWozm3N"
            },
            "description": null
        }
    },
    "lumo-8b-instruct": {
        "contract_address": "4FkNq8RcCYg4ZGDWh14scJ7ej3m5vMjYTcWoJVkupump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4FkNq8RcCYg4ZGDWh14scJ7ej3m5vMjYTcWoJVkupump",
            "standard": "metaplex",
            "name": "Lumo-8B-Instruct",
            "symbol": "LUMO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4FkNq8RcCYg4ZGDWh14scJ7ej3m5vMjYTcWoJVkupump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVnMN8gCDvSgKSkpugUESx1oPEacsFFbwuEV5gVyLGqyo",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5067613.42",
            "totalSupply": "999988835666220",
            "totalSupplyFormatted": "999988835.66622",
            "links": {
                "telegram": "https://t.me/lumolabsdotai",
                "twitter": "https://x.com/lumolabsdotai",
                "website": "https://www.lumolabs.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/4FkNq8RcCYg4ZGDWh14scJ7ej3m5vMjYTcWoJVkupump"
            },
            "description": null
        }
    },
    "lux-token": {
        "contract_address": "BmXfbamFqrBzrqihr9hbSmEsfQUXMVaqshAjgvZupump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BmXfbamFqrBzrqihr9hbSmEsfQUXMVaqshAjgvZupump",
            "standard": "metaplex",
            "name": "Lux Token",
            "symbol": "LUX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BmXfbamFqrBzrqihr9hbSmEsfQUXMVaqshAjgvZupump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcKRX7cmGggmZzdwFpX75s7mSjy1QVxzAgmAUJakD6DEA",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2360342.87",
            "totalSupply": "999978761634605",
            "totalSupplyFormatted": "999978761.634605",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/BmXfbamFqrBzrqihr9hbSmEsfQUXMVaqshAjgvZupump"
            },
            "description": null
        }
    },
    "lynk-coin": {
        "contract_address": "BfxhMerBkBhRUGn4tX5YrBRqLqN8VjvUXHhU7K9Fpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BfxhMerBkBhRUGn4tX5YrBRqLqN8VjvUXHhU7K9Fpump",
            "standard": "metaplex",
            "name": "Lynk Coin",
            "symbol": "LYNK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BfxhMerBkBhRUGn4tX5YrBRqLqN8VjvUXHhU7K9Fpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRRUQEYWqRFRfy55tZL3vmh498kd3EyRWN7JWfZHqGFky",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8610177.12",
            "totalSupply": "999959946965855",
            "totalSupplyFormatted": "999959946.965855",
            "links": {
                "email": "team@thelynkcoin.com",
                "instagram": "https://www.instagram.com/lynkmeme",
                "telegram": "https://t.me/LYNKTOMARS",
                "tiktok": "https://www.tiktok.com/@lynkmeme",
                "twitter": "https://twitter.com/thelynkcoinsol",
                "website": "https://thelynkcoin.com",
                "moralis": "https://moralis.com/chain/solana/token/price/BfxhMerBkBhRUGn4tX5YrBRqLqN8VjvUXHhU7K9Fpump"
            },
            "description": null
        }
    },
    "m3m3": {
        "contract_address": "M3M3pSFptfpZYnWNUgAbyWzKKgPo5d1eWmX6tbiSF2K",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "M3M3pSFptfpZYnWNUgAbyWzKKgPo5d1eWmX6tbiSF2K",
            "standard": "metaplex",
            "name": "M3M3",
            "symbol": "M3M3",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_M3M3pSFptfpZYnWNUgAbyWzKKgPo5d1eWmX6tbiSF2K",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/bafkreierkswensa5cpqsq36fnydcdkrm2zwvl5tbhw76mpu34zbpjzsoju",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AiFTyukukUsKjEVtREpD9QENfe8SKuKZYmYVLrUVQU4q",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4878436.04",
            "totalSupply": "999942411879052352",
            "totalSupplyFormatted": "999942411.879052352",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/WEAREM3M3",
                "twitter": "https://twitter.com/WEAREM3M3_",
                "website": "https://m3m3.meteora.ag/",
                "moralis": "https://moralis.com/chain/solana/token/price/M3M3pSFptfpZYnWNUgAbyWzKKgPo5d1eWmX6tbiSF2K"
            },
            "description": null
        }
    },
    "mad-2": {
        "contract_address": "madHpjRn6bd8t78Rsy7NuSuNwWa2HU8ByPobZprHbHv",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "madHpjRn6bd8t78Rsy7NuSuNwWa2HU8ByPobZprHbHv",
            "standard": "metaplex",
            "name": "MAD",
            "symbol": "MAD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_madHpjRn6bd8t78Rsy7NuSuNwWa2HU8ByPobZprHbHv",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/kq22VSTLugpwwm62lnpmz95m06g6SS0Ng4rsxLkc2rU",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CNBxpRqrzZZenHU4jT9XXpcxPChtDafTnnrUfSyYFmP8",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "5518725.62",
            "totalSupply": "999950284801402487",
            "totalSupplyFormatted": "999950284801.402487",
            "links": {
                "email": "contact@madcoin.vip",
                "instagram": "https://www.instagram.com/madcoinvip/",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/MadCoinAnn",
                "tiktok": "https://www.tiktok.com/@madcoinvip",
                "twitter": "https://x.com/madcoinvip",
                "website": "https://www.madcoin.vip/",
                "youtube": "https://www.youtube.com/@MadCoinVip",
                "moralis": "https://moralis.com/chain/solana/token/price/madHpjRn6bd8t78Rsy7NuSuNwWa2HU8ByPobZprHbHv"
            },
            "description": null
        }
    },
    "made-in-america": {
        "contract_address": "Dy7M5B3Z5GnyhyHKkcHRFpYxw6eyiF1gqsDTBiT4t4oQ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Dy7M5B3Z5GnyhyHKkcHRFpYxw6eyiF1gqsDTBiT4t4oQ",
            "standard": "metaplex",
            "name": "Made In America",
            "symbol": "$MIA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Dy7M5B3Z5GnyhyHKkcHRFpYxw6eyiF1gqsDTBiT4t4oQ",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWTFdDzfdQskJ7HF9MEND6REXhN9mEYCFFq6vTerp3kZm",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "402805.47",
            "totalSupply": "999941582791048",
            "totalSupplyFormatted": "999941582.791048",
            "links": {
                "email": "team@madeinamerica.info",
                "telegram": "https://t.me/MIA_SOL_TG",
                "twitter": "https://x.com/MIA_SOL_X",
                "website": "https://www.madeinamerica.info/",
                "moralis": "https://moralis.com/chain/solana/token/price/Dy7M5B3Z5GnyhyHKkcHRFpYxw6eyiF1gqsDTBiT4t4oQ"
            },
            "description": null
        }
    },
    "magaverse": {
        "contract_address": "6dk9H7RD5m8JtRuUErNztwhBbr5ynzWvzPTusLpxpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6dk9H7RD5m8JtRuUErNztwhBbr5ynzWvzPTusLpxpump",
            "standard": "metaplex",
            "name": "Magaverse",
            "symbol": "MVRS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6dk9H7RD5m8JtRuUErNztwhBbr5ynzWvzPTusLpxpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXiQXsFySvhURDFwpU85eU3nFGftVFVBHxLnsY1zXEZdC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "285236.30",
            "totalSupply": "999857325930748",
            "totalSupplyFormatted": "999857325.930748",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/6dk9H7RD5m8JtRuUErNztwhBbr5ynzWvzPTusLpxpump"
            },
            "description": null
        }
    },
    "magic-eden": {
        "contract_address": "MEFNBXixkEbait3xn9bkm8WsJzXtVsaJEn4c8Sam21u",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "MEFNBXixkEbait3xn9bkm8WsJzXtVsaJEn4c8Sam21u",
            "standard": "metaplex",
            "name": "Magic Eden",
            "symbol": "ME",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_MEFNBXixkEbait3xn9bkm8WsJzXtVsaJEn4c8Sam21u",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/qiVisdmEVqjp7-Vq_C1x4tRjUYaaZibRh98ZhJ8oJmo",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9GWPeu3cBfkGSEit6HMaAFKswoirxqgMqykMh7RVH2Bb",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1118051659.19",
            "totalSupply": "999999695177377",
            "totalSupplyFormatted": "999999695.177377",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/MeFndn",
                "website": "https://magiceden.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/MEFNBXixkEbait3xn9bkm8WsJzXtVsaJEn4c8Sam21u"
            },
            "description": null
        }
    },
    "magnet-2": {
        "contract_address": "8iWsK2WH3AGviQwAnt43zvc8yLy6QMUSuv8PK2A7pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8iWsK2WH3AGviQwAnt43zvc8yLy6QMUSuv8PK2A7pump",
            "standard": "metaplex",
            "name": "Magnet",
            "symbol": "\ud83e\uddf2",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8iWsK2WH3AGviQwAnt43zvc8yLy6QMUSuv8PK2A7pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQv8zWyFjMZKBL64XHLqxTeykJFwMXmWVrFfrXhFK9JSU",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "100593.60",
            "totalSupply": "999836979947623",
            "totalSupplyFormatted": "999836979.947623",
            "links": {
                "reddit": "https://www.reddit.com",
                "website": "https://pump.fun/8iWsK2WH3AGviQwAnt43zvc8yLy6QMUSuv8PK2A7pump",
                "moralis": "https://moralis.com/chain/solana/token/price/8iWsK2WH3AGviQwAnt43zvc8yLy6QMUSuv8PK2A7pump"
            },
            "description": null
        }
    },
    "maiar": {
        "contract_address": "G5e2XonmccmdKc98g3eNQe5oBYGw9m8xdMUvVtcZpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "G5e2XonmccmdKc98g3eNQe5oBYGw9m8xdMUvVtcZpump",
            "standard": "metaplex",
            "name": "MAIAR",
            "symbol": "MAIAR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_G5e2XonmccmdKc98g3eNQe5oBYGw9m8xdMUvVtcZpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmV5KuHwUfioRNY7iSsdyzXUbAAHJ9b7ijZsN9t1RoM3Ev",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3602429.78",
            "totalSupply": "999963576862968",
            "totalSupplyFormatted": "999963576.862968",
            "links": {
                "discord": "https://discord.com/invite/vhsQH7sdUb",
                "github": "https://github.com/UraniumCorporation/maiar-ai",
                "reddit": "https://www.reddit.com",
                "twitter": "https://x.com/Maiar_AI",
                "website": "https://maiar.dev/",
                "moralis": "https://moralis.com/chain/solana/token/price/G5e2XonmccmdKc98g3eNQe5oBYGw9m8xdMUvVtcZpump"
            },
            "description": null
        }
    },
    "major-frog": {
        "contract_address": "CNyMaRR4krm1yAxfCvPXevNMArZZZk7sRqKwX68uCeJk",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CNyMaRR4krm1yAxfCvPXevNMArZZZk7sRqKwX68uCeJk",
            "standard": "metaplex",
            "name": "Major Frog",
            "symbol": "MAJOR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CNyMaRR4krm1yAxfCvPXevNMArZZZk7sRqKwX68uCeJk",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/KTUhCF6dhvQdH8HpM2Ti",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4785167.96",
            "totalSupply": "987934197253468566",
            "totalSupplyFormatted": "987934197.253468566",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/CNyMaRR4krm1yAxfCvPXevNMArZZZk7sRqKwX68uCeJk"
            },
            "description": null
        }
    },
    "make-europe-great-again": {
        "contract_address": "5mfWKJrjVtpZo8EvwbytFWH5X6T8YecxrrYCgskjpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5mfWKJrjVtpZo8EvwbytFWH5X6T8YecxrrYCgskjpump",
            "standard": "metaplex",
            "name": "Make Europe Great Again",
            "symbol": "MEGA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5mfWKJrjVtpZo8EvwbytFWH5X6T8YecxrrYCgskjpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYY7vWC4xJDS4TG8vMYbuYCH4ZJt4rkA1dtXuwarTFivb",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "248722.02",
            "totalSupply": "999694623758167",
            "totalSupplyFormatted": "999694623.758167",
            "links": {
                "telegram": "https://t.me/maga_onsolana",
                "twitter": "https://x.com/elonmusk",
                "website": "https://mega-solana.com",
                "moralis": "https://moralis.com/chain/solana/token/price/5mfWKJrjVtpZo8EvwbytFWH5X6T8YecxrrYCgskjpump"
            },
            "description": null
        }
    },
    "mamabull": {
        "contract_address": "SJWKUQ8hcSjxizfVGmAB9Rb97znrXFHbRiad2J1pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "SJWKUQ8hcSjxizfVGmAB9Rb97znrXFHbRiad2J1pump",
            "standard": "metaplex",
            "name": "MamaBull",
            "symbol": "MAMA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_SJWKUQ8hcSjxizfVGmAB9Rb97znrXFHbRiad2J1pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qma7RyNYgykfHjV1vH919U1QKKME5tt9ssNvHdBmi1rAgT",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1739171.55",
            "totalSupply": "999980764447225",
            "totalSupplyFormatted": "999980764.447225",
            "links": {
                "email": "media@mamabulltoken.com",
                "facebook": "https://facebook.com/mamabulltoken",
                "instagram": "https://www.instagram.com/mamabulltoken",
                "medium": "https://medium.com/@mamabulltoken",
                "telegram": "https://t.me/mamabulltoken",
                "tiktok": "https://www.tiktok.com/@mamabulltoken",
                "twitter": "https://x.com/mamabull_token",
                "website": "https://mamabulltoken.com",
                "youtube": "https://www.youtube.com/@mamaBullToken",
                "moralis": "https://moralis.com/chain/solana/token/price/SJWKUQ8hcSjxizfVGmAB9Rb97znrXFHbRiad2J1pump"
            },
            "description": null
        }
    },
    "maneki": {
        "contract_address": "25hAyBQfoDhfWx9ay6rarbgvWGwDdNqcHsXS3jQ3mTDJ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "25hAyBQfoDhfWx9ay6rarbgvWGwDdNqcHsXS3jQ3mTDJ",
            "standard": "metaplex",
            "name": "MANEKI",
            "symbol": "MANEKI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_25hAyBQfoDhfWx9ay6rarbgvWGwDdNqcHsXS3jQ3mTDJ",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://bafkreicoefaqt5vmjww5akg6zpganwcvfnmk2o3bossqwadymttps252z4.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GVP9YZHRSiwD8PfzSyhVLvwJQNCMN5vMxoUDFA1o2ZDa",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "11922992.76",
            "totalSupply": "885873109954596",
            "totalSupplyFormatted": "8858731099.54596",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "http://t.me/maneki_official",
                "twitter": "https://x.com/unrevealedxyz?s=21&t=0RtVzV5UpcseQByG0w-mOQ",
                "website": "https://manekineko.world/",
                "moralis": "https://moralis.com/chain/solana/token/price/25hAyBQfoDhfWx9ay6rarbgvWGwDdNqcHsXS3jQ3mTDJ"
            },
            "description": null
        }
    },
    "manifest-on-sol": {
        "contract_address": "6cvrZWgEUkr82yKAmxp5cQu7wgYYBPULf16EUBp4pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6cvrZWgEUkr82yKAmxp5cQu7wgYYBPULf16EUBp4pump",
            "standard": "metaplex",
            "name": "Manifest",
            "symbol": "MANIFEST",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6cvrZWgEUkr82yKAmxp5cQu7wgYYBPULf16EUBp4pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmZgRtcHdFbQNKFDJGyveNC49VmWAFJw9B7dtN2XMTrMyk",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "353214.12",
            "totalSupply": "999878618862282",
            "totalSupplyFormatted": "999878618.862282",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/6cvrZWgEUkr82yKAmxp5cQu7wgYYBPULf16EUBp4pump"
            },
            "description": null
        }
    },
    "mantis": {
        "contract_address": "Mant1sZcb8x2YMZe7RdqSfStCj4YxjmQByNKyHpLJK9",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Mant1sZcb8x2YMZe7RdqSfStCj4YxjmQByNKyHpLJK9",
            "standard": "metaplex",
            "name": "Mantis",
            "symbol": "M",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Mant1sZcb8x2YMZe7RdqSfStCj4YxjmQByNKyHpLJK9",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/64XXmx1MGJxlB6kelEyyD3wzYrDnkOHdbgxa4ZR42dM",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "PYsq43ovMAvj3yuiF7jgfcfbCgASapELHKAQPDS6WfU",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3064319.17",
            "totalSupply": "99999969747511520",
            "totalSupplyFormatted": "99999969.74751152",
            "links": {
                "github": "https://github.com/ComposableFi/mantis_sdk",
                "twitter": "https://twitter.com/mantis",
                "website": "https://mantis.app/",
                "moralis": "https://moralis.com/chain/solana/token/price/Mant1sZcb8x2YMZe7RdqSfStCj4YxjmQByNKyHpLJK9"
            },
            "description": null
        }
    },
    "marinade": {
        "contract_address": "MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey",
            "standard": "metaplex",
            "name": "Marinade",
            "symbol": "MNDE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AqH29mZfQFgRpfwaPoTMWSKJ5kqauoc1FwVBRksZyQrt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "84144221.25",
            "totalSupply": "999998648147187043",
            "totalSupplyFormatted": "999998648.147187043",
            "links": {
                "discord": "https://discord.com/invite/6EtUf4Euu6",
                "github": "https://github.com/marinade-finance/",
                "medium": "https://medium.com/marinade-finance",
                "twitter": "https://twitter.com/marinadeFinance",
                "website": "https://marinade.finance/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey"
            },
            "description": null
        }
    },
    "market-dominance": {
        "contract_address": "C4j7kPx9PqDnfvxe2uycJQRTAeyGwmU4DyGf21Xgpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "C4j7kPx9PqDnfvxe2uycJQRTAeyGwmU4DyGf21Xgpump",
            "standard": "metaplex",
            "name": "Market Dominance",
            "symbol": "MD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_C4j7kPx9PqDnfvxe2uycJQRTAeyGwmU4DyGf21Xgpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmNX5ybzLP84knDUmnXfG5NMeQfxKR7CYtz2PSzfMyChUh",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1159028.51",
            "totalSupply": "546769073876471",
            "totalSupplyFormatted": "546769073.876471",
            "links": {
                "telegram": "https://t.me/market_dominance",
                "twitter": "https://twitter.com/MarketDomSol",
                "website": "https://dominance.market/",
                "moralis": "https://moralis.com/chain/solana/token/price/C4j7kPx9PqDnfvxe2uycJQRTAeyGwmU4DyGf21Xgpump"
            },
            "description": null
        }
    },
    "markkacy": {
        "contract_address": "6QSVGUEyBZWRshnXKhS96NQ97vGWiTu61SyHLAbYpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6QSVGUEyBZWRshnXKhS96NQ97vGWiTu61SyHLAbYpump",
            "standard": "metaplex",
            "name": "markkacy",
            "symbol": "KACY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6QSVGUEyBZWRshnXKhS96NQ97vGWiTu61SyHLAbYpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcEdLEsCAfeMeAECVv5B3SL3nXYYwEnKyMXGK53k3JZjj",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "302911.34",
            "totalSupply": "999885596963009",
            "totalSupplyFormatted": "999885596.963009",
            "links": {
                "instagram": "https://www.instagram.com/mark_kacy/",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/KacyCto",
                "tiktok": "https://tiktok.com/@mark_kacy",
                "twitter": "https://x.com/mark_kacy",
                "website": "https://www.itsmarkkacy.lol/",
                "moralis": "https://moralis.com/chain/solana/token/price/6QSVGUEyBZWRshnXKhS96NQ97vGWiTu61SyHLAbYpump"
            },
            "description": null
        }
    },
    "maxx-2": {
        "contract_address": "F5hXpxtsK7UeFC2gsbiTbyhVrUNXN5JG7xkDqpQfpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F5hXpxtsK7UeFC2gsbiTbyhVrUNXN5JG7xkDqpQfpump",
            "standard": "metaplex",
            "name": "MAXX",
            "symbol": "MAXX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_F5hXpxtsK7UeFC2gsbiTbyhVrUNXN5JG7xkDqpQfpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmafZvJktgsdHWsFPxyqvi2oRbW6wtZ3yLPWy1NHqgqXJb",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "18800.34",
            "totalSupply": "998743287451647",
            "totalSupplyFormatted": "998743287.451647",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/F5hXpxtsK7UeFC2gsbiTbyhVrUNXN5JG7xkDqpQfpump"
            },
            "description": null
        }
    },
    "mcdull": {
        "contract_address": "Buoj8HCZMnLRwzDmjzaswhkVhLZD58PG4pZ7rnYp6pCr",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Buoj8HCZMnLRwzDmjzaswhkVhLZD58PG4pZ7rnYp6pCr",
            "standard": "metaplex",
            "name": "McDull",
            "symbol": "MCDULL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Buoj8HCZMnLRwzDmjzaswhkVhLZD58PG4pZ7rnYp6pCr",
            "decimals": "3",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRxXtFfXhqdgquPHDqYXjA5ScL1i8wxG3WTqMJqt2kmsp",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Du1qZgj25FS5eTKVFuQ45Jvxwn9FNRJqzcYQKHtPnb4P",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "37342219.73",
            "totalSupply": "8888888295908564",
            "totalSupplyFormatted": "8888888295908.564",
            "links": {
                "instagram": "https://www.instagram.com/mcdull.io/",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/mcdull_io",
                "twitter": "https://x.com/mcdull_io",
                "website": "https://mcdull.io/",
                "youtube": "https://www.youtube.com/@Mcdull_io",
                "moralis": "https://moralis.com/chain/solana/token/price/Buoj8HCZMnLRwzDmjzaswhkVhLZD58PG4pZ7rnYp6pCr"
            },
            "description": null
        }
    },
    "melania-meme": {
        "contract_address": "FUAfBo2jgks6gB4Z4LfZkqSZgzNucisEHqnNebaRxM1P",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FUAfBo2jgks6gB4Z4LfZkqSZgzNucisEHqnNebaRxM1P",
            "standard": "metaplex",
            "name": "Melania Meme",
            "symbol": "MELANIA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FUAfBo2jgks6gB4Z4LfZkqSZgzNucisEHqnNebaRxM1P",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/bafkreihl6322gqmdg5hkg6vcqnuxceok5kfgespmmua7zmqlx4r4myuuu4",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GtdNPbbWHJjUWzUoGggCfAxiNJwbe1a7FwHn2mcaHC3D",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "777381703.94",
            "totalSupply": "999999233251679",
            "totalSupplyFormatted": "999999233.251679",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://x.com/MELANIATRUMP/status/1881087523847593995",
                "website": "https://melaniameme.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/FUAfBo2jgks6gB4Z4LfZkqSZgzNucisEHqnNebaRxM1P"
            },
            "description": null
        }
    },
    "melon-dog": {
        "contract_address": "7DGJnYfJrYiP5CKBx6wpbu8F5Ya1swdFoesuCrAKCzZc",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7DGJnYfJrYiP5CKBx6wpbu8F5Ya1swdFoesuCrAKCzZc",
            "standard": "metaplex",
            "name": "Melon Dog",
            "symbol": "MELON",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7DGJnYfJrYiP5CKBx6wpbu8F5Ya1swdFoesuCrAKCzZc",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/57E3LpEuxfTYvTEArwGif8ikKcs3JWIJT5-QiRwx31k",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "E2FMW3KAyFQWBvk9JWwe7tdfsm8YaYChJBWCx28BeGvY",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "497233.85",
            "totalSupply": "407485563575741",
            "totalSupplyFormatted": "407485563.575741",
            "links": {
                "email": "info@melondogcoin.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/melondogportal",
                "twitter": "https://twitter.com/melondogcoin",
                "website": "https://www.melondogcoin.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/7DGJnYfJrYiP5CKBx6wpbu8F5Ya1swdFoesuCrAKCzZc"
            },
            "description": null
        }
    },
    "memdex100": {
        "contract_address": "83iBDw3ZpxqJ3pEzrbttr9fGA57tttehDAxoFyR1moon",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "83iBDw3ZpxqJ3pEzrbttr9fGA57tttehDAxoFyR1moon",
            "standard": "metaplex",
            "name": "MEMDEX100",
            "symbol": "MEMDEX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_83iBDw3ZpxqJ3pEzrbttr9fGA57tttehDAxoFyR1moon",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/IHBZHhZSuhfwRCE5ffUW",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "13323467.08",
            "totalSupply": "989612374189771547",
            "totalSupplyFormatted": "989612374.189771547",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/memdex100",
                "twitter": "https://twitter.com/memdex100",
                "website": "https://memdex.live/",
                "moralis": "https://moralis.com/chain/solana/token/price/83iBDw3ZpxqJ3pEzrbttr9fGA57tttehDAxoFyR1moon"
            },
            "description": null
        }
    },
    "meme-anarchic-numismatic-asset": {
        "contract_address": "Bw5K8eZaf361uDLHgX2UUn1PNfC7XtgQVvY9sSappump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Bw5K8eZaf361uDLHgX2UUn1PNfC7XtgQVvY9sSappump",
            "standard": "metaplex",
            "name": "Meme Anarchic Numismatic Asset",
            "symbol": "MANA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Bw5K8eZaf361uDLHgX2UUn1PNfC7XtgQVvY9sSappump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQ4dfWFxmdEYWnNysEeBXuXbuxvBGFj9ShfPWPicfVFPm",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "347088.18",
            "totalSupply": "999767204258748",
            "totalSupplyFormatted": "999767204.258748",
            "links": {
                "email": "jopadavidovic70@gmail.com",
                "telegram": "https://t.me/Mana_Sol",
                "twitter": "https://x.com/manaonsolcto",
                "website": "https://dreams-of-an-electric-mind.webflow.io/dreams/conversation-1714479738-scenario-vanilla-backrooms-txt",
                "moralis": "https://moralis.com/chain/solana/token/price/Bw5K8eZaf361uDLHgX2UUn1PNfC7XtgQVvY9sSappump"
            },
            "description": null
        }
    },
    "memebets": {
        "contract_address": "MbetZheK6wDs22ftMat7PLiBtoXYBdrMHfpkKRihCYK",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "MbetZheK6wDs22ftMat7PLiBtoXYBdrMHfpkKRihCYK",
            "standard": "metaplex",
            "name": "Memebets",
            "symbol": "MBET",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_MbetZheK6wDs22ftMat7PLiBtoXYBdrMHfpkKRihCYK",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRCEnHsyoesUSH5T3f96mmfe989WrEa6EN7ExBMnyaD6k",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "54rgQqhvJq7moxaXFuasS9UvmohAie6XJWiVKAt62m8n",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "963475.33",
            "totalSupply": "992474442303971",
            "totalSupplyFormatted": "992474442.303971",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/MbetZheK6wDs22ftMat7PLiBtoXYBdrMHfpkKRihCYK"
            },
            "description": null
        }
    },
    "memes-ai": {
        "contract_address": "39qibQxVzemuZTEvjSB7NePhw9WyyHdQCqP8xmBMpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "39qibQxVzemuZTEvjSB7NePhw9WyyHdQCqP8xmBMpump",
            "standard": "metaplex",
            "name": "Memes AI",
            "symbol": "MemesAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_39qibQxVzemuZTEvjSB7NePhw9WyyHdQCqP8xmBMpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVsgpQGj6ZaoVctKDm8kTm1QTpAPpu4eD8WubicZm4AJV",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2047390.81",
            "totalSupply": "999962788866396",
            "totalSupplyFormatted": "999962788.866396",
            "links": {
                "telegram": "https://t.me/memesaicto",
                "twitter": "https://twitter.com/aihegemonymemes",
                "website": "https://x.com/aihegemonymemes/status/1847462207552205179",
                "moralis": "https://moralis.com/chain/solana/token/price/39qibQxVzemuZTEvjSB7NePhw9WyyHdQCqP8xmBMpump"
            },
            "description": null
        }
    },
    "mentat": {
        "contract_address": "4oz9DZabbYNeB7UGUA4HYZKYRb4Hwm3h2u2x4CrumbAr",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4oz9DZabbYNeB7UGUA4HYZKYRb4Hwm3h2u2x4CrumbAr",
            "standard": "metaplex",
            "name": "Mentat",
            "symbol": "SPICE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4oz9DZabbYNeB7UGUA4HYZKYRb4Hwm3h2u2x4CrumbAr",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWJ5fcwdfd2Q1cG4rXn2Wjje6v63dm9hSBLsk9DQfmWaE",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1275491.45",
            "totalSupply": "999998002122162",
            "totalSupplyFormatted": "999998002.122162",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4oz9DZabbYNeB7UGUA4HYZKYRb4Hwm3h2u2x4CrumbAr"
            },
            "description": null
        }
    },
    "meow": {
        "contract_address": "BUhS5coXEt9hcxN3JSpGYUWSKbNo96RsKu52LcMo12rf",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BUhS5coXEt9hcxN3JSpGYUWSKbNo96RsKu52LcMo12rf",
            "standard": "metaplex",
            "name": "Meow",
            "symbol": "meow",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BUhS5coXEt9hcxN3JSpGYUWSKbNo96RsKu52LcMo12rf",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmU5p4VoD3Up3Tyz3bemU7KSX6zjhVbvcqHepaRS1vN617",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BWcQSUJUV9a4hW3ZEmjKsWg51UChGr5K2jvPhrAjGXKt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "328641714.15",
            "totalSupply": "8999991624151383265",
            "totalSupplyFormatted": "89999916241.51383265",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/BUhS5coXEt9hcxN3JSpGYUWSKbNo96RsKu52LcMo12rf"
            },
            "description": null
        }
    },
    "meow-meow-meow-meow": {
        "contract_address": "AcJTj14wb9VjVtVrR7E7eoxeK4HayqZ9bPdNvkiEpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AcJTj14wb9VjVtVrR7E7eoxeK4HayqZ9bPdNvkiEpump",
            "standard": "metaplex",
            "name": "Meow Meow Meow Meow",
            "symbol": "MEOW",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AcJTj14wb9VjVtVrR7E7eoxeK4HayqZ9bPdNvkiEpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVDNuzAwdK7nMgV8SFwgiAVFiqThLh7soTVoJfAMc4mVs",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "611373.94",
            "totalSupply": "999934481157486",
            "totalSupplyFormatted": "999934481.157486",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/AcJTj14wb9VjVtVrR7E7eoxeK4HayqZ9bPdNvkiEpump"
            },
            "description": null
        }
    },
    "mercurial": {
        "contract_address": "MERt85fc5boKw3BW1eYdxonEuJNvXbiMbs6hvheau5K",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "MERt85fc5boKw3BW1eYdxonEuJNvXbiMbs6hvheau5K",
            "standard": "metaplex",
            "name": "Mercurial",
            "symbol": "MER",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_MERt85fc5boKw3BW1eYdxonEuJNvXbiMbs6hvheau5K",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9u9iZBWqGsp5hXBxkVZtBTuLSGNAG9gEQLgpuVw39ASg",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "173396.19",
            "totalSupply": "562974643226433",
            "totalSupplyFormatted": "562974643.226433",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/MERt85fc5boKw3BW1eYdxonEuJNvXbiMbs6hvheau5K"
            },
            "description": null
        }
    },
    "mert-s-minutes": {
        "contract_address": "SUhzKcEZdShM9ifMb7kDKwAdjy6R9MogwG4fWiZtime",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "SUhzKcEZdShM9ifMb7kDKwAdjy6R9MogwG4fWiZtime",
            "standard": "metaplex",
            "name": "mert's minutes",
            "symbol": "mert",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_SUhzKcEZdShM9ifMb7kDKwAdjy6R9MogwG4fWiZtime",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://d1jed1sess45wk.cloudfront.net/assets/metadata_C7BJhR69Ei7fHzz7znmfuf7YutPeZWyUQfeXY7JVHEVQ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7QVZH935bPueDe9sSvw27mJ9Wysu9e23o9TxnoUF8aKQ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "232545.04",
            "totalSupply": "99999457840",
            "totalSupplyFormatted": "99999.45784",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/SUhzKcEZdShM9ifMb7kDKwAdjy6R9MogwG4fWiZtime"
            },
            "description": null
        }
    },
    "meta-2": {
        "contract_address": "METADDFL6wWMWEoKTFJwcThTbUmtarRJZjRpzUvkxhr",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "METADDFL6wWMWEoKTFJwcThTbUmtarRJZjRpzUvkxhr",
            "standard": "metaplex",
            "name": "META",
            "symbol": "META",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_METADDFL6wWMWEoKTFJwcThTbUmtarRJZjRpzUvkxhr",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ftgnmxferax7tpgqyzdo76sisk5fhpsjv34omvgz33m7udvnsfba.arweave.net/LMzWXKSIL_m80MZG7_pIkrpTvkmu-OZU2d7Z-g6tkUI",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HfFi634cyurmVVDr9frwu4MjGLJzz9XbAJz981HdVaNz",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "27146406.87",
            "totalSupply": "20885996382023",
            "totalSupplyFormatted": "20885.996382023",
            "links": {
                "discord": "https://discord.gg/metadao",
                "github": "https://github.com/metaDAOproject",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/MetaDAOProject",
                "website": "https://metadao.fi",
                "moralis": "https://moralis.com/chain/solana/token/price/METADDFL6wWMWEoKTFJwcThTbUmtarRJZjRpzUvkxhr"
            },
            "description": null
        }
    },
    "metadrip": {
        "contract_address": "FrkF4GNdqKZLuzWXTk1imqMJRGK9uxCRE3PaBKZbpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FrkF4GNdqKZLuzWXTk1imqMJRGK9uxCRE3PaBKZbpump",
            "standard": "metaplex",
            "name": "Metadrip",
            "symbol": "DRIP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FrkF4GNdqKZLuzWXTk1imqMJRGK9uxCRE3PaBKZbpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUAUR4wVFutwYFv6gXQgNyivRYTaoAT9KzerWRTAVKxiJ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3480385.38",
            "totalSupply": "999972240605860",
            "totalSupplyFormatted": "999972240.60586",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/metadripai",
                "website": "https://www.metadrip.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/FrkF4GNdqKZLuzWXTk1imqMJRGK9uxCRE3PaBKZbpump"
            },
            "description": null
        }
    },
    "metaplex": {
        "contract_address": "METAewgxyPbgwsseH8T16a39CQ5VyVxZi9zXiDPY18m",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "METAewgxyPbgwsseH8T16a39CQ5VyVxZi9zXiDPY18m",
            "standard": "metaplex",
            "name": "Metaplex Token",
            "symbol": "MPLX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_METAewgxyPbgwsseH8T16a39CQ5VyVxZi9zXiDPY18m",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/7BzVsHRrEH0ldNOCCM4_E00BiAYuJP_EQiqvcEYz3YY",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CPqaAMQicq2uhCoxc8SNFNq8iWSHs7j7qdJGyehfUdC6",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "219188309.74",
            "totalSupply": "999983164245678",
            "totalSupplyFormatted": "999983164.245678",
            "links": {
                "discord": "https://discord.com/invite/metaplex",
                "github": "https://github.com/metaplex-foundation/metaplex",
                "twitter": "https://twitter.com/metaplex",
                "website": "https://www.metaplex.com/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/METAewgxyPbgwsseH8T16a39CQ5VyVxZi9zXiDPY18m"
            },
            "description": null
        }
    },
    "metaverse": {
        "contract_address": "HCgvbV9Qcf9TVGPGKMGbVEj8WwwVD6HhTt5E2i3qkeN9",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HCgvbV9Qcf9TVGPGKMGbVEj8WwwVD6HhTt5E2i3qkeN9",
            "standard": "metaplex",
            "name": "METAVERSE",
            "symbol": "METAV",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HCgvbV9Qcf9TVGPGKMGbVEj8WwwVD6HhTt5E2i3qkeN9",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmd6kYrQsz6iWmPU4LAWcRuGh71vTL5FhtL8G4N9ojQpcv",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "opRyDjuRetWnsP78FNFTPEnAJX7AkjuD6GTP7tsqHXd",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5663952.44",
            "totalSupply": "995001313774169",
            "totalSupplyFormatted": "995001313.774169",
            "links": {
                "twitter": "https://x.com/aipool_tee",
                "website": "https://ai-pools.app/",
                "moralis": "https://moralis.com/chain/solana/token/price/HCgvbV9Qcf9TVGPGKMGbVEj8WwwVD6HhTt5E2i3qkeN9"
            },
            "description": null
        }
    },
    "metaworldmemes": {
        "contract_address": "F3XTBj4cD9AvqqbR5E6CZYigyTcmEpgAi3LqaX3pmoon",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F3XTBj4cD9AvqqbR5E6CZYigyTcmEpgAi3LqaX3pmoon",
            "standard": "metaplex",
            "name": "MetaWorldMemes",
            "symbol": "MWM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_F3XTBj4cD9AvqqbR5E6CZYigyTcmEpgAi3LqaX3pmoon",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/NC0HMyL9iq5whs2Z1bTo",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "46595.25",
            "totalSupply": "997457916046692328",
            "totalSupplyFormatted": "997457916.046692328",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/F3XTBj4cD9AvqqbR5E6CZYigyTcmEpgAi3LqaX3pmoon"
            },
            "description": null
        }
    },
    "michicoin": {
        "contract_address": "5mbK36SZ7J19An8jFochhQS4of8g6BwUjbeCSxBSoWdp",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5mbK36SZ7J19An8jFochhQS4of8g6BwUjbeCSxBSoWdp",
            "standard": "metaplex",
            "name": "michi",
            "symbol": "$michi",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5mbK36SZ7J19An8jFochhQS4of8g6BwUjbeCSxBSoWdp",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmaFSKo4FX43NsVETn4nPfnFrXMqcGyK4mvKuCz2Pg65ji",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "19393749.32",
            "totalSupply": "555766690318970",
            "totalSupplyFormatted": "555766690.31897",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/michiportal",
                "twitter": "https://twitter.com/michionsolana",
                "website": "https://michisolana.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/5mbK36SZ7J19An8jFochhQS4of8g6BwUjbeCSxBSoWdp"
            },
            "description": null
        }
    },
    "milady-wif-hat": {
        "contract_address": "3X8GcLiH2HttjyqePg7MazpMbwbgq5URUMTyDz5tkmdE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3X8GcLiH2HttjyqePg7MazpMbwbgq5URUMTyDz5tkmdE",
            "standard": "metaplex",
            "name": "Ladyf",
            "symbol": "LADYF",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3X8GcLiH2HttjyqePg7MazpMbwbgq5URUMTyDz5tkmdE",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmZWkgixUUHNijjiXgL6ZLe6abwMKJVzQioeNGSsQb4afS",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Fgeb4qtQ4MKDBxETvHjzukGEDsfqATVPLCQqPnPYuUh4",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1063994.11",
            "totalSupply": "999994463426678750",
            "totalSupplyFormatted": "999994463426.67875",
            "links": {
                "discord": "https://discord.com/invite/miladymemecoin",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/miladymemecoin",
                "twitter": "https://twitter.com/miladymemecoin",
                "website": "https://ladyf.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/3X8GcLiH2HttjyqePg7MazpMbwbgq5URUMTyDz5tkmdE"
            },
            "description": null
        }
    },
    "milkbag": {
        "contract_address": "2ubuHGFS4VJVxSEpvV3kDwz6JiuXdaAoGMwrwYC87tp8",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2ubuHGFS4VJVxSEpvV3kDwz6JiuXdaAoGMwrwYC87tp8",
            "standard": "metaplex",
            "name": "MILKBAG",
            "symbol": "MILKBAG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2ubuHGFS4VJVxSEpvV3kDwz6JiuXdaAoGMwrwYC87tp8",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreibmwrmuk4x4gawfluqfvmjjfvsq5gwblyn3cnwknmnmcw5l32etsy.ipfs.nftstorage.link/",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FkNS1zBQrsb9a4PAvfBArGNcjzwZjEqEnLm7YMr5xqY8",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "293479.10",
            "totalSupply": "926169722869071796",
            "totalSupplyFormatted": "926169722.869071796",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/MILKBAGsol",
                "twitter": "https://twitter.com/MilkbagSol",
                "website": "https://milkbag.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/2ubuHGFS4VJVxSEpvV3kDwz6JiuXdaAoGMwrwYC87tp8"
            },
            "description": null
        }
    },
    "minetard-ai": {
        "contract_address": "42yzLyxGDjD5RFFQFYNVy7Pzubz6QPCK7HFK52f1pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "42yzLyxGDjD5RFFQFYNVy7Pzubz6QPCK7HFK52f1pump",
            "standard": "metaplex",
            "name": "MineTard AI ",
            "symbol": "MTard",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_42yzLyxGDjD5RFFQFYNVy7Pzubz6QPCK7HFK52f1pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPDzUwZyPknyg71Rbafk6bw9pg55bAHXA3NyrAutNY7Wg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "657749.16",
            "totalSupply": "999972873785040",
            "totalSupplyFormatted": "999972873.78504",
            "links": {
                "telegram": "https://t.me/minetard",
                "twitter": "https://twitter.com/MinetardAI",
                "website": "https://mtard.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/42yzLyxGDjD5RFFQFYNVy7Pzubz6QPCK7HFK52f1pump"
            },
            "description": null
        }
    },
    "minidoge-3": {
        "contract_address": "8J6CexwfJ8CSzn2DgWhzQe1NHd2hK9DKX59FCNNMo2hu",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8J6CexwfJ8CSzn2DgWhzQe1NHd2hK9DKX59FCNNMo2hu",
            "standard": "metaplex",
            "name": "Minidoge",
            "symbol": "MINIDOGE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8J6CexwfJ8CSzn2DgWhzQe1NHd2hK9DKX59FCNNMo2hu",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYfnDwad5bnMeBWzJpX6zmJQ2n6wTKyDHAFCTPtMjzDCM",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "576270.37",
            "totalSupply": "999891335122547",
            "totalSupplyFormatted": "999891335.122547",
            "links": {
                "telegram": "https://t.me/MINIDOGE_PORTAL",
                "twitter": "https://twitter.com/MINIDOGE_X",
                "website": "https://mini-doge.com",
                "moralis": "https://moralis.com/chain/solana/token/price/8J6CexwfJ8CSzn2DgWhzQe1NHd2hK9DKX59FCNNMo2hu"
            },
            "description": null
        }
    },
    "minimini": {
        "contract_address": "2JcXacFwt9mVAwBQ5nZkYwCyXQkRcdsYrDXn6hj22SbP",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2JcXacFwt9mVAwBQ5nZkYwCyXQkRcdsYrDXn6hj22SbP",
            "standard": "metaplex",
            "name": "mini",
            "symbol": "mini",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2JcXacFwt9mVAwBQ5nZkYwCyXQkRcdsYrDXn6hj22SbP",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmccMecLGVgBLTHzYg381sQ6Pz8kcxz9oJN3Rs2LZzrXAs",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5340880.14",
            "totalSupply": "875833958256230",
            "totalSupplyFormatted": "875833958.25623",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/minicto",
                "twitter": "https://twitter.com/minigangsol",
                "website": "https://minimini.lol/",
                "moralis": "https://moralis.com/chain/solana/token/price/2JcXacFwt9mVAwBQ5nZkYwCyXQkRcdsYrDXn6hj22SbP"
            },
            "description": null
        }
    },
    "mixmob": {
        "contract_address": "H53UGEyBrB9easo9ego8yYk7o4Zq1G5cCtkxD3E3hZav",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "H53UGEyBrB9easo9ego8yYk7o4Zq1G5cCtkxD3E3hZav",
            "standard": "metaplex",
            "name": "MXM",
            "symbol": "MXM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_H53UGEyBrB9easo9ego8yYk7o4Zq1G5cCtkxD3E3hZav",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://assets.mixmob.io/metadata/9a4a6d02-0941-4c7d-b153-f2b4ca1333a6.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BtJJeQFVtNNmsjyXHezUbUyq9X3WsjvCaUbfZJ7GSP6b",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2490878.25",
            "totalSupply": "989491747600347",
            "totalSupplyFormatted": "989491747.600347",
            "links": {
                "discord": "http://discord.gg/themaxxhub",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/maxx_ai",
                "twitter": "https://twitter.com/maxxmxmcoin",
                "website": "https://www.maxxmxm.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/H53UGEyBrB9easo9ego8yYk7o4Zq1G5cCtkxD3E3hZav"
            },
            "description": null
        }
    },
    "mizuki": {
        "contract_address": "9XS6ayT8aCaoH7tDmTgNyEXRLeVpgyHKtZk5xTXpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9XS6ayT8aCaoH7tDmTgNyEXRLeVpgyHKtZk5xTXpump",
            "standard": "metaplex",
            "name": "Mizuki",
            "symbol": "Mizuki",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9XS6ayT8aCaoH7tDmTgNyEXRLeVpgyHKtZk5xTXpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXjTEW1UDS4fcy5U9UkdS32qRRJGvQofX1pDL7fsczcRF",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "940076.01",
            "totalSupply": "999986183766564",
            "totalSupplyFormatted": "999986183.766564",
            "links": {
                "twitter": "https://twitter.com/_Mizuki_exe",
                "website": "https://terminal.mizuki-exe.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/9XS6ayT8aCaoH7tDmTgNyEXRLeVpgyHKtZk5xTXpump"
            },
            "description": null
        }
    },
    "moai": {
        "contract_address": "7NQSHjuEGENZDWfSvPZz7oP2D6c5Jc3LjFC6uh179ufr",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7NQSHjuEGENZDWfSvPZz7oP2D6c5Jc3LjFC6uh179ufr",
            "standard": "metaplex",
            "name": "\ud83d\uddff",
            "symbol": "MOAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7NQSHjuEGENZDWfSvPZz7oP2D6c5Jc3LjFC6uh179ufr",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/lLS2JupR2o_feTdmHjIulwlV4vP6aReIBuDRvULtLBA",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BcuAaZgyiAeZP3wXrR5UNrKW6P6jPQJzwyFjJk1juBHt",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "888200.92",
            "totalSupply": "99944370181733642",
            "totalSupplyFormatted": "99944370.181733642",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7NQSHjuEGENZDWfSvPZz7oP2D6c5Jc3LjFC6uh179ufr"
            },
            "description": null
        }
    },
    "moai-2": {
        "contract_address": "2GbE1pq8GiwpHhdGWKUBLXJfBKvKLoNWe1E4KPtbED2M",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2GbE1pq8GiwpHhdGWKUBLXJfBKvKLoNWe1E4KPtbED2M",
            "standard": "metaplex",
            "name": "MoAI",
            "symbol": "MoAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2GbE1pq8GiwpHhdGWKUBLXJfBKvKLoNWe1E4KPtbED2M",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/2oNHUuRjUSNibvGbmPdeN9JfeiZ0_Gjb6uALkjkhyfo",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5qCBNWqLoXLLu88bwopZp8MHMjmvVGBt4wwzBqCgJTXU",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "624534.71",
            "totalSupply": "999997938014286",
            "totalSupplyFormatted": "999997938.014286",
            "links": {
                "reddit": "https://www.reddit.com/r/JfienKYntx",
                "telegram": "https://t.me/justawiserock",
                "twitter": "https://twitter.com/moAI_Agent",
                "website": "https://moaiagent.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/2GbE1pq8GiwpHhdGWKUBLXJfBKvKLoNWe1E4KPtbED2M"
            },
            "description": null
        }
    },
    "moby-ai": {
        "contract_address": "Cy1GS2FqefgaMbi45UunrUzin1rfEmTUYnomddzBpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Cy1GS2FqefgaMbi45UunrUzin1rfEmTUYnomddzBpump",
            "standard": "metaplex",
            "name": "Moby AI",
            "symbol": "MOBY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Cy1GS2FqefgaMbi45UunrUzin1rfEmTUYnomddzBpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVh2nQxsWqn15pKRvDMWx1cnp5RvKJe2nTvLo1Uweichw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "15410453.02",
            "totalSupply": "999995718617590",
            "totalSupplyFormatted": "999995718.61759",
            "links": {
                "twitter": "https://twitter.com/mobyagent",
                "website": "https://pump.fun/coin/Cy1GS2FqefgaMbi45UunrUzin1rfEmTUYnomddzBpump",
                "moralis": "https://moralis.com/chain/solana/token/price/Cy1GS2FqefgaMbi45UunrUzin1rfEmTUYnomddzBpump"
            },
            "description": null
        }
    },
    "modern-stoic": {
        "contract_address": "62mETtNRaVY5iNsJr5YexsbVg1uyyoLwtoWLSnjApump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "62mETtNRaVY5iNsJr5YexsbVg1uyyoLwtoWLSnjApump",
            "standard": "metaplex",
            "name": "Modern Stoic",
            "symbol": "Stoic",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_62mETtNRaVY5iNsJr5YexsbVg1uyyoLwtoWLSnjApump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYpd1UxpA1L3zQjcx3zLhBwWxDGgVoofHxTjyuNhCRNLd",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "607448.14",
            "totalSupply": "999769807169631",
            "totalSupplyFormatted": "999769807.169631",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/62mETtNRaVY5iNsJr5YexsbVg1uyyoLwtoWLSnjApump"
            },
            "description": null
        }
    },
    "moe-4": {
        "contract_address": "8xzoj8mVmXtBQm6d2euJGFPvQ2QsTV5R8cdexi2qpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8xzoj8mVmXtBQm6d2euJGFPvQ2QsTV5R8cdexi2qpump",
            "standard": "metaplex",
            "name": "MOE",
            "symbol": "MOE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8xzoj8mVmXtBQm6d2euJGFPvQ2QsTV5R8cdexi2qpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRWeU58Jr3rmqaF6XMcJNEWuXPcQAoQajUQu23h4LhVaQ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "559419.18",
            "totalSupply": "948899874137966",
            "totalSupplyFormatted": "948899874.137966",
            "links": {
                "github": "https://github.com/webaverse-studios/",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/nebula_moemate",
                "website": "https://www.moemate.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/8xzoj8mVmXtBQm6d2euJGFPvQ2QsTV5R8cdexi2qpump"
            },
            "description": null
        }
    },
    "monkey-2": {
        "contract_address": "921MoB1U7VprQfWw5D37a38LCBgB3nareT7rNffk66BG",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "921MoB1U7VprQfWw5D37a38LCBgB3nareT7rNffk66BG",
            "standard": "metaplex",
            "name": "Monkey",
            "symbol": "MONKEY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_921MoB1U7VprQfWw5D37a38LCBgB3nareT7rNffk66BG",
            "decimals": "4",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/01krlvqcr30ORwQmpkMIBbW0clfdHI2n0TLEdGLYL6s",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5n2wfNYDGjKtNSgU4ZXz78D7cxiQEgoDKK9jbmZUWSbS",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "186096.84",
            "totalSupply": "4200831521688839233",
            "totalSupplyFormatted": "420083152168883.9233",
            "links": {
                "email": "contact@monkeysol.space",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/MonkeyS0L",
                "twitter": "https://twitter.com/MonkeyS0L",
                "website": "https://www.monkeysol.space/",
                "moralis": "https://moralis.com/chain/solana/token/price/921MoB1U7VprQfWw5D37a38LCBgB3nareT7rNffk66BG"
            },
            "description": null
        }
    },
    "monkey-pox": {
        "contract_address": "mpoxP5wyoR3eRW8L9bZjGPFtCsmX8WcqU5BHxFW1xkn",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "mpoxP5wyoR3eRW8L9bZjGPFtCsmX8WcqU5BHxFW1xkn",
            "standard": "metaplex",
            "name": "Monkey Pox",
            "symbol": "POX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_mpoxP5wyoR3eRW8L9bZjGPFtCsmX8WcqU5BHxFW1xkn",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://shdw-drive.genesysgo.net/6wy3x5koMcHyAGYzUHwgkgnXpoAPScMFAwp6uGeWtEe9/tokenMetadata2.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "C42vBQa99xb6JRuaqMph2Gn9XDUzx8dvJcsxsq3fibiu",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1862085.70",
            "totalSupply": "999946137078684263",
            "totalSupplyFormatted": "999946137.078684263",
            "links": {
                "telegram": "https://t.me/monkeypoxtokenportal",
                "twitter": "https://x.com/monkeypoxsol",
                "website": "https://www.monkeypoxtoken.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/mpoxP5wyoR3eRW8L9bZjGPFtCsmX8WcqU5BHxFW1xkn"
            },
            "description": null
        }
    },
    "moo-deng": {
        "contract_address": "ED5nyyWEzpPPiWimP8vYm7sD7TD3LAt3Q3gRTWHzPJBY",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ED5nyyWEzpPPiWimP8vYm7sD7TD3LAt3Q3gRTWHzPJBY",
            "standard": "metaplex",
            "name": "Moo Deng",
            "symbol": "MOODENG",
            "logo": "https://adds-token-info-29a861f.s3.amazonaws.com/solana/ED5nyyWEzpPPiWimP8vYm7sD7TD3LAt3Q3gRTWHzPJBY/logo.jpg",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWVzSC1ZTFiBYFiZZ6QivGUZ9awPJwqZECSFL1UD4gitC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "46320691.15",
            "totalSupply": "989942512679494",
            "totalSupplyFormatted": "989942512.679494",
            "links": {
                "telegram": "https://t.me/+hCTQLf149JNlZjgx",
                "moralis": "https://moralis.com/chain/solana/token/price/ED5nyyWEzpPPiWimP8vYm7sD7TD3LAt3Q3gRTWHzPJBY"
            },
            "description": "just a viral lil hippo"
        }
    },
    "moomoo-token": {
        "contract_address": "JJ4QpqUYzs9LUPrF6uJKQbkA4ofSnvkwQ3RBcVLFSjd",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "JJ4QpqUYzs9LUPrF6uJKQbkA4ofSnvkwQ3RBcVLFSjd",
            "standard": "metaplex",
            "name": "MooMoo Token",
            "symbol": "Moo",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_JJ4QpqUYzs9LUPrF6uJKQbkA4ofSnvkwQ3RBcVLFSjd",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://chocolate-electrical-armadillo-60.mypinata.cloud/ipfs/QmTz8E5h9srtY4TiHiSMawH3iiPMyG2HS1x8otsFbnTsCi",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FDMrsGo4zGB454ESQNyTf3pUvAjgAsRWQ1ft9ExmD7h2",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "791757.01",
            "totalSupply": "811996841449070424",
            "totalSupplyFormatted": "811996841.449070424",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/JJ4QpqUYzs9LUPrF6uJKQbkA4ofSnvkwQ3RBcVLFSjd"
            },
            "description": null
        }
    },
    "moon-the-cat": {
        "contract_address": "FHHeb1ji8Qm5Nq68S8zPV9HCPbE7YBdBmV7fgqYRpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FHHeb1ji8Qm5Nq68S8zPV9HCPbE7YBdBmV7fgqYRpump",
            "standard": "metaplex",
            "name": "Moon The Cat",
            "symbol": "Moon",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FHHeb1ji8Qm5Nq68S8zPV9HCPbE7YBdBmV7fgqYRpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbdEfvoKHV3ouMNrkHELJpEfjC62LXZ47gK5KMzFiT6Uz",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6674.31",
            "totalSupply": "999596593054245",
            "totalSupplyFormatted": "999596593.054245",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/FHHeb1ji8Qm5Nq68S8zPV9HCPbE7YBdBmV7fgqYRpump"
            },
            "description": null
        }
    },
    "moss": {
        "contract_address": "9bNUjxEvygayUE2ZRN5zh9Hhjh6cN6GPK4zoHzXXpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9bNUjxEvygayUE2ZRN5zh9Hhjh6cN6GPK4zoHzXXpump",
            "standard": "metaplex",
            "name": "MOSS",
            "symbol": "MOSS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9bNUjxEvygayUE2ZRN5zh9Hhjh6cN6GPK4zoHzXXpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qme5Z982fL7FNv7X6poLNGyQCpRk3Y5xz2vxym1DvMqrYg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1203613.19",
            "totalSupply": "909113920648987",
            "totalSupplyFormatted": "909113920.648987",
            "links": {
                "telegram": "https://t.me/realMOSSCoin",
                "twitter": "https://twitter.com/realMOSSCoin",
                "website": "https://www.mossai.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/9bNUjxEvygayUE2ZRN5zh9Hhjh6cN6GPK4zoHzXXpump"
            },
            "description": null
        }
    },
    "mother-iggy": {
        "contract_address": "3S8qX1MsMqRbiwKg2cQyx7nis1oHMgaCuc9c4VfvVdPN",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3S8qX1MsMqRbiwKg2cQyx7nis1oHMgaCuc9c4VfvVdPN",
            "standard": "metaplex",
            "name": "MOTHER IGGY",
            "symbol": "MOTHER",
            "logo": "https://adds-token-info-29a861f.s3.eu-central-1.amazonaws.com/marketing/solana/3S8qX1MsMqRbiwKg2cQyx7nis1oHMgaCuc9c4VfvVdPN_icon.png",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmPpFmzKVVaqfjyceawUohKtQNhPXmc64iZM689QcHmLHY",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "7601311.90",
            "totalSupply": "986134603393783",
            "totalSupplyFormatted": "986134603.393783",
            "links": {
                "website": "https://www.mother.fun/",
                "twitter": "https://x.com/MOTHERprovides",
                "telegram": "https://t.me/MOTHERprovides",
                "moralis": "https://moralis.com/chain/solana/token/price/3S8qX1MsMqRbiwKg2cQyx7nis1oHMgaCuc9c4VfvVdPN"
            },
            "description": "Don\u2019t disappoint your mother\u2026 "
        }
    },
    "mpx6900": {
        "contract_address": "39Mzpdw7NDGiXmZZGWiCdR6Nzoc7muWuYkPsVDV4pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "39Mzpdw7NDGiXmZZGWiCdR6Nzoc7muWuYkPsVDV4pump",
            "standard": "metaplex",
            "name": "MEME",
            "symbol": "MPX6900",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_39Mzpdw7NDGiXmZZGWiCdR6Nzoc7muWuYkPsVDV4pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRGY7u9UfxYLtLBnGkTd87KuEtMn8T8mDmd6Jz5WtPWoa",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "92690.00",
            "totalSupply": "999784221723676",
            "totalSupplyFormatted": "999784221.723676",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/39Mzpdw7NDGiXmZZGWiCdR6Nzoc7muWuYkPsVDV4pump"
            },
            "description": null
        }
    },
    "msol": {
        "contract_address": "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So",
            "standard": "metaplex",
            "name": "Marinade staked SOL (mSOL)",
            "symbol": "mSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "3JLPCS1qM2zRw3Dp6V4hZnYHd4toMNPkNesXdX9tg6KM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "678253384.89",
            "totalSupply": "3876737443267234",
            "totalSupplyFormatted": "3876737.443267234",
            "links": {
                "discord": "https://discord.gg/6EtUf4Euu6",
                "github": "https://github.com/marinade-finance/",
                "medium": "https://medium.com/marinade-finance",
                "twitter": "https://twitter.com/MarinadeFinance",
                "website": "https://marinade.finance/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So"
            },
            "description": null
        }
    },
    "mumu-the-bull-3": {
        "contract_address": "5LafQUrVco6o7KMz42eqVEJ9LW31StPyGjeeu5sKoMtA",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5LafQUrVco6o7KMz42eqVEJ9LW31StPyGjeeu5sKoMtA",
            "standard": "metaplex",
            "name": "Mumu the Bull",
            "symbol": "MUMU",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5LafQUrVco6o7KMz42eqVEJ9LW31StPyGjeeu5sKoMtA",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreiczleltxpjerlt4ig6jjfjxgvahcju3lina4mndc6iirgih4tyvqq.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9VpfgDkqyP2oRNkAskgfGry8PQwxTnoUwFVvWTF3Bn6t",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8895186.39",
            "totalSupply": "2329802617104636559",
            "totalSupplyFormatted": "2329802617104.636559",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/5LafQUrVco6o7KMz42eqVEJ9LW31StPyGjeeu5sKoMtA"
            },
            "description": null
        }
    },
    "murad": {
        "contract_address": "FtPqJ2YTKmPyBxp3Npg18RE9Z77SQu9jrkRVYLzpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FtPqJ2YTKmPyBxp3Npg18RE9Z77SQu9jrkRVYLzpump",
            "standard": "metaplex",
            "name": "Murad \ud83d\udcb9\ud83e\uddf2 ",
            "symbol": "Murad ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FtPqJ2YTKmPyBxp3Npg18RE9Z77SQu9jrkRVYLzpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTKReDuf4yVJEfhLedU8iAV6UYjcHersHNSzsArRYLXVA",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "545181.95",
            "totalSupply": "999855029321941",
            "totalSupplyFormatted": "999855029.321941",
            "links": {
                "email": "Muradcto6900@gmail.com",
                "telegram": "https://t.me/OFFICIAL_MURAD_CTO",
                "twitter": "https://x.com/murad_cto",
                "website": "https://Murad-cto.com",
                "moralis": "https://moralis.com/chain/solana/token/price/FtPqJ2YTKmPyBxp3Npg18RE9Z77SQu9jrkRVYLzpump"
            },
            "description": null
        }
    },
    "musk-it": {
        "contract_address": "9So52ugZh2BLBT3f7p61947q91uQh2DyvbfyMDeRpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9So52ugZh2BLBT3f7p61947q91uQh2DyvbfyMDeRpump",
            "standard": "metaplex",
            "name": "Musk It",
            "symbol": "MUSKIT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9So52ugZh2BLBT3f7p61947q91uQh2DyvbfyMDeRpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmNQXoGkvqtSJzsgYk2BXrZ97rox4jujLCmFcgyYHB4wa5",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6378395.16",
            "totalSupply": "999983877543499",
            "totalSupplyFormatted": "999983877.543499",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/9So52ugZh2BLBT3f7p61947q91uQh2DyvbfyMDeRpump"
            },
            "description": null
        }
    },
    "myro": {
        "contract_address": "HhJpBhRRn4g56VsyLuT8DL5Bv31HkXqsrahTTUCZeZg4",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HhJpBhRRn4g56VsyLuT8DL5Bv31HkXqsrahTTUCZeZg4",
            "standard": "metaplex",
            "name": "Myro",
            "symbol": "$MYRO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HhJpBhRRn4g56VsyLuT8DL5Bv31HkXqsrahTTUCZeZg4",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://amethyst-clear-beaver-385.mypinata.cloud/ipfs/Qmeyv5vKEeyVUev4KEaGhk6ewoqqNSdXbYujVRSHfMBVnq",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "92fEBnreGakrgKEv4QiumqXMRXfTUgT62N9CyyCXUtks",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "18947853.81",
            "totalSupply": "999966214406962536",
            "totalSupplyFormatted": "999966214.406962536",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/myroSOL",
                "twitter": "https://twitter.com/MyroSOL",
                "website": "https://myrothedog.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/HhJpBhRRn4g56VsyLuT8DL5Bv31HkXqsrahTTUCZeZg4"
            },
            "description": null
        }
    },
    "nailong": {
        "contract_address": "mkvXiNBpa8uiSApe5BrhWVJaT87pJFTZxRy7zFapump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "mkvXiNBpa8uiSApe5BrhWVJaT87pJFTZxRy7zFapump",
            "standard": "metaplex",
            "name": "Nailong",
            "symbol": "Nailong",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_mkvXiNBpa8uiSApe5BrhWVJaT87pJFTZxRy7zFapump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmau7KYbGvLNFHisfepMwETcbAD5hA4WtrLD3phSS5vNgP",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "603178.94",
            "totalSupply": "999960109248971",
            "totalSupplyFormatted": "999960109.248971",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/mkvXiNBpa8uiSApe5BrhWVJaT87pJFTZxRy7zFapump"
            },
            "description": null
        }
    },
    "naked-jim": {
        "contract_address": "jimBqijNp9yZwgMmxFaLECr5rFypPGZQNEqL9YU4UjT",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "jimBqijNp9yZwgMmxFaLECr5rFypPGZQNEqL9YU4UjT",
            "standard": "metaplex",
            "name": "Naked Jim",
            "symbol": "JIM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_jimBqijNp9yZwgMmxFaLECr5rFypPGZQNEqL9YU4UjT",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/aI39dbCYDfXAN82Vmmeu4mprWoKUFkz7UTeyPc-kT8Q",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "99PdBeLEgXGT1KciisrQttrBb1FnBB7SZoR5N4pTHncx",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "661389.34",
            "totalSupply": "999911314287588",
            "totalSupplyFormatted": "999911314.287588",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/jimBqijNp9yZwgMmxFaLECr5rFypPGZQNEqL9YU4UjT"
            },
            "description": null
        }
    },
    "nameless": {
        "contract_address": "5r9jTkceV2gycYG8X9dpa2kdvT6cnTLMMrX7UrwKpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5r9jTkceV2gycYG8X9dpa2kdvT6cnTLMMrX7UrwKpump",
            "standard": "metaplex",
            "name": "Nameless",
            "symbol": "NAME",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5r9jTkceV2gycYG8X9dpa2kdvT6cnTLMMrX7UrwKpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmf5kXBmJWoX6Y2j1StLL3nMMsZkjfNYv51sKb4cWkxLns",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6500.72",
            "totalSupply": "999034173200502",
            "totalSupplyFormatted": "999034173.200502",
            "links": {
                "telegram": "https://t.me/NamePortal01",
                "twitter": "https://twitter.com/namelessolami",
                "website": "https://nameless.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/5r9jTkceV2gycYG8X9dpa2kdvT6cnTLMMrX7UrwKpump"
            },
            "description": null
        }
    },
    "natix-network": {
        "contract_address": "FRySi8LPkuByB7VPSCCggxpewFUeeJiwEGRKKuhwpKcX",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FRySi8LPkuByB7VPSCCggxpewFUeeJiwEGRKKuhwpKcX",
            "standard": "metaplex",
            "name": "NATIX Network",
            "symbol": "NATIX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FRySi8LPkuByB7VPSCCggxpewFUeeJiwEGRKKuhwpKcX",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/9UAyfQ7kXxALbv7vXdIGrUASSeBzBXqT8FQTojjyioA",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9t59b5MXJeRKeSjieH8ZUyGz6VocrPB1UWiqAsD8z1Ck",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "63902478.69",
            "totalSupply": "99847622960109999",
            "totalSupplyFormatted": "99847622960.109999",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/FRySi8LPkuByB7VPSCCggxpewFUeeJiwEGRKKuhwpKcX"
            },
            "description": null
        }
    },
    "naval-ai": {
        "contract_address": "7wM4MnbsPsG95A3WhZgbrPWvMtydKmJjqKr2ZVJVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7wM4MnbsPsG95A3WhZgbrPWvMtydKmJjqKr2ZVJVpump",
            "standard": "metaplex",
            "name": "Naval AI",
            "symbol": "NAVAL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7wM4MnbsPsG95A3WhZgbrPWvMtydKmJjqKr2ZVJVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSNbieZCAq5HJiFoNq1DWp77qKofJeeoFxFnYJCJKRpUm",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "561933.28",
            "totalSupply": "980777063098077",
            "totalSupplyFormatted": "980777063.098077",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7wM4MnbsPsG95A3WhZgbrPWvMtydKmJjqKr2ZVJVpump"
            },
            "description": null
        }
    },
    "nazareai": {
        "contract_address": "5qmykKi3zkM1sGvcMNgj4bqy68qvpLqR9fQWWrtfpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5qmykKi3zkM1sGvcMNgj4bqy68qvpLqR9fQWWrtfpump",
            "standard": "metaplex",
            "name": "NazareAI - Top AI Workforce",
            "symbol": "NazareAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5qmykKi3zkM1sGvcMNgj4bqy68qvpLqR9fQWWrtfpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmY1eyLkDkdVq4dECyCgNHAXNVpbaYQC7d4JFfnoHKNFPD",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "412208.66",
            "totalSupply": "999970057304610",
            "totalSupplyFormatted": "999970057.30461",
            "links": {
                "email": "info@nazareai.com",
                "telegram": "https://t.me/nazareai",
                "twitter": "https://x.com/nazareaicom",
                "website": "https://nazareai.com",
                "moralis": "https://moralis.com/chain/solana/token/price/5qmykKi3zkM1sGvcMNgj4bqy68qvpLqR9fQWWrtfpump"
            },
            "description": null
        }
    },
    "ndx6900": {
        "contract_address": "6fkt7bidv8dwqYG1EBUzESSqknC5xfRnzymffWekTdYo",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6fkt7bidv8dwqYG1EBUzESSqknC5xfRnzymffWekTdYo",
            "standard": "metaplex",
            "name": "NDX6900",
            "symbol": "NDX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6fkt7bidv8dwqYG1EBUzESSqknC5xfRnzymffWekTdYo",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/MkujEQUIusWaKuxA6qjdullWV-fYYAsFHFhygEz17hc",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GcVR154YsqWimiUzbVYz2YCEUAJw85XMHR7WUww7oAHW",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "346805.66",
            "totalSupply": "6899820050855434",
            "totalSupplyFormatted": "6899820050.855434",
            "links": {
                "telegram": "https://t.me/NDX6900Portal",
                "twitter": "https://x.com/NDX_6900",
                "website": "https://ndx6900.tech/",
                "moralis": "https://moralis.com/chain/solana/token/price/6fkt7bidv8dwqYG1EBUzESSqknC5xfRnzymffWekTdYo"
            },
            "description": null
        }
    },
    "neiro": {
        "contract_address": "CTJf74cTo3cw8acFP1YXF3QpsQUUBGBjh2k2e8xsZ6UL",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CTJf74cTo3cw8acFP1YXF3QpsQUUBGBjh2k2e8xsZ6UL",
            "standard": "metaplex",
            "name": "Neiro",
            "symbol": "Neiro",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CTJf74cTo3cw8acFP1YXF3QpsQUUBGBjh2k2e8xsZ6UL",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmdVhTDky8mESwtMwfaNtADapZrknwb2wfFzHsHqvrs1HT",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1128742.32",
            "totalSupply": "999917898671500",
            "totalSupplyFormatted": "999917898.6715",
            "links": {
                "instagram": "https://www.instagram.com/neirothedoge",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/NeiroSolana_CTO",
                "tiktok": "https://www.tiktok.com/@neirothedoge",
                "twitter": "https://x.com/NeiroSolana_CTO",
                "website": "https://neiro.community/",
                "moralis": "https://moralis.com/chain/solana/token/price/CTJf74cTo3cw8acFP1YXF3QpsQUUBGBjh2k2e8xsZ6UL"
            },
            "description": null
        }
    },
    "neiro-2": {
        "contract_address": "CTg3ZgYx79zrE1MteDVkmkcGniiFrK1hJ6yiabropump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CTg3ZgYx79zrE1MteDVkmkcGniiFrK1hJ6yiabropump",
            "standard": "metaplex",
            "name": "Neiro",
            "symbol": "NEIRO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CTg3ZgYx79zrE1MteDVkmkcGniiFrK1hJ6yiabropump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmcfByXxkZZXMX6NyfmxvxQMpd1rsPCx8mXkPKe6Ywgpqy",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "775391.23",
            "totalSupply": "990839328973129",
            "totalSupplyFormatted": "990839328.973129",
            "links": {
                "email": "neirocoinsolana@gmail.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/NEIROBROPUMP",
                "twitter": "https://x.com/NeiroWoof",
                "website": "https://neirosoldog.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/CTg3ZgYx79zrE1MteDVkmkcGniiFrK1hJ6yiabropump"
            },
            "description": null
        }
    },
    "neon": {
        "contract_address": "NeonTjSjsuo3rexg9o6vHuMXw62f9V7zvmu8M8Zut44",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "NeonTjSjsuo3rexg9o6vHuMXw62f9V7zvmu8M8Zut44",
            "standard": "metaplex",
            "name": "Neon EVM Token",
            "symbol": "NEON",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_NeonTjSjsuo3rexg9o6vHuMXw62f9V7zvmu8M8Zut44",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://neonevm.org/neon_token/neon_description.txt",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "6F9YjJwsjkqYW97bd9bBV26bBy9bb4S5VJtuuQo7nQ9z",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "143668609.65",
            "totalSupply": "999999900095308730",
            "totalSupplyFormatted": "999999900.09530873",
            "links": {
                "discord": "http://discord.com/invite/neonevm",
                "github": "https://github.com/neonevm/",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/NeonEvmCommunity",
                "twitter": "https://twitter.com/Neon_EVM",
                "website": "https://neonevm.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/NeonTjSjsuo3rexg9o6vHuMXw62f9V7zvmu8M8Zut44"
            },
            "description": null
        }
    },
    "neur-sh": {
        "contract_address": "3N2ETvNpPNAxhcaXgkhKoY1yDnQfs41Wnxsx5qNJpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3N2ETvNpPNAxhcaXgkhKoY1yDnQfs41Wnxsx5qNJpump",
            "standard": "metaplex",
            "name": "neur.sh",
            "symbol": "NEUR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3N2ETvNpPNAxhcaXgkhKoY1yDnQfs41Wnxsx5qNJpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXMj5WxKL6PsXzTfMhvwqRzAnT37Kv4ra74BcnkyjNHXR",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4377298.55",
            "totalSupply": "999808492159436",
            "totalSupplyFormatted": "999808492.159436",
            "links": {
                "twitter": "https://twitter.com/neur_sh",
                "website": "https://neur.sh",
                "moralis": "https://moralis.com/chain/solana/token/price/3N2ETvNpPNAxhcaXgkhKoY1yDnQfs41Wnxsx5qNJpump"
            },
            "description": null
        }
    },
    "neversol": {
        "contract_address": "CxrhHSqyW8YTDWc4csJMMgo7uBUJSXzNzrWhtw9ULdru",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CxrhHSqyW8YTDWc4csJMMgo7uBUJSXzNzrWhtw9ULdru",
            "standard": "metaplex",
            "name": "neversol",
            "symbol": "never",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CxrhHSqyW8YTDWc4csJMMgo7uBUJSXzNzrWhtw9ULdru",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreia2cfz777n2mvur2f6g7ula6z3i72flr2kw35hll7zwcklxgjwpx4.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HYGTx1T9SsLDRpR2gP3nFHqHMxMDHpYgekzAFSdQdDj1",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "308309.34",
            "totalSupply": "95986717887520341",
            "totalSupplyFormatted": "95986717887.520341",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/CxrhHSqyW8YTDWc4csJMMgo7uBUJSXzNzrWhtw9ULdru"
            },
            "description": null
        }
    },
    "new-born-rhino": {
        "contract_address": "97WQm8aUu2gprFzEYfGmdJ7wcF4NSDPgvn3hvbDHpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "97WQm8aUu2gprFzEYfGmdJ7wcF4NSDPgvn3hvbDHpump",
            "standard": "metaplex",
            "name": "New Born Rhino",
            "symbol": "LAKKHI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_97WQm8aUu2gprFzEYfGmdJ7wcF4NSDPgvn3hvbDHpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXd4DgefYJaBqiGAFhjNka9acqDi11BEh37Qj9i3ug48h",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "426744.54",
            "totalSupply": "999975477926417",
            "totalSupplyFormatted": "999975477.926417",
            "links": {
                "telegram": "https://t.me/LakkhiRhino",
                "tiktok": "https://www.tiktok.com/@lakkhi_rhino",
                "twitter": "https://x.com/lakkhi_rhino",
                "website": "https://lakkhisol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/97WQm8aUu2gprFzEYfGmdJ7wcF4NSDPgvn3hvbDHpump"
            },
            "description": null
        }
    },
    "new-doge": {
        "contract_address": "HHcsLmPyZoVpHP6pVNyBf2vzxpeMkxgaZw9NJZyWpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HHcsLmPyZoVpHP6pVNyBf2vzxpeMkxgaZw9NJZyWpump",
            "standard": "metaplex",
            "name": "New Doge ",
            "symbol": "GNOCCHI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HHcsLmPyZoVpHP6pVNyBf2vzxpeMkxgaZw9NJZyWpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPhcd5zkUGXrjmah3MaVQnZw2K5GnQKqW88v6xoZMmEuA",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "263118.41",
            "totalSupply": "999762187056505",
            "totalSupplyFormatted": "999762187.056505",
            "links": {
                "telegram": "https://t.me/GnocchiSOL",
                "twitter": "https://twitter.com/GnocchiCTO",
                "website": "https://www.gnocchimeme.com",
                "moralis": "https://moralis.com/chain/solana/token/price/HHcsLmPyZoVpHP6pVNyBf2vzxpeMkxgaZw9NJZyWpump"
            },
            "description": null
        }
    },
    "newmoney-ai": {
        "contract_address": "AVKLphLUpoNCwiyUHt8PuK4vz6JFkhRFni7HwZKrpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AVKLphLUpoNCwiyUHt8PuK4vz6JFkhRFni7HwZKrpump",
            "standard": "metaplex",
            "name": "Newmoney AI",
            "symbol": "NEW",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AVKLphLUpoNCwiyUHt8PuK4vz6JFkhRFni7HwZKrpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmNTiSvkph7dyDih8ZqPREDiymHtMqVVeyfGjEKDV7xHjL",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "186619.31",
            "totalSupply": "999996301549587",
            "totalSupplyFormatted": "999996301.549587",
            "links": {
                "discord": "https://discord.gg/newmoneyai",
                "telegram": "https://t.me/newmoneyai",
                "twitter": "https://x.com/NewmoneyAI",
                "website": "https://newmoney.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/AVKLphLUpoNCwiyUHt8PuK4vz6JFkhRFni7HwZKrpump"
            },
            "description": null
        }
    },
    "nibbles": {
        "contract_address": "3gC8oidaJ61fkB2QCYvm9xKMZG8szBgBMbuLAGgNeGJD",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3gC8oidaJ61fkB2QCYvm9xKMZG8szBgBMbuLAGgNeGJD",
            "standard": "metaplex",
            "name": "Nibbles",
            "symbol": "NIBBLES",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3gC8oidaJ61fkB2QCYvm9xKMZG8szBgBMbuLAGgNeGJD",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcJmJLENsMYJL1e8WnnfDUaSWsNRt6sFtsaocPFmpkWAh",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8g5SKdEFArQi78gTbdwEo2pJV7vfuDwJpX9DBvKRjmrj",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1177878.18",
            "totalSupply": "141998574963047507",
            "totalSupplyFormatted": "141998574963.047507",
            "links": {
                "email": "team@theredpandas.io",
                "telegram": "https://t.me/NibblesTheRedPandaPortal",
                "twitter": "https://x.com/NibblesRedPanda",
                "website": "https://theredpandas.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/3gC8oidaJ61fkB2QCYvm9xKMZG8szBgBMbuLAGgNeGJD"
            },
            "description": null
        }
    },
    "nick": {
        "contract_address": "5zy77ie2LVoLaMDy2h4SAvPCo3uc8Zno85YGZDZjpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5zy77ie2LVoLaMDy2h4SAvPCo3uc8Zno85YGZDZjpump",
            "standard": "metaplex",
            "name": "nick",
            "symbol": "nick",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5zy77ie2LVoLaMDy2h4SAvPCo3uc8Zno85YGZDZjpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYfQ4ny1Y1w9BpeeuvmZKBUSWrLzrXHinn5tnfyPvpLzE",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "810404.58",
            "totalSupply": "999918046571408",
            "totalSupplyFormatted": "999918046.571408",
            "links": {
                "telegram": "https://t.me/nickdotai",
                "twitter": "https://twitter.com/nickdotai",
                "website": "https://www.nickdotai.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/5zy77ie2LVoLaMDy2h4SAvPCo3uc8Zno85YGZDZjpump"
            },
            "description": null
        }
    },
    "night-fury": {
        "contract_address": "CrSDXdbSXdAV8kr32X7TzVfYtz8K4SjqFoozgS3kmUES",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CrSDXdbSXdAV8kr32X7TzVfYtz8K4SjqFoozgS3kmUES",
            "standard": "metaplex",
            "name": "NIGHT FURY",
            "symbol": "FURY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CrSDXdbSXdAV8kr32X7TzVfYtz8K4SjqFoozgS3kmUES",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/B19APKDQbzuCZxeiUMcEryu0i27GiOaP3OTGIHvIKPg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Bn9m7BWQBbSTaozsyxe5dL8BD8PaYqwduqjHnQgYgaUh",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "507809.51",
            "totalSupply": "999997074425172949",
            "totalSupplyFormatted": "999997074.425172949",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/CrSDXdbSXdAV8kr32X7TzVfYtz8K4SjqFoozgS3kmUES"
            },
            "description": null
        }
    },
    "nobiko-coin": {
        "contract_address": "AYABiqKuTh9Va5Aqc6AujFevHwDGmECGQiFmKW5g3K4Z",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AYABiqKuTh9Va5Aqc6AujFevHwDGmECGQiFmKW5g3K4Z",
            "standard": "metaplex",
            "name": "Nobiko Coin",
            "symbol": "LONG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AYABiqKuTh9Va5Aqc6AujFevHwDGmECGQiFmKW5g3K4Z",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://bafkreidzcd3mjkrigxjdomfxgnf477fzkpl3lufeep7f4b42pb7bnwaleq.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "25qboPWQK6GXc33gbb9GzVap62QSFwQm8xLpzm8muD6L",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "93563.56",
            "totalSupply": "99834140533533",
            "totalSupplyFormatted": "998341405.33533",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/AYABiqKuTh9Va5Aqc6AujFevHwDGmECGQiFmKW5g3K4Z"
            },
            "description": null
        }
    },
    "node-sphere-ai": {
        "contract_address": "EStrdGdFpZEv8nrMgmWddeEnY6EPf6hWN8yFfbUDpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EStrdGdFpZEv8nrMgmWddeEnY6EPf6hWN8yFfbUDpump",
            "standard": "metaplex",
            "name": "Node Sphere AI",
            "symbol": "NSAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EStrdGdFpZEv8nrMgmWddeEnY6EPf6hWN8yFfbUDpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTJ2t1Ayy2yrWsi7sKqFu6Ektb1ZzKqSh94FUENtEAHqa",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "333717.01",
            "totalSupply": "999961065855005",
            "totalSupplyFormatted": "999961065.855005",
            "links": {
                "telegram": "https://t.me/nodesphereai",
                "twitter": "https://twitter.com/NodeSphereAI",
                "website": "https://nodesphereai.com",
                "moralis": "https://moralis.com/chain/solana/token/price/EStrdGdFpZEv8nrMgmWddeEnY6EPf6hWN8yFfbUDpump"
            },
            "description": null
        }
    },
    "nodecoin": {
        "contract_address": "B89Hd5Juz7JP2dxCZXFJWk4tMTcbw7feDhuWGb3kq5qE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "B89Hd5Juz7JP2dxCZXFJWk4tMTcbw7feDhuWGb3kq5qE",
            "standard": "metaplex",
            "name": "Nodecoin",
            "symbol": "NC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_B89Hd5Juz7JP2dxCZXFJWk4tMTcbw7feDhuWGb3kq5qE",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/Ku-LgjbwI0mOzyHdfgKXqhxpjARkrdSawCByk4SO3uE",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5u9EtSBne6xirwsALrf8hLavLRvUrrAZKNN1cz3P3mVQ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "69986055.67",
            "totalSupply": "999995837390051008",
            "totalSupplyFormatted": "999995837.390051008",
            "links": {
                "discord": "https://discord.com/invite/nodepay",
                "telegram": "https://t.me/nodepaycommunitychat",
                "twitter": "https://twitter.com/nodepay_ai",
                "website": "https://www.nodepay.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/B89Hd5Juz7JP2dxCZXFJWk4tMTcbw7feDhuWGb3kq5qE"
            },
            "description": null
        }
    },
    "nomnom": {
        "contract_address": "6ZrYhkwvoYE4QqzpdzJ7htEHwT2u2546EkTNJ7qepump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6ZrYhkwvoYE4QqzpdzJ7htEHwT2u2546EkTNJ7qepump",
            "standard": "metaplex",
            "name": "nomnom",
            "symbol": "nomnom",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6ZrYhkwvoYE4QqzpdzJ7htEHwT2u2546EkTNJ7qepump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmVm1MafdAxAVoxsfii9awmkEzzs3HPLXvBRVMDTmVwpdn",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1588527.89",
            "totalSupply": "999858308247384",
            "totalSupplyFormatted": "999858308.247384",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/6ZrYhkwvoYE4QqzpdzJ7htEHwT2u2546EkTNJ7qepump"
            },
            "description": null
        }
    },
    "noooomeme": {
        "contract_address": "4E3CrfKrPWmnE2kFrdeRKyiovpUWpUXHtqXpXzZZsxZ2",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4E3CrfKrPWmnE2kFrdeRKyiovpUWpUXHtqXpXzZZsxZ2",
            "standard": "metaplex",
            "name": "NOOOO",
            "symbol": "NOOOO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4E3CrfKrPWmnE2kFrdeRKyiovpUWpUXHtqXpXzZZsxZ2",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreicezbh5neck2owkhdu66wrbmy3nu5ldjm4z6h7lu7n6j7w6o5i32q.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FDf3GcThBBB6wUM24zZETMndmydCyx5kegEBJoV5xDmN",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "736784.24",
            "totalSupply": "997771271886285",
            "totalSupplyFormatted": "997771271.886285",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4E3CrfKrPWmnE2kFrdeRKyiovpUWpUXHtqXpXzZZsxZ2"
            },
            "description": null
        }
    },
    "nora": {
        "contract_address": "3Yie9s6iuEmk8aiXYC19xaq2iccTuFzyfKBWv6gFpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3Yie9s6iuEmk8aiXYC19xaq2iccTuFzyfKBWv6gFpump",
            "standard": "metaplex",
            "name": "NORA",
            "symbol": "NORA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3Yie9s6iuEmk8aiXYC19xaq2iccTuFzyfKBWv6gFpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdGhAw9GZ3AmMADcyXggaGJJSjcCY2k6BRB5vYMtBJ3NZ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "264767.64",
            "totalSupply": "999719222578378",
            "totalSupplyFormatted": "999719222.578378",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/3Yie9s6iuEmk8aiXYC19xaq2iccTuFzyfKBWv6gFpump"
            },
            "description": null
        }
    },
    "nosana": {
        "contract_address": "nosXBVoaCTtYdLvKY6Csb4AC8JCdQKKAaWYtx2ZMoo7",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "nosXBVoaCTtYdLvKY6Csb4AC8JCdQKKAaWYtx2ZMoo7",
            "standard": "metaplex",
            "name": "Nosana",
            "symbol": "NOS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_nosXBVoaCTtYdLvKY6Csb4AC8JCdQKKAaWYtx2ZMoo7",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "102424039.47",
            "totalSupply": "99999940901759",
            "totalSupplyFormatted": "99999940.901759",
            "links": {
                "discord": "https://discord.com/invite/nosana-ai",
                "github": "https://github.com/nosana-ci",
                "medium": "https://nosana.medium.com/",
                "telegram": "https://t.me/NosanaCI",
                "twitter": "https://twitter.com/nosana_ai",
                "website": "https://nosana.io/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/nosXBVoaCTtYdLvKY6Csb4AC8JCdQKKAaWYtx2ZMoo7"
            },
            "description": null
        }
    },
    "nothing-4": {
        "contract_address": "6gh8b2mqUrVb6Ew8Mwt89tNyN9keCDNstzT5cdp5pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6gh8b2mqUrVb6Ew8Mwt89tNyN9keCDNstzT5cdp5pump",
            "standard": "metaplex",
            "name": "Nothing",
            "symbol": "VOID",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6gh8b2mqUrVb6Ew8Mwt89tNyN9keCDNstzT5cdp5pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmb6vYdHGsTCe1MGor3Fe82GEp84oVZfy585d4fGKcquKU",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "240795.86",
            "totalSupply": "999849944921693",
            "totalSupplyFormatted": "999849944.921693",
            "links": {
                "telegram": "https://t.me/VoidGlobal",
                "twitter": "https://twitter.com/voidsolana_",
                "website": "https://voidonsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/6gh8b2mqUrVb6Ew8Mwt89tNyN9keCDNstzT5cdp5pump"
            },
            "description": null
        }
    },
    "npc-on-solana": {
        "contract_address": "5ToDNkiBAK6k697RRyngTburU7yZNFZFx7jzsD1Uc7pK",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5ToDNkiBAK6k697RRyngTburU7yZNFZFx7jzsD1Uc7pK",
            "standard": "metaplex",
            "name": "NPC Solana",
            "symbol": "NPCS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5ToDNkiBAK6k697RRyngTburU7yZNFZFx7jzsD1Uc7pK",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRGzQMrMtMjoguvyeXvGmzjYZpvF24iEa53n5cisMoXj8",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "4ACjrsDJfp9tjmN9mrZ7hkruh1hkUhbaWjKb8QAwn5kZ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "7889165.10",
            "totalSupply": "997972484880725390",
            "totalSupplyFormatted": "997972484.88072539",
            "links": {
                "instagram": "https://www.instagram.com/npcsolana/",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/NPCSOLANAOFFICIAL",
                "tiktok": "https://www.tiktok.com/@npconsol",
                "twitter": "https://x.com/npcsolananews",
                "website": "https://www.solananpc.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/5ToDNkiBAK6k697RRyngTburU7yZNFZFx7jzsD1Uc7pK"
            },
            "description": null
        }
    },
    "numogram": {
        "contract_address": "HeJUFDxfJSzYFUuHLxkMqCgytU31G6mjP4wKviwqpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HeJUFDxfJSzYFUuHLxkMqCgytU31G6mjP4wKviwqpump",
            "standard": "metaplex",
            "name": "numogram ",
            "symbol": "GNON",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HeJUFDxfJSzYFUuHLxkMqCgytU31G6mjP4wKviwqpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmaNZrvMusFZRLnvLmXwPFL9FsgaEJKTMM3HyRz2j6BpkK",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3564371.43",
            "totalSupply": "998492732652667",
            "totalSupplyFormatted": "998492732.652667",
            "links": {
                "github": "https://github.com/dGNON",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/numogramsolana",
                "twitter": "https://twitter.com/GnonOnSolana",
                "website": "https://www.dgnon.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/HeJUFDxfJSzYFUuHLxkMqCgytU31G6mjP4wKviwqpump"
            },
            "description": null
        }
    },
    "nutflex": {
        "contract_address": "4pb6mymm9hYQN6og9uF24eyZ2qwXCWCwGvcR1DkCgeEr",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4pb6mymm9hYQN6og9uF24eyZ2qwXCWCwGvcR1DkCgeEr",
            "standard": "metaplex",
            "name": "NutFlex",
            "symbol": "NUT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4pb6mymm9hYQN6og9uF24eyZ2qwXCWCwGvcR1DkCgeEr",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmSmNBUCt63H9Yg2My7EBDdbDBexANDjdH2poAqeTzrRBC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "19173.52",
            "totalSupply": "998308711289938",
            "totalSupplyFormatted": "998308711.289938",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/nutflexofficial",
                "twitter": "https://twitter.com/nutflexyz",
                "website": "https://www.nutflex.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/4pb6mymm9hYQN6og9uF24eyZ2qwXCWCwGvcR1DkCgeEr"
            },
            "description": null
        }
    },
    "nx-token": {
        "contract_address": "BAsnXPVYuvZDfEFR7tmu9sG9gPyHy58Jpjs2AuUw1FLx",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BAsnXPVYuvZDfEFR7tmu9sG9gPyHy58Jpjs2AuUw1FLx",
            "standard": "metaplex",
            "name": "NX",
            "symbol": "NX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BAsnXPVYuvZDfEFR7tmu9sG9gPyHy58Jpjs2AuUw1FLx",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmSfVtfLpvtqZw5R6v4vkCYBBm999jWLG3BSMZUHK4XqBP",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Ftr58so5RrSnP5TDUuthethQMtyXZBMp2ySZ3RUT6UBG",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5368324.85",
            "totalSupply": "77594010382765822",
            "totalSupplyFormatted": "77594010.382765822",
            "links": {
                "discord": "https://discord.com/invite/nxfinance",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/NX_Finance",
                "website": "https://nxfinance.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/BAsnXPVYuvZDfEFR7tmu9sG9gPyHy58Jpjs2AuUw1FLx"
            },
            "description": null
        }
    },
    "nyan": {
        "contract_address": "NYANpAp9Cr7YarBNrby7Xx4xU6No6JKTBuohNA3yscP",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "NYANpAp9Cr7YarBNrby7Xx4xU6No6JKTBuohNA3yscP",
            "standard": "metaplex",
            "name": "NYAN",
            "symbol": "NYAN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_NYANpAp9Cr7YarBNrby7Xx4xU6No6JKTBuohNA3yscP",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/e4oP3P1xgsOx3Fr7mp-oe1KkVVUl3ysm_Y4YLWZtSHA",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AKE8YpdtSpZfQNJh5vNknL4eHpYiJ1PiZmBDzKUkn4DD",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "28593207.86",
            "totalSupply": "999996707754284825",
            "totalSupplyFormatted": "999996707.754284825",
            "links": {
                "discord": "https://discord.com/invite/nyanheroesgame",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/nyanheroes",
                "twitter": "https://twitter.com/nyanheroes",
                "website": "https://nyanheroes.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/NYANpAp9Cr7YarBNrby7Xx4xU6No6JKTBuohNA3yscP"
            },
            "description": null
        }
    },
    "nyx-by-virtuals": {
        "contract_address": "EfqR6H3knDCgYq7QLtwjRAC5wPzustQvkzNTAMzUvirt",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EfqR6H3knDCgYq7QLtwjRAC5wPzustQvkzNTAMzUvirt",
            "standard": "metaplex",
            "name": "Nyx by VIRTUALS",
            "symbol": "NYX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EfqR6H3knDCgYq7QLtwjRAC5wPzustQvkzNTAMzUvirt",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://vpmodels-prod.s3.ap-southeast-1.amazonaws.com/virtual-20706/virtual-20706.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DtKxy3Wsfgdn1NWPrnsycTX5GDhzCVjsizVTdMZpkwb9",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3060182.88",
            "totalSupply": "999999959197210",
            "totalSupplyFormatted": "999999959.19721",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/EfqR6H3knDCgYq7QLtwjRAC5wPzustQvkzNTAMzUvirt"
            },
            "description": null
        }
    },
    "o-intelligence-coin": {
        "contract_address": "AKzAhPPLMH5NG35kGbgkwtrTLeGyVrfCtApjnvqAATcm",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AKzAhPPLMH5NG35kGbgkwtrTLeGyVrfCtApjnvqAATcm",
            "standard": "metaplex",
            "name": "OI",
            "symbol": "OI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AKzAhPPLMH5NG35kGbgkwtrTLeGyVrfCtApjnvqAATcm",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmS6BuYLBZ1EwaBLqFACD9DyCQcV2GfF86tcYGnw1RjKw1",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AjGPWRecFX4KpwGYfuw6sdrHAq226nGKkQAYRGyPGLFm",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "70805145.46",
            "totalSupply": "999990536",
            "totalSupplyFormatted": "0.999990536",
            "links": {
                "discord": "https://discord.gg/oxyz",
                "telegram": "https://t.me/oxyz",
                "twitter": "https://twitter.com/O_fndn",
                "website": "https://www.o.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/AKzAhPPLMH5NG35kGbgkwtrTLeGyVrfCtApjnvqAATcm"
            },
            "description": null
        }
    },
    "ocada-ai": {
        "contract_address": "ocadaAXpD1haGy2JnjHbgUhczqtiMdYHzvnBihjJHg9",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ocadaAXpD1haGy2JnjHbgUhczqtiMdYHzvnBihjJHg9",
            "standard": "metaplex",
            "name": "OCADA.AI",
            "symbol": "OCADA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ocadaAXpD1haGy2JnjHbgUhczqtiMdYHzvnBihjJHg9",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1168031.20",
            "totalSupply": "116316846069069460",
            "totalSupplyFormatted": "116316846.06906946",
            "links": {
                "email": "hello@ocada.ai",
                "medium": "https://medium.com/bird-money",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/Ocada_AI",
                "twitter": "https://x.com/ocada_ai",
                "website": "https://ocada.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/ocadaAXpD1haGy2JnjHbgUhczqtiMdYHzvnBihjJHg9"
            },
            "description": null
        }
    },
    "octo-gaming": {
        "contract_address": "octo82drBEdm8CSDaEKBymVn86TBtgmPnDdmE64PTqJ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "octo82drBEdm8CSDaEKBymVn86TBtgmPnDdmE64PTqJ",
            "standard": "metaplex",
            "name": "Octokn",
            "symbol": "OTK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_octo82drBEdm8CSDaEKBymVn86TBtgmPnDdmE64PTqJ",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://storage.googleapis.com/octo-nfts/oktkn_metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "octo7Rschxq2XrBFK8NnaBG9WbJCgQMychkQSUxbuCm",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "7849220.85",
            "totalSupply": "1199953472461012819",
            "totalSupplyFormatted": "1199953472.461012819",
            "links": {
                "discord": "https://discord.gg/octo-gaming-514829821419716609",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/Octo8gaming",
                "website": "https://octo-gaming.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/octo82drBEdm8CSDaEKBymVn86TBtgmPnDdmE64PTqJ"
            },
            "description": null
        }
    },
    "octonetai": {
        "contract_address": "4CoTCzobYt38zVbSieZxcmz2CCs8kmZJ6wnbj8HWocto",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4CoTCzobYt38zVbSieZxcmz2CCs8kmZJ6wnbj8HWocto",
            "standard": "metaplex",
            "name": "OctonetAI",
            "symbol": "OCTO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4CoTCzobYt38zVbSieZxcmz2CCs8kmZJ6wnbj8HWocto",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreicxvkhqcalfnltiobnapjutud24hw6v3hh63pbse5bt2vxzetixpa.ipfs.w3s.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5KXSS5vZm3TsGrJueDiK6TcPRqxhqWzr65BVWrtGFCpn",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "665803.35",
            "totalSupply": "99999075663537",
            "totalSupplyFormatted": "99999075.663537",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4CoTCzobYt38zVbSieZxcmz2CCs8kmZJ6wnbj8HWocto"
            },
            "description": null
        }
    },
    "offcial-mascot-of-the-holy-year": {
        "contract_address": "CBdCxKo9QavR9hfShgpEBG3zekorAeD7W1jfq2o3pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CBdCxKo9QavR9hfShgpEBG3zekorAeD7W1jfq2o3pump",
            "standard": "metaplex",
            "name": "Official Mascot of the Holy Year",
            "symbol": "LUCE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CBdCxKo9QavR9hfShgpEBG3zekorAeD7W1jfq2o3pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWdgd1isNAUmeQmQwzw9K8znU8xFNQRDXVt2SsfrPZsvt",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8687386.27",
            "totalSupply": "999987023839926",
            "totalSupplyFormatted": "999987023.839926",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/believeinluce",
                "twitter": "https://x.com/BelieveInLuce",
                "website": "https://www.believeinluce.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/CBdCxKo9QavR9hfShgpEBG3zekorAeD7W1jfq2o3pump"
            },
            "description": null
        }
    },
    "official-baby-trump": {
        "contract_address": "caer1UmwhRsfFk5huGYkXcFmiL2tj4cyT7YjVxUpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "caer1UmwhRsfFk5huGYkXcFmiL2tj4cyT7YjVxUpump",
            "standard": "metaplex",
            "name": "OFFICIAL BABY TRUMP",
            "symbol": "BTRUMP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_caer1UmwhRsfFk5huGYkXcFmiL2tj4cyT7YjVxUpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYmkKCQqZcCJHWf3Q9dQNGQ8AkU1fQdX6fNh4VQQeNZ1T",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "389298.58",
            "totalSupply": "999793460462667",
            "totalSupplyFormatted": "999793460.462667",
            "links": {
                "email": "officialbabytrumptrump@gmail.com",
                "telegram": "https://t.me/officialBtrump",
                "twitter": "https://x.com/solanababytrump",
                "website": "https://officialbabytrump.com",
                "moralis": "https://moralis.com/chain/solana/token/price/caer1UmwhRsfFk5huGYkXcFmiL2tj4cyT7YjVxUpump"
            },
            "description": null
        }
    },
    "official-ray-lewis": {
        "contract_address": "CqGMgsUDbj1XnKe45FbzZLd64MivoKPSgnZQJb3emoon",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CqGMgsUDbj1XnKe45FbzZLd64MivoKPSgnZQJb3emoon",
            "standard": "metaplex",
            "name": "OFFICIAL RAY LEWIS",
            "symbol": "FIT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CqGMgsUDbj1XnKe45FbzZLd64MivoKPSgnZQJb3emoon",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/GQ3VTXOZlFtMincgiMwC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "790125.82",
            "totalSupply": "991633723852865467",
            "totalSupplyFormatted": "991633723.852865467",
            "links": {
                "twitter": "https://x.com/RayLewisFitCoin",
                "website": "https://www.officialray.live/",
                "moralis": "https://moralis.com/chain/solana/token/price/CqGMgsUDbj1XnKe45FbzZLd64MivoKPSgnZQJb3emoon"
            },
            "description": null
        }
    },
    "official-trump": {
        "contract_address": "6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN",
            "standard": "metaplex",
            "name": "OFFICIAL TRUMP",
            "symbol": "TRUMP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/cSCP0h2n1crjeSWE9KF-XtLciJalDNFs7Vf-Sm0NNY0",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5e2qRc1DNEXmyxP8qwPwJhRWjef7usLyi7v5xjqLr5G7",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "12338135687.48",
            "totalSupply": "999999569423209",
            "totalSupplyFormatted": "999999569.423209",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN"
            },
            "description": null
        }
    },
    "official-usa-token": {
        "contract_address": "GAYCVRGZH2tHms1c5sCprE2JEbuz8tJ9ZxCNUX1cKwWR",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GAYCVRGZH2tHms1c5sCprE2JEbuz8tJ9ZxCNUX1cKwWR",
            "standard": "metaplex",
            "name": "Official USA Token",
            "symbol": "USA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GAYCVRGZH2tHms1c5sCprE2JEbuz8tJ9ZxCNUX1cKwWR",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.pinksale.finance/file/pinksale-metadata/tokens/1737266341163-f2901a853e684da337deb0a2b3ce8a50.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "F92aS98g479Ng3jMsowAgqYExrBcNBgsPC8eLGV1QzPE",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "1062615.23",
            "totalSupply": "19999839158407490",
            "totalSupplyFormatted": "19999839.15840749",
            "links": {
                "email": "support@getusamemes.org",
                "telegram": "https://t.me/OfficialUSAToken",
                "twitter": "https://x.com/officialustoken",
                "website": "https://getusamemes.org",
                "moralis": "https://moralis.com/chain/solana/token/price/GAYCVRGZH2tHms1c5sCprE2JEbuz8tJ9ZxCNUX1cKwWR"
            },
            "description": null
        }
    },
    "og-meme": {
        "contract_address": "jE7q5qieKaUXmyhuWTXmGVtpeBoKtgbMbtks7LKogme",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "jE7q5qieKaUXmyhuWTXmGVtpeBoKtgbMbtks7LKogme",
            "standard": "metaplex",
            "name": "OG.meme",
            "symbol": "OGME",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_jE7q5qieKaUXmyhuWTXmGVtpeBoKtgbMbtks7LKogme",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/bafkreigo5vqobjgwhabsdibh4t76mnos6vu4sncg22r2gh4i32bx2jsury",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "3g6HPMMNyPeTx54yKf6gu5gGALMX7cqV9XuJ4uRzWqjB",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "298678.06",
            "totalSupply": "999943299375700",
            "totalSupplyFormatted": "999943299.3757",
            "links": {
                "telegram": "https://t.me/ogdotmeme",
                "twitter": "https://x.com/ogdotmeme",
                "website": "https://og.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/jE7q5qieKaUXmyhuWTXmGVtpeBoKtgbMbtks7LKogme"
            },
            "description": null
        }
    },
    "onemug": {
        "contract_address": "MUG4HkJzrmm9tcsanXMHQS74rTrLrfcW7YdrcYUg9s5",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "MUG4HkJzrmm9tcsanXMHQS74rTrLrfcW7YdrcYUg9s5",
            "standard": "metaplex",
            "name": "OneMug",
            "symbol": "MUG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_MUG4HkJzrmm9tcsanXMHQS74rTrLrfcW7YdrcYUg9s5",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/bafkreidj6yb2w7xwm5aufrjudrtelpa3mrnwl5m2p4fluymkowc2jevvsq",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HwxrBwemequtoNrFWU5ehNtV4Bw4ZG59z3wCJtdEQBMd",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "243344.82",
            "totalSupply": "999995160713017894",
            "totalSupplyFormatted": "999995160.713017894",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/MUG4HkJzrmm9tcsanXMHQS74rTrLrfcW7YdrcYUg9s5"
            },
            "description": null
        }
    },
    "only1": {
        "contract_address": "3bRTivrVsitbmCTGtqwp7hxXPsybkjn4XLNtPsHqa3zR",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3bRTivrVsitbmCTGtqwp7hxXPsybkjn4XLNtPsHqa3zR",
            "standard": "metaplex",
            "name": "LIKE",
            "symbol": "LIKE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3bRTivrVsitbmCTGtqwp7hxXPsybkjn4XLNtPsHqa3zR",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://tgopdjci63ypgy3qjh6mojgc3af5llctlcqknbccpfo3mm74jeia.arweave.net/mZzxpEj28PNjcEn8xyTC2AvVrFNYoKaEQnldtjP8SRA",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BEf817EbuWPvyFT8XDEup4PqzBD7dsC3sWn94gJt7u93",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "9249364.30",
            "totalSupply": "499964935446738868",
            "totalSupplyFormatted": "499964935.446738868",
            "links": {
                "discord": "https://discord.gg/only1-842169399272013824",
                "github": "https://github.com/only1nft",
                "medium": "https://only1nft.medium.com/",
                "telegram": "https://t.me/only1nft",
                "twitter": "https://twitter.com/JoinOnly1",
                "website": "https://only1.app/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/3bRTivrVsitbmCTGtqwp7hxXPsybkjn4XLNtPsHqa3zR"
            },
            "description": null
        }
    },
    "onyx-arches": {
        "contract_address": "4ZfitzW524FUvWrGuNTg3x7d7cfCuNZzUaNEiB2BT5Lj",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4ZfitzW524FUvWrGuNTg3x7d7cfCuNZzUaNEiB2BT5Lj",
            "standard": "metaplex",
            "name": "Onyx Arches",
            "symbol": "OXA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4ZfitzW524FUvWrGuNTg3x7d7cfCuNZzUaNEiB2BT5Lj",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/bafkreicdx7tuhfe5xvqtbo5bgzuxalvyturqqkcjy5wpluumaoqdhynxra",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "78E7iNoy9LW8j4yP889w7ptHiF7p2penMejScPfGKGP3",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "49552639.46",
            "totalSupply": "999981463662146073",
            "totalSupplyFormatted": "999981463.662146073",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/onyxarches",
                "twitter": "https://twitter.com/OnyxArches",
                "website": "https://onyxarches.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/4ZfitzW524FUvWrGuNTg3x7d7cfCuNZzUaNEiB2BT5Lj"
            },
            "description": null
        }
    },
    "opus-2": {
        "contract_address": "9JhFqCA21MoAXs2PTaeqNQp2XngPn1PgYr2rsEVCpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9JhFqCA21MoAXs2PTaeqNQp2XngPn1PgYr2rsEVCpump",
            "standard": "metaplex",
            "name": "Claude Opus",
            "symbol": "OPUS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9JhFqCA21MoAXs2PTaeqNQp2XngPn1PgYr2rsEVCpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmd5cYTnVbdsmfne9NhWDe6B1eH9SGQKV1PYKfracECFmj",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3291662.91",
            "totalSupply": "999930104984299",
            "totalSupplyFormatted": "999930104.984299",
            "links": {
                "telegram": "https://t.me/opus_genesis",
                "twitter": "https://twitter.com/opus_universe",
                "website": "https://opusgenesis.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/9JhFqCA21MoAXs2PTaeqNQp2XngPn1PgYr2rsEVCpump"
            },
            "description": null
        }
    },
    "opx-live": {
        "contract_address": "8AYpR27W1Y8WrW7yVyxB8AaM8qCTuCwMcB3HFmsFpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8AYpR27W1Y8WrW7yVyxB8AaM8qCTuCwMcB3HFmsFpump",
            "standard": "metaplex",
            "name": "OPX LIVE",
            "symbol": "OPXL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8AYpR27W1Y8WrW7yVyxB8AaM8qCTuCwMcB3HFmsFpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmV1E8BohwkPcHPhUTeteDAHZiNXFWVsdpGpBuCyTX3xxd",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1045397.22",
            "totalSupply": "999842400700467",
            "totalSupplyFormatted": "999842400.700467",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8AYpR27W1Y8WrW7yVyxB8AaM8qCTuCwMcB3HFmsFpump"
            },
            "description": null
        }
    },
    "orbit-3": {
        "contract_address": "GekTNfm84QfyP2GdAHZ5AgACBRd69aNmgA5FDhZupump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GekTNfm84QfyP2GdAHZ5AgACBRd69aNmgA5FDhZupump",
            "standard": "metaplex",
            "name": "ORBIT",
            "symbol": "GRIFT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GekTNfm84QfyP2GdAHZ5AgACBRd69aNmgA5FDhZupump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSfwfCFFAnDnkAQ68KPttMg7QzP1FybyZpFq65ortXdzE",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "13916096.60",
            "totalSupply": "999993503638329",
            "totalSupplyFormatted": "999993503.638329",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/SphereOneOfficialGroup",
                "twitter": "https://twitter.com/orbitcryptoai",
                "website": "https://www.orbitcryptoai.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/GekTNfm84QfyP2GdAHZ5AgACBRd69aNmgA5FDhZupump"
            },
            "description": null
        }
    },
    "orbitt-pro": {
        "contract_address": "BGyjasmSzYM9hHiZ1LBU4EJ7KCtRjMSpbN4zTru3W5vf",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BGyjasmSzYM9hHiZ1LBU4EJ7KCtRjMSpbN4zTru3W5vf",
            "standard": "metaplex",
            "name": "Orbitt Token",
            "symbol": "ORBT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BGyjasmSzYM9hHiZ1LBU4EJ7KCtRjMSpbN4zTru3W5vf",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://quicknode.quicknode-ipfs.com/ipfs/QmWkLMKbYmtovHGd99Z68W28JgM5sRHt5LSWGX3SMNiukY",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "89DfUPKmoiCG46jybsXi5s5DziDXn9XPDQVG3EcxS7n7",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5539253.85",
            "totalSupply": "19999719985960661",
            "totalSupplyFormatted": "19999719.985960661",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+nlYbb3cJ3OQ3Njdl",
                "twitter": "https://twitter.com/orbitt_ai",
                "website": "https://orbitt.pro/",
                "moralis": "https://moralis.com/chain/solana/token/price/BGyjasmSzYM9hHiZ1LBU4EJ7KCtRjMSpbN4zTru3W5vf"
            },
            "description": null
        }
    },
    "orc": {
        "contract_address": "CzywqyWnzACqc7nphTAPHC8cb2h7ou6U9TehBrVnzJKx",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CzywqyWnzACqc7nphTAPHC8cb2h7ou6U9TehBrVnzJKx",
            "standard": "metaplex",
            "name": "ORC",
            "symbol": "ORC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CzywqyWnzACqc7nphTAPHC8cb2h7ou6U9TehBrVnzJKx",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmc52u5AEuj4eXBLNYSp9uQLbUNMsReuXHP5gQRTZKbeFy",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BCr5Jdq7RfZrLviv6m499eiBg6YuJ1b6ogVK976Hy6id",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1579427.08",
            "totalSupply": "999889260699219109",
            "totalSupplyFormatted": "999889260.699219109",
            "links": {
                "bitbucket": "https://github.com/ORCSOL",
                "discord": "https://discord.gg/XaGnHpr96Y",
                "github": "https://github.com/ORCSOL",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/orcsolana",
                "twitter": "https://x.com/orcsolana",
                "website": "https://orc.gold/",
                "moralis": "https://moralis.com/chain/solana/token/price/CzywqyWnzACqc7nphTAPHC8cb2h7ou6U9TehBrVnzJKx"
            },
            "description": null
        }
    },
    "orca": {
        "contract_address": "orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE",
            "standard": "metaplex",
            "name": "Orca",
            "symbol": "ORCA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8DzsCSvbvBDYxGB4ytNF698zi6Dyo9dUBVRNjZQFHSUt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "164518126.58",
            "totalSupply": "99999712360461",
            "totalSupplyFormatted": "99999712.360461",
            "links": {
                "discord": "https://discord.com/invite/nSwGWn5KSG",
                "github": "https://github.com/orca-so",
                "medium": "https://orca-so.medium.com/",
                "reddit": "https://www.reddit.com/r/orca_so/",
                "website": "https://www.orca.so/",
                "moralis": "https://moralis.com/chain/solana/token/price/orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE"
            },
            "description": null
        }
    },
    "ore": {
        "contract_address": "oreoU2P8bN6jkk3jbaiVxYnG1dCXcYxwhwyK9jSybcp",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "oreoU2P8bN6jkk3jbaiVxYnG1dCXcYxwhwyK9jSybcp",
            "standard": "metaplex",
            "name": "ORE",
            "symbol": "ORE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_oreoU2P8bN6jkk3jbaiVxYnG1dCXcYxwhwyK9jSybcp",
            "decimals": "11",
            "metaplex": {
                "metadataUri": "https://ore.supply/assets/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HBUh9g46wk2X89CvaNN15UmsznP59rh6od1h8JwYAopk",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8722880.01",
            "totalSupply": "27041228333619594",
            "totalSupplyFormatted": "270412.28333619594",
            "links": {
                "reddit": "https://www.reddit.com",
                "website": "https://ore.supply/",
                "moralis": "https://moralis.com/chain/solana/token/price/oreoU2P8bN6jkk3jbaiVxYnG1dCXcYxwhwyK9jSybcp"
            },
            "description": null
        }
    },
    "orionpay": {
        "contract_address": "3aEMpHgz1U1Eupqt1Tc5KMTLmVW7k1cVY4DQinSepump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3aEMpHgz1U1Eupqt1Tc5KMTLmVW7k1cVY4DQinSepump",
            "standard": "metaplex",
            "name": "OrionPay",
            "symbol": "ORION",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3aEMpHgz1U1Eupqt1Tc5KMTLmVW7k1cVY4DQinSepump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmax18zrdHcJyUfHoQcqj63trLzfNeuDrFAQcvMaPrT9is",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "9469.32",
            "totalSupply": "966454302179712",
            "totalSupplyFormatted": "966454302.179712",
            "links": {
                "telegram": "https://t.me/OrionPaySOL",
                "twitter": "https://twitter.com/OrionPay",
                "website": "https://orionpay.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/3aEMpHgz1U1Eupqt1Tc5KMTLmVW7k1cVY4DQinSepump"
            },
            "description": null
        }
    },
    "osol": {
        "contract_address": "2otVNpcHXn9MKeDk3Zby5uanF3s7tki4toaJ3PZcXaUd",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2otVNpcHXn9MKeDk3Zby5uanF3s7tki4toaJ3PZcXaUd",
            "standard": "metaplex",
            "name": "OSOL",
            "symbol": "OSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2otVNpcHXn9MKeDk3Zby5uanF3s7tki4toaJ3PZcXaUd",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmXtKDn3GCbcBJ2X6kaSCzCqjGCyntkx4n2n3kTvM7333P",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "6c7bHLM2Taeen9yKSg8yNmtYimKi6ma5mBHpR1a96bDB",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "29182423.31",
            "totalSupply": "999998297321445217",
            "totalSupplyFormatted": "999998297.321445217",
            "links": {
                "discord": "https://discord.gg/oxyz",
                "telegram": "https://t.me/oxyz",
                "twitter": "https://twitter.com/o_fndn",
                "website": "https://osol.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/2otVNpcHXn9MKeDk3Zby5uanF3s7tki4toaJ3PZcXaUd"
            },
            "description": null
        }
    },
    "pain": {
        "contract_address": "1Qf8gESP4i6CFNWerUSDdLKJ9U1LpqTYvjJ2MM4pain",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "1Qf8gESP4i6CFNWerUSDdLKJ9U1LpqTYvjJ2MM4pain",
            "standard": "metaplex",
            "name": "PAIN",
            "symbol": "PAIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_1Qf8gESP4i6CFNWerUSDdLKJ9U1LpqTYvjJ2MM4pain",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/t_fIZZYbDIy2eZ8xYFjh-jHEIpT9EtQe7UxkEJZCOMg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "F5jhrNhM99mGoE7shH8sHivEyWneeaag4mCdSiBSX162",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "44412366.87",
            "totalSupply": "9999992245559",
            "totalSupplyFormatted": "9999992.245559",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/1Qf8gESP4i6CFNWerUSDdLKJ9U1LpqTYvjJ2MM4pain"
            },
            "description": null
        }
    },
    "pajamas-cat": {
        "contract_address": "FvER7SsvY5GqAMawf7Qfb5MnUUmDdbPNPg4nCa4zHoLw",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FvER7SsvY5GqAMawf7Qfb5MnUUmDdbPNPg4nCa4zHoLw",
            "standard": "metaplex",
            "name": "The First Youtube Cat",
            "symbol": "PAJAMAS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FvER7SsvY5GqAMawf7Qfb5MnUUmDdbPNPg4nCa4zHoLw",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreiccumvsyqvwzaybs5xr7qhgczn2fmm7rkestcy47ikwc4fquzm6wu.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "ALNJhSkGVujYk7MU3dwiWoRuGKaDXCXrtqb7np57SxaC",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1377113.77",
            "totalSupply": "979877368262782702",
            "totalSupplyFormatted": "979877368.262782702",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/FvER7SsvY5GqAMawf7Qfb5MnUUmDdbPNPg4nCa4zHoLw"
            },
            "description": null
        }
    },
    "panda-swap": {
        "contract_address": "PANDA8iiaCJR5mk3ruypxsGiKh6WhYsmesmbsdd8xYd",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "PANDA8iiaCJR5mk3ruypxsGiKh6WhYsmesmbsdd8xYd",
            "standard": "metaplex",
            "name": "Panda Swap",
            "symbol": "PANDA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_PANDA8iiaCJR5mk3ruypxsGiKh6WhYsmesmbsdd8xYd",
            "decimals": "3",
            "metaplex": {
                "metadataUri": "https://pandaswapsol.io/pandaswap.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7Hs3PsbKLfducvD7ngL5SNkv4duQkjzhZCdg9Uk2yzff",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "647019.64",
            "totalSupply": "888842604395",
            "totalSupplyFormatted": "888842604.395",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/PANDA8iiaCJR5mk3ruypxsGiKh6WhYsmesmbsdd8xYd"
            },
            "description": null
        }
    },
    "papa-on-sol": {
        "contract_address": "35CthCqzK5fewT4Wi8jYyHYNDca1aNQeVoz2JH2Q8HkR",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "35CthCqzK5fewT4Wi8jYyHYNDca1aNQeVoz2JH2Q8HkR",
            "standard": "metaplex",
            "name": "PAPA",
            "symbol": "PAPA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_35CthCqzK5fewT4Wi8jYyHYNDca1aNQeVoz2JH2Q8HkR",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreidid2gt7nvf3ldbaklb4oacjkqriqolkrlorftwoj3tklcklhy5ae.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "3y4YXUgWgSD38Fr4eAEzDrViwHEPmVz7opjEuLd8nXWX",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6434.90",
            "totalSupply": "998277313177688",
            "totalSupplyFormatted": "998277313.177688",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/35CthCqzK5fewT4Wi8jYyHYNDca1aNQeVoz2JH2Q8HkR"
            },
            "description": null
        }
    },
    "paperclip-ai": {
        "contract_address": "BgV8qdfkjCDLPuDwhDaJGpgJj5XeYJeKwhG7E2bkpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BgV8qdfkjCDLPuDwhDaJGpgJj5XeYJeKwhG7E2bkpump",
            "standard": "metaplex",
            "name": "Paperclip AI",
            "symbol": "PAPERCLIPS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BgV8qdfkjCDLPuDwhDaJGpgJj5XeYJeKwhG7E2bkpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWoXzGJTZkeeDNFHAF4pxKTXmmr33pDbJG2qQJ3Cc8XJR",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "461510.36",
            "totalSupply": "985661484256977",
            "totalSupplyFormatted": "985661484.256977",
            "links": {
                "telegram": "https://t.me/aipaperclip",
                "twitter": "https://twitter.com/Paperclip_AI",
                "website": "https://paperclipfactory.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/BgV8qdfkjCDLPuDwhDaJGpgJj5XeYJeKwhG7E2bkpump"
            },
            "description": null
        }
    },
    "parasol-finance": {
        "contract_address": "Hmatmu1ktLbobSvim94mfpZmjL5iiyoM1zidtXJRAdLZ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Hmatmu1ktLbobSvim94mfpZmjL5iiyoM1zidtXJRAdLZ",
            "standard": "metaplex",
            "name": "Parasol",
            "symbol": "PSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Hmatmu1ktLbobSvim94mfpZmjL5iiyoM1zidtXJRAdLZ",
            "decimals": "7",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "PaRaxU6dFX8ZeMPAvW7mXVhJ2UQokrqJhvY9hqyzRjA",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "87274.00",
            "totalSupply": "209980035538915",
            "totalSupplyFormatted": "20998003.5538915",
            "links": {
                "discord": "https://discord.gg/JBzVvUVZPn",
                "github": "https://github.com/parasol-finance",
                "medium": "https://medium.com/@parasol.finance",
                "telegram": "https://t.me/parasolfinance",
                "twitter": "https://twitter.com/parasol_finance",
                "website": "https://parasol.finance",
                "moralis": "https://moralis.com/chain/solana/token/price/Hmatmu1ktLbobSvim94mfpZmjL5iiyoM1zidtXJRAdLZ"
            },
            "description": null
        }
    },
    "parcl": {
        "contract_address": "4LLbsb5ReP3yEtYzmXewyGjcir5uXtKFURtaEUVC2AHs",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4LLbsb5ReP3yEtYzmXewyGjcir5uXtKFURtaEUVC2AHs",
            "standard": "metaplex",
            "name": "Parcl",
            "symbol": "PRCL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4LLbsb5ReP3yEtYzmXewyGjcir5uXtKFURtaEUVC2AHs",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://obliged-coffee-cuckoo.myfilebase.com/ipfs/QmYQNxsnYFwGsFKtRxxXK5gMniuiqeM9qYuE3ttsCXS6Xs",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GKKZmEPuhowYTQcAXBUZtRMn6tXN74t2c51RAvK3aYTL",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "132558356.78",
            "totalSupply": "999998625355172",
            "totalSupplyFormatted": "999998625.355172",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4LLbsb5ReP3yEtYzmXewyGjcir5uXtKFURtaEUVC2AHs"
            },
            "description": null
        }
    },
    "parrot-usd": {
        "contract_address": "Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS",
            "standard": "metaplex",
            "name": "PAI (Parrot USD)",
            "symbol": "PAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5jwBGfXVpcEY9Hqmw2hCu77NMnoMeVKzgKCChf82d1Te",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4088812.25",
            "totalSupply": "4223739610953",
            "totalSupplyFormatted": "4223739.610953",
            "links": {
                "discord": "https://discord.com/invite/gopartyparrot",
                "medium": "https://gopartyparrot.medium.com/",
                "telegram": "https://t.me/gopartyparrot",
                "twitter": "https://twitter.com/gopartyparrot",
                "website": "https://parrot.fi",
                "moralis": "https://moralis.com/chain/solana/token/price/Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS"
            },
            "description": null
        }
    },
    "peanut-the-squirrel": {
        "contract_address": "2qEHjDLDLbuBgRYvsxhc5D6uDWAivNFZGan56P1tpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2qEHjDLDLbuBgRYvsxhc5D6uDWAivNFZGan56P1tpump",
            "standard": "metaplex",
            "name": "Peanut the Squirrel ",
            "symbol": "Pnut ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2qEHjDLDLbuBgRYvsxhc5D6uDWAivNFZGan56P1tpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSkEeAv71gDaLjcwnvVMmDnNsFrhHxrFSFX2Tg4upVe48",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "192215305.72",
            "totalSupply": "999853091133685",
            "totalSupplyFormatted": "999853091.133685",
            "links": {
                "instagram": "https://www.instagram.com/peanut_the_squirrel12",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/pnutportal",
                "twitter": "https://x.com/pnutsolana",
                "moralis": "https://moralis.com/chain/solana/token/price/2qEHjDLDLbuBgRYvsxhc5D6uDWAivNFZGan56P1tpump"
            },
            "description": null
        }
    },
    "peeking-duck": {
        "contract_address": "8ci29P8UHBaQVX752CRhD3btuqDh4mA4Mzqb1Ucjpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8ci29P8UHBaQVX752CRhD3btuqDh4mA4Mzqb1Ucjpump",
            "standard": "metaplex",
            "name": "Peeking Duck",
            "symbol": "QWACK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8ci29P8UHBaQVX752CRhD3btuqDh4mA4Mzqb1Ucjpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbFLe8Hw7Ted4X7fDmqGEeqwzG1EFJ5e889rHdZYbYDJs",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "832269.56",
            "totalSupply": "999997073574027",
            "totalSupplyFormatted": "999997073.574027",
            "links": {
                "email": "qwackmeme@gmail.com",
                "telegram": "https://t.me/qwackheads",
                "twitter": "https://twitter.com/qwackmeme",
                "website": "https://www.qwack.live",
                "moralis": "https://moralis.com/chain/solana/token/price/8ci29P8UHBaQVX752CRhD3btuqDh4mA4Mzqb1Ucjpump"
            },
            "description": null
        }
    },
    "peng": {
        "contract_address": "A3eME5CetyZPBoWbRUwY3tSe25S6tb18ba9ZPbWk9eFJ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "A3eME5CetyZPBoWbRUwY3tSe25S6tb18ba9ZPbWk9eFJ",
            "standard": "metaplex",
            "name": "Peng",
            "symbol": "PENG",
            "logo": "https://adds-token-info-29a861f.s3.eu-central-1.amazonaws.com/marketing/solana/A3eME5CetyZPBoWbRUwY3tSe25S6tb18ba9ZPbWk9eFJ_icon.png",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreifox36koha7q6uai4gzynvbpfesxy6rhngghsg6clsz2vr7lwq4ri.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FEX4UpkU95UxVwgyK6qsLUrj1kJyw2cFLrqbdzKrxaA7",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "2579130.38",
            "totalSupply": "99975008491172",
            "totalSupplyFormatted": "99975008.491172",
            "links": {
                "website": "https://pengsol.xyz/",
                "twitter": "https://x.com/pengonsolana",
                "telegram": "https://t.me/pengonsol",
                "moralis": "https://moralis.com/chain/solana/token/price/A3eME5CetyZPBoWbRUwY3tSe25S6tb18ba9ZPbWk9eFJ"
            },
            "description": "Welcome to $PENG, the icy addition to the Solana blockchain! Our small yet mighty penguin, with a hint of Pepe the Frog, brings a fresh breeze of creativity to the degen world of Solana. As the newest and freshest meme token, $PENG is here spice things up. Join us in bringing warmth and gathering liquidity to the frosty Solana chain."
        }
    },
    "pepe-sol": {
        "contract_address": "B5WTLaRwaUQpKk7ir1wniNB6m5o8GgMrimhKMYan2R6B",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "B5WTLaRwaUQpKk7ir1wniNB6m5o8GgMrimhKMYan2R6B",
            "standard": "metaplex",
            "name": "Pepe",
            "symbol": "Pepe",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_B5WTLaRwaUQpKk7ir1wniNB6m5o8GgMrimhKMYan2R6B",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmSfYnQSoUfuvd2SUGfHdfvqUSq8tyYmWBA7k7dt1o5MWV",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "948257.26",
            "totalSupply": "999482749682482",
            "totalSupplyFormatted": "999482749.682482",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+2jjHGy2PYtc4NWQx",
                "twitter": "https://x.com/pepesolofficial",
                "website": "https://pepeonsolana.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/B5WTLaRwaUQpKk7ir1wniNB6m5o8GgMrimhKMYan2R6B"
            },
            "description": null
        }
    },
    "pepe-trump": {
        "contract_address": "Gk2kRrwNMBU4Dn9JhC1Dks8G5X9nqi4ZE5jMvK6bdgEd",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Gk2kRrwNMBU4Dn9JhC1Dks8G5X9nqi4ZE5jMvK6bdgEd",
            "standard": "metaplex",
            "name": "PepeTrump",
            "symbol": "$PTRUMP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Gk2kRrwNMBU4Dn9JhC1Dks8G5X9nqi4ZE5jMvK6bdgEd",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmVg2jmHF9UFFwLEWCcweV4xNwixiwK2mqPbi6pifQCqdd",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "628462.76",
            "totalSupply": "981937770144908",
            "totalSupplyFormatted": "981937770.144908",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/pepetrumpcom",
                "twitter": "https://twitter.com/pepetrumpsol_",
                "website": "https://pepetrumpcoin.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/Gk2kRrwNMBU4Dn9JhC1Dks8G5X9nqi4ZE5jMvK6bdgEd"
            },
            "description": null
        }
    },
    "pepecat-2": {
        "contract_address": "CRAMvzDsSpXYsFpcoDr6vFLJMBeftez1E7277xwPpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CRAMvzDsSpXYsFpcoDr6vFLJMBeftez1E7277xwPpump",
            "standard": "metaplex",
            "name": "PEPECAT",
            "symbol": "PEPECAT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CRAMvzDsSpXYsFpcoDr6vFLJMBeftez1E7277xwPpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/HDg_JUUUS_zYaJwJ6sq3XIOTq3sBo7ygCyxzKcI8Rj4",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2090151.86",
            "totalSupply": "989939752842061",
            "totalSupplyFormatted": "989939752.842061",
            "links": {
                "email": "pepecat@vitalitycrypto.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/PepeCat_Token_Solana",
                "twitter": "https://x.com/pepecattoken",
                "website": "https://pepecat.vip/",
                "moralis": "https://moralis.com/chain/solana/token/price/CRAMvzDsSpXYsFpcoDr6vFLJMBeftez1E7277xwPpump"
            },
            "description": null
        }
    },
    "pepesol": {
        "contract_address": "F9CpWoyeBJfoRB8f2pBe2ZNPbPsEE76mWZWme3StsvHK",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F9CpWoyeBJfoRB8f2pBe2ZNPbPsEE76mWZWme3StsvHK",
            "standard": "metaplex",
            "name": "Pepe",
            "symbol": "PEPE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_F9CpWoyeBJfoRB8f2pBe2ZNPbPsEE76mWZWme3StsvHK",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreigu6ivqh4tys2zp2y55ynhn5tujzs657e7pxqxx6nitwo5mxygmqy.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HeUTf2m7HrwJ21DR7MuZxKxxdjoAWCf2HZKGpQM5NvTh",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "303541.02",
            "totalSupply": "639033716986613",
            "totalSupplyFormatted": "639033716.986613",
            "links": {
                "telegram": "https://t.me/PepeOnSol",
                "twitter": "https://twitter.com/PepeOnSol",
                "website": "https://pepesol.io/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/F9CpWoyeBJfoRB8f2pBe2ZNPbPsEE76mWZWme3StsvHK"
            },
            "description": null
        }
    },
    "pepo": {
        "contract_address": "pepo1CFNU2RXf7yXX7HNXazXwxsq8WrPvDHpHriwoLY",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "pepo1CFNU2RXf7yXX7HNXazXwxsq8WrPvDHpHriwoLY",
            "standard": "metaplex",
            "name": "PEPO",
            "symbol": "PEPO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_pepo1CFNU2RXf7yXX7HNXazXwxsq8WrPvDHpHriwoLY",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/3rkylYjMpc6Bh1Kr69k2qFbZcTEXPkkcSLmRRrykJpI",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "ZfpbDd2t8ugP2DLEKzLForx8qfTkbZ3aEk7pJC1rHss",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "1743738.30",
            "totalSupply": "997836533440496",
            "totalSupplyFormatted": "997836533.440496",
            "links": {
                "telegram": "https://t.me/pepo_is_fun",
                "twitter": "https://twitter.com/pepo_is_fun",
                "website": "https://pepo.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/pepo1CFNU2RXf7yXX7HNXazXwxsq8WrPvDHpHriwoLY"
            },
            "description": null
        }
    },
    "perspective-ai-by-virtuals": {
        "contract_address": "HpRVpmbpotZT19f6hYrZ16RHS5ALvpWuhmhsatxPvirt",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HpRVpmbpotZT19f6hYrZ16RHS5ALvpWuhmhsatxPvirt",
            "standard": "metaplex",
            "name": "Perspective AI by VIRTUALS",
            "symbol": "PAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HpRVpmbpotZT19f6hYrZ16RHS5ALvpWuhmhsatxPvirt",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://vpmodels-prod.s3.ap-southeast-1.amazonaws.com/virtual-20760/virtual-20760.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "oB978VdVjt18YvRszeAWpqCovfSVCtyQeQY18Pbm1gG",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1839346.82",
            "totalSupply": "999999900124381",
            "totalSupplyFormatted": "999999900.124381",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/HpRVpmbpotZT19f6hYrZ16RHS5ALvpWuhmhsatxPvirt"
            },
            "description": null
        }
    },
    "pesto-the-baby-king-penguin": {
        "contract_address": "34a8ALsPmbWxp7D3bQ6erERrCLz1ahr6u6o66Udmpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "34a8ALsPmbWxp7D3bQ6erERrCLz1ahr6u6o66Udmpump",
            "standard": "metaplex",
            "name": "Pesto the Baby King Penguin",
            "symbol": "PESTO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_34a8ALsPmbWxp7D3bQ6erERrCLz1ahr6u6o66Udmpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmR2u3XWw9JL5VcjCKMR4ayFDAxZysajgoXGZMixe2e7Ms",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "592703.57",
            "totalSupply": "999925046285115",
            "totalSupplyFormatted": "999925046.285115",
            "links": {
                "telegram": "https://t.me/pestoCTO",
                "twitter": "https://twitter.com/PestoCTO",
                "website": "https://www.pestosol.com",
                "moralis": "https://moralis.com/chain/solana/token/price/34a8ALsPmbWxp7D3bQ6erERrCLz1ahr6u6o66Udmpump"
            },
            "description": null
        }
    },
    "phicoin": {
        "contract_address": "BxVQV55MSNF48H3Lur4fj9CTEA7bCVmFJg7gfym1Gs5M",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BxVQV55MSNF48H3Lur4fj9CTEA7bCVmFJg7gfym1Gs5M",
            "standard": "metaplex",
            "name": "Phicoin",
            "symbol": "PHI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BxVQV55MSNF48H3Lur4fj9CTEA7bCVmFJg7gfym1Gs5M",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://raw.githubusercontent.com/PhicoinProject/phi_sol/refs/heads/main/phicoin.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DWV2FATo4KDM6v2N6NcSpdVFrNQXbsdVZW82B9eDnfuX",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1187039.80",
            "totalSupply": "22075200165595040",
            "totalSupplyFormatted": "220752001.6559504",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/BxVQV55MSNF48H3Lur4fj9CTEA7bCVmFJg7gfym1Gs5M"
            },
            "description": null
        }
    },
    "pi-network-dog": {
        "contract_address": "pi1RgmNaLQsNEyEAsrEjgmemojPwitwDAXc3zgseWWF",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "pi1RgmNaLQsNEyEAsrEjgmemojPwitwDAXc3zgseWWF",
            "standard": "metaplex",
            "name": "Pi Network Dog",
            "symbol": "PIDOG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_pi1RgmNaLQsNEyEAsrEjgmemojPwitwDAXc3zgseWWF",
            "decimals": "3",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "32421217.07",
            "totalSupply": "31415908009667292",
            "totalSupplyFormatted": "31415908009667.292",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/pi1RgmNaLQsNEyEAsrEjgmemojPwitwDAXc3zgseWWF"
            },
            "description": null
        }
    },
    "pigeon-tech": {
        "contract_address": "4kHu4VktgzpZW9i8LEsHZrNLJcTV98nGhyZE5JSEpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4kHu4VktgzpZW9i8LEsHZrNLJcTV98nGhyZE5JSEpump",
            "standard": "metaplex",
            "name": "Pigeon Tech",
            "symbol": "GOVAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4kHu4VktgzpZW9i8LEsHZrNLJcTV98nGhyZE5JSEpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVwkc6J11tQdYSEhw1Z5VtG6Ge5K8Q1jfzPLQAc7aEa58",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4120041.85",
            "totalSupply": "999837128421205",
            "totalSupplyFormatted": "999837128.421205",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+MdDumaNLRblhY2U6",
                "twitter": "https://x.com/pigeontechgovai",
                "website": "https://pigeontech.network/",
                "moralis": "https://moralis.com/chain/solana/token/price/4kHu4VktgzpZW9i8LEsHZrNLJcTV98nGhyZE5JSEpump"
            },
            "description": null
        }
    },
    "pingu-land": {
        "contract_address": "2idBzH45gfXFEhivcQVTXVgQGUDhX8scXoZwAiTQUT6L",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2idBzH45gfXFEhivcQVTXVgQGUDhX8scXoZwAiTQUT6L",
            "standard": "metaplex",
            "name": "pingu",
            "symbol": "PINGU",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2idBzH45gfXFEhivcQVTXVgQGUDhX8scXoZwAiTQUT6L",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/Fw04nhnUqf1DqUKpCxZ0bw4mAUt1L5kmNJE4mtZtBJc",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8XAai76f9PQhRsAhzH5fZdkeiWbQZSwWujhZssr9Eyey",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "367239.47",
            "totalSupply": "988933503166711289",
            "totalSupplyFormatted": "988933503.166711289",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/2idBzH45gfXFEhivcQVTXVgQGUDhX8scXoZwAiTQUT6L"
            },
            "description": null
        }
    },
    "pink-elements": {
        "contract_address": "CfUysiZv5tYdtAKxNcK8VP5vz9uRBLNv6NQfKe2hMfbb",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CfUysiZv5tYdtAKxNcK8VP5vz9uRBLNv6NQfKe2hMfbb",
            "standard": "metaplex",
            "name": "Pink Elements",
            "symbol": "PINK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CfUysiZv5tYdtAKxNcK8VP5vz9uRBLNv6NQfKe2hMfbb",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://vesting.pink-token.com/pink/metadata.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "85vBjGmjVMtPr9w4MnWyJSAEHqHi7ga2gqoZ8oh8q17k",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "27902408.87",
            "totalSupply": "9999996009412789",
            "totalSupplyFormatted": "9999996009.412789",
            "links": {
                "github": "https://github.com/Pink-Elements-AG",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+hwk9f4ITku8wZGE0",
                "twitter": "https://twitter.com/pink_elements?s=21&t=NmpH23kFcZ3fDv_GcGvqxQ",
                "website": "https://pink-elements.com",
                "moralis": "https://moralis.com/chain/solana/token/price/CfUysiZv5tYdtAKxNcK8VP5vz9uRBLNv6NQfKe2hMfbb"
            },
            "description": null
        }
    },
    "pino": {
        "contract_address": "7b36cKRYFZsMp3vLByVwfVQxW2ndcYth5rhPnyypump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7b36cKRYFZsMp3vLByVwfVQxW2ndcYth5rhPnyypump",
            "standard": "metaplex",
            "name": "PINO",
            "symbol": "PINO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7b36cKRYFZsMp3vLByVwfVQxW2ndcYth5rhPnyypump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmSAEv2X4hvnU3gvjrzBFdxDJgBru3k33JrnZpc75Kiqdo",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3690148.33",
            "totalSupply": "989752406131195",
            "totalSupplyFormatted": "989752406.131195",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7b36cKRYFZsMp3vLByVwfVQxW2ndcYth5rhPnyypump"
            },
            "description": null
        }
    },
    "pip": {
        "contract_address": "HHjoYwUp5aU6pnrvN4s2pwEErwXNZKhxKGYjRJMoBjLw",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HHjoYwUp5aU6pnrvN4s2pwEErwXNZKhxKGYjRJMoBjLw",
            "standard": "metaplex",
            "name": "PIP",
            "symbol": "PIP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HHjoYwUp5aU6pnrvN4s2pwEErwXNZKhxKGYjRJMoBjLw",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5588747.82",
            "totalSupply": "970289944165357717",
            "totalSupplyFormatted": "970289944.165357717",
            "links": {
                "discord": "https://discord.com/invite/pip",
                "medium": "https://medium.com/@getpip",
                "reddit": "https://www.reddit.com/r/getpip/",
                "telegram": "https://t.me/getpip",
                "twitter": "https://twitter.com/getpipcom",
                "website": "https://www.getpip.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/HHjoYwUp5aU6pnrvN4s2pwEErwXNZKhxKGYjRJMoBjLw"
            },
            "description": null
        }
    },
    "pipi-the-cat": {
        "contract_address": "BZKuDqzD4rb2puUV2cbSNd2kZzJ5JzKiQKwBzCk8hrLu",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BZKuDqzD4rb2puUV2cbSNd2kZzJ5JzKiQKwBzCk8hrLu",
            "standard": "metaplex",
            "name": "pipi the cat",
            "symbol": "pipi",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BZKuDqzD4rb2puUV2cbSNd2kZzJ5JzKiQKwBzCk8hrLu",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/reuQISa-noOOx9Nv6HtCv1cpo3b01bOEXP9vrdVmYqw",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "92U6CbaqjMrZYMFm5rKdqGPrBfCp1UP9mwVNahsA2Dst",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "13397.77",
            "totalSupply": "998724532376881",
            "totalSupplyFormatted": "998724.532376881",
            "links": {
                "email": "contact@pipithecat.com",
                "telegram": "https://pipithecat.com/_link/?link=https%3A%2F%2Ft.me%2Fpipicatoken&target=jGsV4do%2F7dZMuA1pe%2BIRtGt3BPaF9VElLVcdzU57yn4BAUjCqpGgBUaPjNvh%2BhVLPCjX5h1IDYQm4wEQeAYwIVY%2FSzIhe8UD&iv=pf%2FoMNdIh1OwJ5TJ",
                "twitter": "https://twitter.com/pipithecatsol",
                "website": "https://pipithecat.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/BZKuDqzD4rb2puUV2cbSNd2kZzJ5JzKiQKwBzCk8hrLu"
            },
            "description": null
        }
    },
    "pippin": {
        "contract_address": "Dfh5DzRgSvvCFDoYc2ciTkMrbDfRKybA4SoFbPmApump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Dfh5DzRgSvvCFDoYc2ciTkMrbDfRKybA4SoFbPmApump",
            "standard": "metaplex",
            "name": "Pippin",
            "symbol": "pippin",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Dfh5DzRgSvvCFDoYc2ciTkMrbDfRKybA4SoFbPmApump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWbM38Bhhcj4vQZpSyesRSotgoqicNjfaNoMmuDGtWZ2o",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "24862107.41",
            "totalSupply": "999947409214467",
            "totalSupplyFormatted": "999947409.214467",
            "links": {
                "github": "https://github.com/yoheinakajima/pippin_moves",
                "telegram": "https://t.me/PippinPortal",
                "twitter": "https://twitter.com/pippinlovesyou",
                "website": "https://pippin.love",
                "moralis": "https://moralis.com/chain/solana/token/price/Dfh5DzRgSvvCFDoYc2ciTkMrbDfRKybA4SoFbPmApump"
            },
            "description": null
        }
    },
    "pisces": {
        "contract_address": "3JsSsmGzjWDNe9XCw2L9vznC5JU9wSqQeB6ns5pAkPeE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3JsSsmGzjWDNe9XCw2L9vznC5JU9wSqQeB6ns5pAkPeE",
            "standard": "metaplex",
            "name": "Pisces",
            "symbol": "PISCES",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3JsSsmGzjWDNe9XCw2L9vznC5JU9wSqQeB6ns5pAkPeE",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/U95QBeZOmnUTItfvQJvtJ3H8bUNCDqTiGx63rNA-tRc",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DUK1VN3WatYKsVLwRX2JxfJfaKX6bDXvijpPtT28ed13",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "334497.48",
            "totalSupply": "999998454894137",
            "totalSupplyFormatted": "999998454.894137",
            "links": {
                "telegram": "https://t.me/astrofoliosol",
                "twitter": "https://twitter.com/astrofoliosol",
                "website": "https://astrofolio.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/3JsSsmGzjWDNe9XCw2L9vznC5JU9wSqQeB6ns5pAkPeE"
            },
            "description": null
        }
    },
    "planktos": {
        "contract_address": "DVuaDuQdPZ6H49inC2Xoyx7BpLAAJTPPChSfHuGpy8X4",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DVuaDuQdPZ6H49inC2Xoyx7BpLAAJTPPChSfHuGpy8X4",
            "standard": "metaplex",
            "name": "Planktos",
            "symbol": "PLANK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DVuaDuQdPZ6H49inC2Xoyx7BpLAAJTPPChSfHuGpy8X4",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreibxgc637ita3hm2u7u3kb7scd3ch3xvw3s24h7wtakakhxvr6kscm.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BcdasB9xXUKKXRD77EkLymTcF4dTDFKcxM5jC2KYr6F3",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "27216.03",
            "totalSupply": "969611520722640314",
            "totalSupplyFormatted": "969611520.722640314",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/DVuaDuQdPZ6H49inC2Xoyx7BpLAAJTPPChSfHuGpy8X4"
            },
            "description": null
        }
    },
    "plath": {
        "contract_address": "7wMutxpCdP3GbKaoMWoPVf2sFLCeV7a9ox25v1h2QsTp",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7wMutxpCdP3GbKaoMWoPVf2sFLCeV7a9ox25v1h2QsTp",
            "standard": "metaplex",
            "name": "Plath",
            "symbol": "PLath",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7wMutxpCdP3GbKaoMWoPVf2sFLCeV7a9ox25v1h2QsTp",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/aEuhWexXrVI4U2WLqA3G",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "427266.51",
            "totalSupply": "969460640271386756",
            "totalSupplyFormatted": "969460640.271386756",
            "links": {
                "telegram": "https://t.me/PLATHPortal",
                "twitter": "https://twitter.com/PlathCoin",
                "website": "https://plathonsolana.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/7wMutxpCdP3GbKaoMWoPVf2sFLCeV7a9ox25v1h2QsTp"
            },
            "description": null
        }
    },
    "pluto-2": {
        "contract_address": "UEPp8H46WkPiBmi7nw35nyfFDNpxp9LWRPxSMHXpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "UEPp8H46WkPiBmi7nw35nyfFDNpxp9LWRPxSMHXpump",
            "standard": "metaplex",
            "name": "PLUTO",
            "symbol": "PLUTO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_UEPp8H46WkPiBmi7nw35nyfFDNpxp9LWRPxSMHXpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQWvpfgSvTyxhFCLvQB88eG8D33ZcTfbFVECoCLQqXFty",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "12037.68",
            "totalSupply": "999724252299575",
            "totalSupplyFormatted": "999724252.299575",
            "links": {
                "telegram": "https://t.me/plutopurgatory",
                "twitter": "https://twitter.com/PlutoPrays",
                "website": "https://plutoprays.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/UEPp8H46WkPiBmi7nw35nyfFDNpxp9LWRPxSMHXpump"
            },
            "description": null
        }
    },
    "pochita": {
        "contract_address": "E6AujzX54E1ZoPDFP2CyG3HHUVKygEkp6DRqig61pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "E6AujzX54E1ZoPDFP2CyG3HHUVKygEkp6DRqig61pump",
            "standard": "metaplex",
            "name": "Pochita",
            "symbol": "Pochita",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_E6AujzX54E1ZoPDFP2CyG3HHUVKygEkp6DRqig61pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmR765JyUcBAbTDfDaNfCGBQf7AMCZxcz8tjybVyoX8TfE",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "340125.61",
            "totalSupply": "999948874192125",
            "totalSupplyFormatted": "999948874.192125",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/pochitactoportal",
                "twitter": "https://x.com/PochitaSolCTO",
                "website": "https://pochita.biz/",
                "moralis": "https://moralis.com/chain/solana/token/price/E6AujzX54E1ZoPDFP2CyG3HHUVKygEkp6DRqig61pump"
            },
            "description": null
        }
    },
    "pomkori": {
        "contract_address": "3h1H6gNEGRsKCV76FDJTQaN9g1LNkGPPX3XmKdispump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3h1H6gNEGRsKCV76FDJTQaN9g1LNkGPPX3XmKdispump",
            "standard": "metaplex",
            "name": "pomkori",
            "symbol": "kori",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3h1H6gNEGRsKCV76FDJTQaN9g1LNkGPPX3XmKdispump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPKXio2gCbKbwkzprFd4bS8ztHdwEXwQh2fuDS1TbezRP",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "802218.09",
            "totalSupply": "999956486697740",
            "totalSupplyFormatted": "999956486.69774",
            "links": {
                "telegram": "https://t.me/kori_cto",
                "twitter": "https://twitter.com/korionsol",
                "website": "https://www.pomkori.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/3h1H6gNEGRsKCV76FDJTQaN9g1LNkGPPX3XmKdispump"
            },
            "description": null
        }
    },
    "ponke": {
        "contract_address": "5z3EqYQo9HiCEs3R84RCDMu2n7anpDMxRhdK8PSWmrRC",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5z3EqYQo9HiCEs3R84RCDMu2n7anpDMxRhdK8PSWmrRC",
            "standard": "metaplex",
            "name": "PONKE",
            "symbol": "PONKE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5z3EqYQo9HiCEs3R84RCDMu2n7anpDMxRhdK8PSWmrRC",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/S6nT0toKFAzwMJ7gm7Bh78tLTk9LeSGRjT2_1gp6otk",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Dpgnf4FJYTCmQGFZ8taQg72AzLW3SYDpXjn9wGXCYC8o",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "64228207.67",
            "totalSupply": "555539745313839323",
            "totalSupplyFormatted": "555539745.313839323",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/5z3EqYQo9HiCEs3R84RCDMu2n7anpDMxRhdK8PSWmrRC"
            },
            "description": null
        }
    },
    "popcat": {
        "contract_address": "7GCihgDB8fe6KNjn2MYtkzZcRjQy3t9GHdC8uHYmW2hr",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7GCihgDB8fe6KNjn2MYtkzZcRjQy3t9GHdC8uHYmW2hr",
            "standard": "metaplex",
            "name": "POPCAT",
            "symbol": "POPCAT",
            "logo": "https://adds-token-info-29a861f.s3.eu-central-1.amazonaws.com/marketing/solana/7GCihgDB8fe6KNjn2MYtkzZcRjQy3t9GHdC8uHYmW2hr_icon.png",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/IiX6OFxiM1wb8DOSidDSn_6KVHqCpwnshUzU8RU5EN8",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8LAnvxpF7kL1iUjDRjmP87xiuyCx4yX3ZRAoDCChKe1L",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "215607226.91",
            "totalSupply": "979940708434274947",
            "totalSupplyFormatted": "979940708.434274947",
            "links": {
                "website": "https://www.popcatsolana.xyz/",
                "twitter": "https://x.com/POPCATSOLANA",
                "telegram": "https://t.me/popcatsolana",
                "moralis": "https://moralis.com/chain/solana/token/price/7GCihgDB8fe6KNjn2MYtkzZcRjQy3t9GHdC8uHYmW2hr"
            },
            "description": "Popcat is an Internet meme originating in October 2020, in a series of videos which showcase two images of a domestic short-haired cat named 'Oatmeal', where one image has its mouth closed and the other has its mouth open, with the second image being edited to give its mouth an 'O' shape."
        }
    },
    "popdog": {
        "contract_address": "EATGZHJViJsk7nEKkrdJicwNbfpkJfAtmrEmrjXR8NBj",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EATGZHJViJsk7nEKkrdJicwNbfpkJfAtmrEmrjXR8NBj",
            "standard": "metaplex",
            "name": "PopDog",
            "symbol": "POPDOG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EATGZHJViJsk7nEKkrdJicwNbfpkJfAtmrEmrjXR8NBj",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://i.degencdn.com/ipfs/bafkreib4t34gz77fte2lvnrvs2f7rckxs7j3bbsynefc3szbxeenrctiya",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "ApDeZQvLTnwRAF58386kgpPGcfe9iuUz7kHZRBBtJqBw",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "771021.17",
            "totalSupply": "993691543334612",
            "totalSupplyFormatted": "993691543.334612",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/POPDOG1",
                "tiktok": "https://www.tiktok.com/@popdogsolcoin",
                "twitter": "https://twitter.com/POPDOGsolcoin",
                "website": "https://www.popdog-solana.com",
                "moralis": "https://moralis.com/chain/solana/token/price/EATGZHJViJsk7nEKkrdJicwNbfpkJfAtmrEmrjXR8NBj"
            },
            "description": null
        }
    },
    "powsche": {
        "contract_address": "8CkiSHHJDHJV4LUoiRMLUhqG58cUkbyJRtcP4Z3mCXNf",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8CkiSHHJDHJV4LUoiRMLUhqG58cUkbyJRtcP4Z3mCXNf",
            "standard": "metaplex",
            "name": "POWSCHE",
            "symbol": "POWSCHE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8CkiSHHJDHJV4LUoiRMLUhqG58cUkbyJRtcP4Z3mCXNf",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWpRrzWMK8kfuCqwaSQjA7FhXT7U7qchFPWEEkupTCJeZ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "EQhFYoNWiepS4SGgiTZvX1X2ULYiN4Et6hPk5md97Qdy",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1328199.68",
            "totalSupply": "99885854291539369",
            "totalSupplyFormatted": "99885854.291539369",
            "links": {
                "instagram": "https://www.instagram.com/powsche.sol/",
                "telegram": "https://t.me/powsche",
                "twitter": "https://twitter.com/powscheonsol",
                "website": "https://powsche.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/8CkiSHHJDHJV4LUoiRMLUhqG58cUkbyJRtcP4Z3mCXNf"
            },
            "description": null
        }
    },
    "print-protocol": {
        "contract_address": "8stssUiCFbcB2LqCS62EuU2x1K2NWbJJo1YPgskpftWK",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8stssUiCFbcB2LqCS62EuU2x1K2NWbJJo1YPgskpftWK",
            "standard": "metaplex",
            "name": "Print Protocol",
            "symbol": "PRINT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8stssUiCFbcB2LqCS62EuU2x1K2NWbJJo1YPgskpftWK",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2553407.35",
            "totalSupply": "9951312805787914",
            "totalSupplyFormatted": "9951312805.787914",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/PrintSolana",
                "twitter": "https://twitter.com/PrintProtocol",
                "website": "https://printsolana.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/8stssUiCFbcB2LqCS62EuU2x1K2NWbJJo1YPgskpftWK"
            },
            "description": null
        }
    },
    "prism": {
        "contract_address": "PRSMNsEPqhGVCH1TtWiJqPjJyh2cKrLostPZTNy1o5x",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "PRSMNsEPqhGVCH1TtWiJqPjJyh2cKrLostPZTNy1o5x",
            "standard": "metaplex",
            "name": "PRISM",
            "symbol": "PRISM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_PRSMNsEPqhGVCH1TtWiJqPjJyh2cKrLostPZTNy1o5x",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1442706.03",
            "totalSupply": "1913403229413467",
            "totalSupplyFormatted": "1913403229.413467",
            "links": {
                "discord": "https://discord.gg/CZsjrKuaMK",
                "medium": "https://medium.com/@prism_ag/",
                "twitter": "https://twitter.com/prism_ag",
                "website": "https://prism.ag",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/PRSMNsEPqhGVCH1TtWiJqPjJyh2cKrLostPZTNy1o5x"
            },
            "description": null
        }
    },
    "project-plutus": {
        "contract_address": "76PsEyML7UV9uiBDWMdG3itRRuupDuRs6nNpjNBpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "76PsEyML7UV9uiBDWMdG3itRRuupDuRs6nNpjNBpump",
            "standard": "metaplex",
            "name": "Project Plutus",
            "symbol": "PPCOIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_76PsEyML7UV9uiBDWMdG3itRRuupDuRs6nNpjNBpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmekbwk2tQYGMvx6eqgPMWGVa24m1ujM5kdkzkstSVwEjw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1444213.63",
            "totalSupply": "999994201575116",
            "totalSupplyFormatted": "999994201.575116",
            "links": {
                "telegram": "https://t.me/PlutusZz",
                "twitter": "https://twitter.com/ProjectPlutus_",
                "website": "https://www.projectplutus.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/76PsEyML7UV9uiBDWMdG3itRRuupDuRs6nNpjNBpump"
            },
            "description": null
        }
    },
    "project89": {
        "contract_address": "Bz4MhmVRQENiCou7ZpJ575wpjNFjBjVBSiVhuNg1pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Bz4MhmVRQENiCou7ZpJ575wpjNFjBjVBSiVhuNg1pump",
            "standard": "metaplex",
            "name": "Project89",
            "symbol": "Project89",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Bz4MhmVRQENiCou7ZpJ575wpjNFjBjVBSiVhuNg1pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQHRRymXKULG2qR23fdgVvRbJa6KJCEzarEFkLVAKE33X",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2008744.51",
            "totalSupply": "999889253862712",
            "totalSupplyFormatted": "999889253.862712",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/project89sol",
                "twitter": "https://twitter.com/project_89",
                "website": "https://www.project89.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/Bz4MhmVRQENiCou7ZpJ575wpjNFjBjVBSiVhuNg1pump"
            },
            "description": null
        }
    },
    "prometheus-waluigi": {
        "contract_address": "9jpeicbKQKiczgu1wBVTDUgM8rVjbQGG2jBK8g8Hpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9jpeicbKQKiczgu1wBVTDUgM8rVjbQGG2jBK8g8Hpump",
            "standard": "metaplex",
            "name": "Prometheus Waluigi",
            "symbol": "PROME",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9jpeicbKQKiczgu1wBVTDUgM8rVjbQGG2jBK8g8Hpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSDEpCR2Lw5ct5ovprj5jnfPVNKbHr6Lej2SywMC54Ldn",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "182036.22",
            "totalSupply": "998049386014333",
            "totalSupplyFormatted": "998049386.014333",
            "links": {
                "twitter": "https://twitter.com/PromeRevival",
                "website": "https://cyborgism.wiki/hypha/prometheus_waluigi",
                "moralis": "https://moralis.com/chain/solana/token/price/9jpeicbKQKiczgu1wBVTDUgM8rVjbQGG2jBK8g8Hpump"
            },
            "description": null
        }
    },
    "pssymonstr": {
        "contract_address": "J5MopnZxBw7E3CRGC28hrKA3MXvmQ8Gwn4n9cPezKX3k",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "J5MopnZxBw7E3CRGC28hrKA3MXvmQ8Gwn4n9cPezKX3k",
            "standard": "metaplex",
            "name": "PssyMonstr",
            "symbol": "PssyMonstr",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_J5MopnZxBw7E3CRGC28hrKA3MXvmQ8Gwn4n9cPezKX3k",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmZosK2Jm4cckG2Cg4o4jAUzymBmXvLoT5oEnLbT7fojoT",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "484888.35",
            "totalSupply": "748156335981829",
            "totalSupplyFormatted": "748156335.981829",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/J5MopnZxBw7E3CRGC28hrKA3MXvmQ8Gwn4n9cPezKX3k"
            },
            "description": null
        }
    },
    "psyop-2": {
        "contract_address": "DAFdakKAEvB6GtJgnDk1LC1QK4gQrtTK3eKUZtAJpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DAFdakKAEvB6GtJgnDk1LC1QK4gQrtTK3eKUZtAJpump",
            "standard": "metaplex",
            "name": "PSYOP",
            "symbol": "PSYOP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DAFdakKAEvB6GtJgnDk1LC1QK4gQrtTK3eKUZtAJpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmXvHuXouxxKUYbQXEDzPjsURMy3LRu2jyEs2NGyAgZo22",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "329458.92",
            "totalSupply": "994586951550444",
            "totalSupplyFormatted": "994586951.550444",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/SolPsyop",
                "twitter": "https://twitter.com/Psyop_on_sol",
                "website": "https://psyopscouts.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/DAFdakKAEvB6GtJgnDk1LC1QK4gQrtTK3eKUZtAJpump"
            },
            "description": null
        }
    },
    "psyoptions": {
        "contract_address": "PsyFiqqjiv41G7o5SMRzDJCu4psptThNR2GtfeGHfSq",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "PsyFiqqjiv41G7o5SMRzDJCu4psptThNR2GtfeGHfSq",
            "standard": "metaplex",
            "name": "PsyOptions",
            "symbol": "PSY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_PsyFiqqjiv41G7o5SMRzDJCu4psptThNR2GtfeGHfSq",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "562998.39",
            "totalSupply": "999997145926595",
            "totalSupplyFormatted": "999997145.926595",
            "links": {
                "discord": "https://discord.com/invite/MgDdJKgZJc",
                "github": "https://github.com/mithraiclabs",
                "medium": "https://medium.com/psyoptions",
                "telegram": "https://t.me/psyoptions",
                "twitter": "https://twitter.com/PsyOptions",
                "website": "https://www.psyfi.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/PsyFiqqjiv41G7o5SMRzDJCu4psptThNR2GtfeGHfSq"
            },
            "description": null
        }
    },
    "pucca": {
        "contract_address": "8aJuQEkQstCrSUXVGpmgaTqgSG7cW8FmVaudu8UBem6A",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8aJuQEkQstCrSUXVGpmgaTqgSG7cW8FmVaudu8UBem6A",
            "standard": "metaplex",
            "name": "PUCCA",
            "symbol": "PUCCA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8aJuQEkQstCrSUXVGpmgaTqgSG7cW8FmVaudu8UBem6A",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/bafkreihcsrzmkdx5jsigypvhfho5gg22elsvz2cfsrpshht3dczbfhsmg4",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DpJxvS23eA7yHKotdyQdKLJ714BMQXc56JBe5BoLG2K2",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1155422.76",
            "totalSupply": "839987961639274",
            "totalSupplyFormatted": "839987961.639274",
            "links": {
                "bitbucket": "https://github.com/puccadao",
                "github": "https://github.com/puccadao",
                "instagram": "https://www.instagram.com/pucca_world",
                "telegram": "https://t.me/puccameme",
                "tiktok": "https://www.tiktok.com/@pucca_world",
                "twitter": "https://x.com/puccaincrypto",
                "website": "https://pucca.meme/",
                "youtube": "https://www.youtube.com/@PuccaMeme",
                "moralis": "https://moralis.com/chain/solana/token/price/8aJuQEkQstCrSUXVGpmgaTqgSG7cW8FmVaudu8UBem6A"
            },
            "description": null
        }
    },
    "pudgy-penguins": {
        "contract_address": "2zMMhcVQEXDtdE6vsFS7S7D5oUodfJHE8vd1gnBouauv",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2zMMhcVQEXDtdE6vsFS7S7D5oUodfJHE8vd1gnBouauv",
            "standard": "metaplex",
            "name": "Pudgy Penguins",
            "symbol": "PENGU",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2zMMhcVQEXDtdE6vsFS7S7D5oUodfJHE8vd1gnBouauv",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/nFo9Nwcam4ek0SwtKQchYD47T9dkTpGqL62CgcXSjZE",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GziA3ZgkmnUcK9vuscnDpzLTcpHTSnmyQ6JwPKP5oSkR",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "599657938.64",
            "totalSupply": "88888556976745391",
            "totalSupplyFormatted": "88888556976.745391",
            "links": {
                "discord": "https://discord.com/invite/pudgypenguins",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/pengutg",
                "twitter": "https://twitter.com/pudgypenguins",
                "website": "https://pudgypenguins.com",
                "moralis": "https://moralis.com/chain/solana/token/price/2zMMhcVQEXDtdE6vsFS7S7D5oUodfJHE8vd1gnBouauv"
            },
            "description": null
        }
    },
    "pumpai": {
        "contract_address": "7vsKatZ8BAKXXb16ZZMJyg9X3iLn8Zpq4yBPg8mWBLMd",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7vsKatZ8BAKXXb16ZZMJyg9X3iLn8Zpq4yBPg8mWBLMd",
            "standard": "metaplex",
            "name": "PumpAI",
            "symbol": "PumpAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7vsKatZ8BAKXXb16ZZMJyg9X3iLn8Zpq4yBPg8mWBLMd",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmNsPzaoci89MxeVLbubB2YTQTcWfouDBhQq1EWAUNfU9P",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HBu1pVa3xB9uvYzFN6tEedueqK5ttiTrphCw7skmGaR9",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "774676.18",
            "totalSupply": "999992491658248",
            "totalSupplyFormatted": "999992491.658248",
            "links": {
                "telegram": "https://t.me/PumpAICommunity",
                "twitter": "https://x.com/pumpdotai",
                "website": "https://pumpai.ag/",
                "moralis": "https://moralis.com/chain/solana/token/price/7vsKatZ8BAKXXb16ZZMJyg9X3iLn8Zpq4yBPg8mWBLMd"
            },
            "description": null
        }
    },
    "pumpkin-4": {
        "contract_address": "2RBko3xoz56aH69isQMUpzZd9NYHahhwC23A5F3Spkin",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2RBko3xoz56aH69isQMUpzZd9NYHahhwC23A5F3Spkin",
            "standard": "metaplex",
            "name": "PUMPKIN",
            "symbol": "PKIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2RBko3xoz56aH69isQMUpzZd9NYHahhwC23A5F3Spkin",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPtUH7iDPoeD6NoBWscb8Jz8bDUZc87QL3NBJwCAQLZYz/0",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "85c4VNwMhWtj5ygDgRjs2scmYRGetFeSf7RYNjtPErq1",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "9301098.25",
            "totalSupply": "999938210459719",
            "totalSupplyFormatted": "999938210.459719",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/2RBko3xoz56aH69isQMUpzZd9NYHahhwC23A5F3Spkin"
            },
            "description": null
        }
    },
    "pundu": {
        "contract_address": "WskzsKqEW3ZsmrhPAevfVZb6PuuLzWov9mJWZsfDePC",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "WskzsKqEW3ZsmrhPAevfVZb6PuuLzWov9mJWZsfDePC",
            "standard": "metaplex",
            "name": "PUNDU",
            "symbol": "PUNDU",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_WskzsKqEW3ZsmrhPAevfVZb6PuuLzWov9mJWZsfDePC",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreig5uiox6kfcgh36zyjc25adgzzbopcolguobr37vyhxhez6eacx5q.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "26nCUtGJA7NKp2bsTvhQPBq1FW6wtGVHYkRYaAPaBbKA",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3336717.59",
            "totalSupply": "995893893094534269",
            "totalSupplyFormatted": "995893893.094534269",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/punduchat",
                "twitter": "https://twitter.com/pundusol",
                "website": "https://pundu.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/WskzsKqEW3ZsmrhPAevfVZb6PuuLzWov9mJWZsfDePC"
            },
            "description": null
        }
    },
    "purple-pepe": {
        "contract_address": "HBoNJ5v8g71s2boRivrHnfSB5MVPLDHHyVjruPfhGkvL",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HBoNJ5v8g71s2boRivrHnfSB5MVPLDHHyVjruPfhGkvL",
            "standard": "metaplex",
            "name": "Purple Pepe",
            "symbol": "PURPE",
            "logo": "https://adds-token-info-29a861f.s3.amazonaws.com/solana/HBoNJ5v8g71s2boRivrHnfSB5MVPLDHHyVjruPfhGkvL/4c54997b-7077-4f77-9a98-72fcecacbcb8.jpg",
            "decimals": "1",
            "metaplex": {
                "metadataUri": "https://bafkreicsdh3c5chn5evtyyymx6s5p2hfztojy55h6pvth3o2dhtbgay23u.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "83yrwvqCLnCn8RFSzRQStmujprDAVHL8tBWy8FhBm5Qu",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "20643908.63",
            "totalSupply": "4206775340653",
            "totalSupplyFormatted": "420677534065.3",
            "links": {
                "telegram": "t.me/Purpe_SOL",
                "moralis": "https://moralis.com/chain/solana/token/price/HBoNJ5v8g71s2boRivrHnfSB5MVPLDHHyVjruPfhGkvL"
            },
            "description": "$PURPE: Powered by WallStreetBets on Facebook\u2014the largest degen hub on the planet with 550K+ members and counting!\n\nFirst Pepe created on Solana deployed July 2023. Purple Pepe is the OG Pepe on Solana and was created to make Solana Great Again. We are for Solana we are for the people."
        }
    },
    "push": {
        "contract_address": "28gBfdqoTdbVJnmqZK4hg9rZ7RGJk4Ru37VrbA15pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "28gBfdqoTdbVJnmqZK4hg9rZ7RGJk4Ru37VrbA15pump",
            "standard": "metaplex",
            "name": "PUSH",
            "symbol": "PUSH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_28gBfdqoTdbVJnmqZK4hg9rZ7RGJk4Ru37VrbA15pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmXh8wTVmU5HRYKC62b2o3bevpMDDwQDdBHSBgMMjh3Wg3",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6918.08",
            "totalSupply": "999866788030774",
            "totalSupplyFormatted": "999866788.030774",
            "links": {
                "reddit": "https://www.reddit.com",
                "website": "https://www.pushcatsolana.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/28gBfdqoTdbVJnmqZK4hg9rZ7RGJk4Ru37VrbA15pump"
            },
            "description": null
        }
    },
    "pyrate": {
        "contract_address": "5odbSFH3kKHFNcy6Kai7ykm7Da9B55Kk9wgy4Fh8GSfh",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5odbSFH3kKHFNcy6Kai7ykm7Da9B55Kk9wgy4Fh8GSfh",
            "standard": "metaplex",
            "name": "PYRATE",
            "symbol": "PYRATE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5odbSFH3kKHFNcy6Kai7ykm7Da9B55Kk9wgy4Fh8GSfh",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/Wg2EbKAOwwI6NsQKXLrn",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "363294.91",
            "totalSupply": "986965018759686356",
            "totalSupplyFormatted": "986965018.759686356",
            "links": {
                "discord": "https://discord.gg/cuT6AKtjqu",
                "telegram": "https://t.me/pyratefun",
                "twitter": "https://twitter.com/pyratefun",
                "website": "https://pyrate.fun",
                "moralis": "https://moralis.com/chain/solana/token/price/5odbSFH3kKHFNcy6Kai7ykm7Da9B55Kk9wgy4Fh8GSfh"
            },
            "description": null
        }
    },
    "pythia": {
        "contract_address": "CreiuhfwdWCN5mJbMJtA9bBpYQrQF2tCBuZwSPWfpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CreiuhfwdWCN5mJbMJtA9bBpYQrQF2tCBuZwSPWfpump",
            "standard": "metaplex",
            "name": "PYTHIA",
            "symbol": "PYTHIA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CreiuhfwdWCN5mJbMJtA9bBpYQrQF2tCBuZwSPWfpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmbbj3j9t1b2cZCaHSJHCQ31NQHYzHXDXdHzrXcLWdkCmy",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "12861662.22",
            "totalSupply": "999982135077722",
            "totalSupplyFormatted": "999982135.077722",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/CreiuhfwdWCN5mJbMJtA9bBpYQrQF2tCBuZwSPWfpump"
            },
            "description": null
        }
    },
    "qai": {
        "contract_address": "ERKbvKU1Md4AXNyzWQbagRJWpGE7rwUxGep9ESaxpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ERKbvKU1Md4AXNyzWQbagRJWpGE7rwUxGep9ESaxpump",
            "standard": "metaplex",
            "name": "qAI",
            "symbol": "qAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ERKbvKU1Md4AXNyzWQbagRJWpGE7rwUxGep9ESaxpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbH3sYp5tZAdJHdkpas8G8WydAAAQYrtLHjPSW4V2z3LD",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "273274.88",
            "totalSupply": "999977613722986",
            "totalSupplyFormatted": "999977613.722986",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/ERKbvKU1Md4AXNyzWQbagRJWpGE7rwUxGep9ESaxpump"
            },
            "description": null
        }
    },
    "quain": {
        "contract_address": "4dqYzXnTfNrbwMdJ6uum2FbPC1LkmHtSAbXmh2pfpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4dqYzXnTfNrbwMdJ6uum2FbPC1LkmHtSAbXmh2pfpump",
            "standard": "metaplex",
            "name": "QUAIN",
            "symbol": "QUAIN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4dqYzXnTfNrbwMdJ6uum2FbPC1LkmHtSAbXmh2pfpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmU2X22WAxsUdbDeP6Wnktbr7AsNWUmFNf6sMN3DdpJPc1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "333213.95",
            "totalSupply": "999891821534841",
            "totalSupplyFormatted": "999891821.534841",
            "links": {
                "twitter": "https://twitter.com/quaindotcom",
                "website": "https://quaindot.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/4dqYzXnTfNrbwMdJ6uum2FbPC1LkmHtSAbXmh2pfpump"
            },
            "description": null
        }
    },
    "qubi-tokenized-rwa": {
        "contract_address": "QB1TPvpNUd1GgYeEkdFDDxHx9rjKRfM3VWRzYtkKTwu",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "QB1TPvpNUd1GgYeEkdFDDxHx9rjKRfM3VWRzYtkKTwu",
            "standard": "metaplex",
            "name": "QUBI - Tokenize RWA",
            "symbol": "QBIT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_QB1TPvpNUd1GgYeEkdFDDxHx9rjKRfM3VWRzYtkKTwu",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreie36y4tkxmhokz7n5xu54kosktbfcf5gxhlbti2mheroxb57thgkm.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "QUB1KFtpaAhwHUrqesjTp8Y4Jmy76xCHc2M8MJu9MrZ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "318568.76",
            "totalSupply": "999945897404700503",
            "totalSupplyFormatted": "999945897.404700503",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/qubidao",
                "twitter": "https://twitter.com/Qubi_DAO",
                "website": "https://qubidao.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/QB1TPvpNUd1GgYeEkdFDDxHx9rjKRfM3VWRzYtkKTwu"
            },
            "description": null
        }
    },
    "r-snoofi": {
        "contract_address": "7M9KJcPNC65ShLDmJmTNhVFcuY95Y1VMeYngKgt67D1t",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7M9KJcPNC65ShLDmJmTNhVFcuY95Y1VMeYngKgt67D1t",
            "standard": "metaplex",
            "name": "reddit dog",
            "symbol": "r/snoofi",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7M9KJcPNC65ShLDmJmTNhVFcuY95Y1VMeYngKgt67D1t",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmSGmCLCaxYVYp45NN8FXd3p6je3xSZgQ8R9CWgqwVLwdv",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "314749.93",
            "totalSupply": "999907635910407",
            "totalSupplyFormatted": "999907635.910407",
            "links": {
                "reddit": "https://www.reddit.com/r/snoofi",
                "twitter": "https://twitter.com/snoofi_sol",
                "website": "https://redditdog.org",
                "moralis": "https://moralis.com/chain/solana/token/price/7M9KJcPNC65ShLDmJmTNhVFcuY95Y1VMeYngKgt67D1t"
            },
            "description": null
        }
    },
    "racoondog": {
        "contract_address": "GLkCbVHbzbDZ6MzGq3DyKiiEdAVN2U4JXeWp5rspump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GLkCbVHbzbDZ6MzGq3DyKiiEdAVN2U4JXeWp5rspump",
            "standard": "metaplex",
            "name": "Raccoon Dog",
            "symbol": "RaccoonDog",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GLkCbVHbzbDZ6MzGq3DyKiiEdAVN2U4JXeWp5rspump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQnghAbnpe3GjMapBUpnhdMGKYPNu5Ra6e4Lfhi1dPn88",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "293855.25",
            "totalSupply": "999895367275285",
            "totalSupplyFormatted": "999895367.275285",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/racoondogreal",
                "twitter": "https://twitter.com/RaccoonDogReal",
                "website": "https://raccoondog.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/GLkCbVHbzbDZ6MzGq3DyKiiEdAVN2U4JXeWp5rspump"
            },
            "description": null
        }
    },
    "ramon": {
        "contract_address": "DCMJcu2pqr4k5YGmdGkEPkTjyngT9vaHLKBFSC9jK5Sn",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DCMJcu2pqr4k5YGmdGkEPkTjyngT9vaHLKBFSC9jK5Sn",
            "standard": "metaplex",
            "name": "Ramon",
            "symbol": "RAMON",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DCMJcu2pqr4k5YGmdGkEPkTjyngT9vaHLKBFSC9jK5Sn",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://lime-actual-newt-980.mypinata.cloud/ipfs/bafkreibufa2kp3ndyqgkfx5nylxpnkbm6f2bbkzcwcdu4j4tvnctdddgtq",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "3cm48ufQXZhBwUPtiGdVe3txpEMHPa6cwqG36vbQsj7T",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1821266.40",
            "totalSupply": "999998570197202428",
            "totalSupplyFormatted": "999998570.197202428",
            "links": {
                "telegram": "https://t.me/RamonOnSolana",
                "twitter": "https://x.com/RamonTheMeme",
                "website": "https://www.ramon.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/DCMJcu2pqr4k5YGmdGkEPkTjyngT9vaHLKBFSC9jK5Sn"
            },
            "description": null
        }
    },
    "rat-escape": {
        "contract_address": "3vJenGaGsuKG5shPhi7rjnuy3MV6xjmBTGjYqYzXpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3vJenGaGsuKG5shPhi7rjnuy3MV6xjmBTGjYqYzXpump",
            "standard": "metaplex",
            "name": "RAT Escape",
            "symbol": "RAT",
            "logo": "https://adds-token-info-29a861f.s3.amazonaws.com/solana/3vJenGaGsuKG5shPhi7rjnuy3MV6xjmBTGjYqYzXpump/5ebc6a97-ccdb-410b-a687-b572d5969aa0.png",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmZzgb7xnzkJgQmzxoLNTqSKHkR7wmELQaoEBmLqSLrey2",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "598356.09",
            "totalSupply": "999934970913943",
            "totalSupplyFormatted": "999934970.913943",
            "links": {
                "discord": "https://discord.com/invite/ycc",
                "telegram": "https://t.me/RatEscapePlan",
                "moralis": "https://moralis.com/chain/solana/token/price/3vJenGaGsuKG5shPhi7rjnuy3MV6xjmBTGjYqYzXpump"
            },
            "description": "Escape the Rat Race"
        }
    },
    "rawr": {
        "contract_address": "DEJiPKx5GActUtB6qUssreUxkhXtL4hTQAAJZ7Ccw8se",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DEJiPKx5GActUtB6qUssreUxkhXtL4hTQAAJZ7Ccw8se",
            "standard": "metaplex",
            "name": "Rawr",
            "symbol": "XD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DEJiPKx5GActUtB6qUssreUxkhXtL4hTQAAJZ7Ccw8se",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmRqD1p6iEXa2JuzTa1TvCUq5P7VYgVNeU94xvCE1DTpyx",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "263325.51",
            "totalSupply": "981075278876628",
            "totalSupplyFormatted": "981075278.876628",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/DEJiPKx5GActUtB6qUssreUxkhXtL4hTQAAJZ7Ccw8se"
            },
            "description": null
        }
    },
    "raydium": {
        "contract_address": "4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R",
            "standard": "metaplex",
            "name": "Raydium",
            "symbol": "RAY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7nJGERf1LZpjn4uTfcDZLJ6YRtvdSExAB9uK851zT6do",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1215961311.90",
            "totalSupply": "554999133577206",
            "totalSupplyFormatted": "554999133.577206",
            "links": {
                "medium": "https://raydium.medium.com/",
                "telegram": "https://t.me/raydiumprotocol",
                "twitter": "https://twitter.com/raydiumprotocol",
                "website": "https://raydium.io/",
                "discord": "https://discord.gg/raydium",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R"
            },
            "description": null
        }
    },
    "real-world-ai": {
        "contract_address": "G8aVC4nk5oPWzTHp4PDm3kAuixCebv9WRQMD93h9pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "G8aVC4nk5oPWzTHp4PDm3kAuixCebv9WRQMD93h9pump",
            "standard": "metaplex",
            "name": "Real World AI",
            "symbol": "RWA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_G8aVC4nk5oPWzTHp4PDm3kAuixCebv9WRQMD93h9pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRcmen2Ay29rjc99uPZTeBicyzqvARyx8D9af8XLAUWM1",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1625176.42",
            "totalSupply": "964991773809425",
            "totalSupplyFormatted": "964991773.809425",
            "links": {
                "telegram": "https://t.me/tsukionsol",
                "twitter": "https://twitter.com/TheRoaringAI",
                "website": "https://x.com/TheRoaringAI",
                "moralis": "https://moralis.com/chain/solana/token/price/G8aVC4nk5oPWzTHp4PDm3kAuixCebv9WRQMD93h9pump"
            },
            "description": null
        }
    },
    "realis-worlds": {
        "contract_address": "EBGaJP7srpUUN8eRdta1MsojrNtweuHYsdP3P1TRpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EBGaJP7srpUUN8eRdta1MsojrNtweuHYsdP3P1TRpump",
            "standard": "metaplex",
            "name": "Realis Worlds",
            "symbol": "REALIS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EBGaJP7srpUUN8eRdta1MsojrNtweuHYsdP3P1TRpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcM3yAWiRpzE26ZZX7SzUtZbSLMp2AhG2bwkuinsH7SEp",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2848222.10",
            "totalSupply": "998980089342983",
            "totalSupplyFormatted": "998980089.342983",
            "links": {
                "discord": "https://discord.com/invite/realisworlds",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/realisworldschat",
                "twitter": "https://x.com/realisworlds",
                "website": "https://realisworlds.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/EBGaJP7srpUUN8eRdta1MsojrNtweuHYsdP3P1TRpump"
            },
            "description": null
        }
    },
    "rebase-gg-irl": {
        "contract_address": "HEmgGwgn6naqNatkU9ST2wHa4X9HRMmxE7qE8vWuV7L2",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HEmgGwgn6naqNatkU9ST2wHa4X9HRMmxE7qE8vWuV7L2",
            "standard": "metaplex",
            "name": "Rebase (Wormhole)",
            "symbol": "IRL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HEmgGwgn6naqNatkU9ST2wHa4X9HRMmxE7qE8vWuV7L2",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BCD75RNBHrJJpW4dXVagL5mPjzRLnVZq4YirJdjEYMV7",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1245536.75",
            "totalSupply": "1296235101635253",
            "totalSupplyFormatted": "12962351.01635253",
            "links": {
                "discord": "https://discord.com/invite/rebasegg",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/REBASE_gg",
                "twitter": "https://twitter.com/REBASEgg",
                "website": "https://rebase.gg/home",
                "moralis": "https://moralis.com/chain/solana/token/price/HEmgGwgn6naqNatkU9ST2wHa4X9HRMmxE7qE8vWuV7L2"
            },
            "description": null
        }
    },
    "red-siberian-husky": {
        "contract_address": "Acud16jqA9j1Hc83JrHYeiN2BpK8LYYQ1h6FGnYrpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Acud16jqA9j1Hc83JrHYeiN2BpK8LYYQ1h6FGnYrpump",
            "standard": "metaplex",
            "name": "Red Siberian Husky ",
            "symbol": "KOVU",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Acud16jqA9j1Hc83JrHYeiN2BpK8LYYQ1h6FGnYrpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPYkDdj4ZJEtH5SYqQDBjhav6h1JTjdoCGKWsuMSkXv4z",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "574187.41",
            "totalSupply": "999318473541705",
            "totalSupplyFormatted": "999318473.541705",
            "links": {
                "telegram": "https://t.me/Kovu_CTO",
                "twitter": "https://twitter.com/kovubp",
                "website": "https://www.kovucoin.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/Acud16jqA9j1Hc83JrHYeiN2BpK8LYYQ1h6FGnYrpump"
            },
            "description": null
        }
    },
    "redacted-terminal": {
        "contract_address": "3QGGLYLu251jE9Ra8jkGtuHb773xYciXeqqvUgNTGimE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3QGGLYLu251jE9Ra8jkGtuHb773xYciXeqqvUgNTGimE",
            "standard": "metaplex",
            "name": "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
            "symbol": "\u2588\u2588\u2588",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3QGGLYLu251jE9Ra8jkGtuHb773xYciXeqqvUgNTGimE",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1608005.74",
            "totalSupply": "1099998040776189180",
            "totalSupplyFormatted": "1099998040.77618918",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://x.com/rndterminal",
                "website": "https://redactedterminal.com",
                "moralis": "https://moralis.com/chain/solana/token/price/3QGGLYLu251jE9Ra8jkGtuHb773xYciXeqqvUgNTGimE"
            },
            "description": null
        }
    },
    "redemption-of-pets": {
        "contract_address": "B4f5Tj8h8xSoF9zGHxhL1fLQwvgKWcEFhbTMyVhXJ4ch",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "B4f5Tj8h8xSoF9zGHxhL1fLQwvgKWcEFhbTMyVhXJ4ch",
            "standard": "metaplex",
            "name": "ROP",
            "symbol": "ROP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_B4f5Tj8h8xSoF9zGHxhL1fLQwvgKWcEFhbTMyVhXJ4ch",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmW3xDX5DBrJkWf7ZeRiD3yUvYPjvMRRgb8BW7fjQX3V7A",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7bR7vdnTSVLDmPCf6xDnEPvLiWJr6DB7MsnbZTp6srwR",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "723777.50",
            "totalSupply": "999868983837599",
            "totalSupplyFormatted": "999868.983837599",
            "links": {
                "github": "https://github.com/ROPCOIN",
                "telegram": "https://t.me/Ropmeme",
                "twitter": "https://twitter.com/redemptionpets",
                "website": "https://ropmeme.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/B4f5Tj8h8xSoF9zGHxhL1fLQwvgKWcEFhbTMyVhXJ4ch"
            },
            "description": null
        }
    },
    "regent": {
        "contract_address": "6HgJHzGpq3fSLmkepsaC8F3VtpUWfXcG4hmUaf4Vpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6HgJHzGpq3fSLmkepsaC8F3VtpUWfXcG4hmUaf4Vpump",
            "standard": "metaplex",
            "name": "REGENT of the North Winds",
            "symbol": "REGENT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6HgJHzGpq3fSLmkepsaC8F3VtpUWfXcG4hmUaf4Vpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUma9xF24hAeVtAGCqqGsbzqkfzu4K5NmAihiRYoCfi8T",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "759488.31",
            "totalSupply": "979960896308459",
            "totalSupplyFormatted": "979960896.308459",
            "links": {
                "telegram": "https://t.me/Doc_Regent",
                "twitter": "https://twitter.com/doc_regent",
                "website": "https://regentsol.io",
                "moralis": "https://moralis.com/chain/solana/token/price/6HgJHzGpq3fSLmkepsaC8F3VtpUWfXcG4hmUaf4Vpump"
            },
            "description": null
        }
    },
    "relign": {
        "contract_address": "7AkSKHomPcrJHSgnKFmbrqKARR7PyDk9XoE1PHrtpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7AkSKHomPcrJHSgnKFmbrqKARR7PyDk9XoE1PHrtpump",
            "standard": "metaplex",
            "name": "RELIGN",
            "symbol": "RELIGN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7AkSKHomPcrJHSgnKFmbrqKARR7PyDk9XoE1PHrtpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcE9LXu4FKhHYASurBDKy4gpBXg4w3XGt2aSZQSHYfeDe",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "283812.05",
            "totalSupply": "999979023845957",
            "totalSupplyFormatted": "999979023.845957",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7AkSKHomPcrJHSgnKFmbrqKARR7PyDk9XoE1PHrtpump"
            },
            "description": null
        }
    },
    "renzo-restaked-sol": {
        "contract_address": "ezSoL6fY1PVdJcJsUpe5CM3xkfmy3zoVCABybm5WtiC",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ezSoL6fY1PVdJcJsUpe5CM3xkfmy3zoVCABybm5WtiC",
            "standard": "metaplex",
            "name": "Renzo Restaked SOL",
            "symbol": "ezSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ezSoL6fY1PVdJcJsUpe5CM3xkfmy3zoVCABybm5WtiC",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://hkli223fvzoobboeelg37uezoevbwcjarlmbfru6f4uokznvzpra.arweave.net/OpaNa2WuXOCFxCLNv9CZcSobCSCK2BLGni8o5WW1y-I",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CugziSqZXcUStNPXbtRmq6atsrHqWY2fH2tAhsyApQrV",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": null,
            "totalSupply": "411893084435897",
            "totalSupplyFormatted": "411893.084435897",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/ezSoL6fY1PVdJcJsUpe5CM3xkfmy3zoVCABybm5WtiC"
            },
            "description": null
        }
    },
    "repo-analyzer-ai": {
        "contract_address": "7VuQeZKwthC6LiHb8U8fFNibnasiWKSaP9KQmdNLpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7VuQeZKwthC6LiHb8U8fFNibnasiWKSaP9KQmdNLpump",
            "standard": "metaplex",
            "name": "REPO ANALYZER AI",
            "symbol": "REPOALYZE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7VuQeZKwthC6LiHb8U8fFNibnasiWKSaP9KQmdNLpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmfQY1EybRpKatePuvCRBqwH5F8aHRNmKHBgzbHncgpo6f",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "459845.13",
            "totalSupply": "999921999331437",
            "totalSupplyFormatted": "999921999.331437",
            "links": {
                "telegram": "https://t.me/repoanalyzerai",
                "twitter": "https://twitter.com/repoanalyzer",
                "website": "https://repoanalyzer.site/",
                "moralis": "https://moralis.com/chain/solana/token/price/7VuQeZKwthC6LiHb8U8fFNibnasiWKSaP9KQmdNLpump"
            },
            "description": null
        }
    },
    "repost-dog": {
        "contract_address": "DUp2qMMGuACziKeyZRtH9cuKyqtYpqJ24iZg6tVLpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DUp2qMMGuACziKeyZRtH9cuKyqtYpqJ24iZg6tVLpump",
            "standard": "metaplex",
            "name": "Repost Dog",
            "symbol": "RDOG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DUp2qMMGuACziKeyZRtH9cuKyqtYpqJ24iZg6tVLpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmNQnuf4ubYnkHoKdrkNwSKbtRpYPXhzJYwN5PTizhtvSd",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "25891.30",
            "totalSupply": "999471032399978",
            "totalSupplyFormatted": "999471032.399978",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/repostdog",
                "twitter": "https://twitter.com/RepostTheDog",
                "website": "https://repostdog.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/DUp2qMMGuACziKeyZRtH9cuKyqtYpqJ24iZg6tVLpump"
            },
            "description": null
        }
    },
    "respect-the-pump": {
        "contract_address": "GJMrR56gETPmaUy5of81Psic7grj6TzXmfyZyffqpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GJMrR56gETPmaUy5of81Psic7grj6TzXmfyZyffqpump",
            "standard": "metaplex",
            "name": "Respect the Pump",
            "symbol": "PUMP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GJMrR56gETPmaUy5of81Psic7grj6TzXmfyZyffqpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVtFzPUrPvQPYjFbm8aprwVR3vhfQToW23KQ3wNtcbx6T",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6501.90",
            "totalSupply": "994934808557753",
            "totalSupplyFormatted": "994934808.557753",
            "links": {
                "telegram": "https://t.me/RTPSol",
                "twitter": "https://twitter.com/RTPonSOL",
                "website": "https://www.respectthepump.club",
                "moralis": "https://moralis.com/chain/solana/token/price/GJMrR56gETPmaUy5of81Psic7grj6TzXmfyZyffqpump"
            },
            "description": null
        }
    },
    "retardio": {
        "contract_address": "6ogzHhzdrQr9Pgv6hZ2MNze7UrzBMAFyBBWUYp1Fhitx",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6ogzHhzdrQr9Pgv6hZ2MNze7UrzBMAFyBBWUYp1Fhitx",
            "standard": "metaplex",
            "name": "RETARDIO",
            "symbol": "RETARDIO",
            "logo": "https://adds-token-info-29a861f.s3.eu-central-1.amazonaws.com/marketing/solana/6ogzHhzdrQr9Pgv6hZ2MNze7UrzBMAFyBBWUYp1Fhitx_icon.png",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreif6sugqitckrum7iqpf3bz7lp4dmv4xziw53ltp6jwice7tgzr2sm.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FdyWfsry4w511D4q57KB6i8TNpttFAH5bfPGwXienpMz",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "24699218.77",
            "totalSupply": "999539904658522",
            "totalSupplyFormatted": "999539904.658522",
            "links": {
                "website": "https://www.retardio.xyz/",
                "twitter": "https://x.com/retardiosolana",
                "telegram": "https://t.me/retardiosol",
                "moralis": "https://moralis.com/chain/solana/token/price/6ogzHhzdrQr9Pgv6hZ2MNze7UrzBMAFyBBWUYp1Fhitx"
            },
            "description": "Retardio pulsates as the vibrant heartbeat of an untamed, liberated enclave thriving within the memes of Solana. It serves as the nexus where audacity eclipses convention, transcending mere transactions to embody a collective bound by a cryptic fate. Its genesis shrouded in mystery, whispered into existence by elusive personas cloaked in aliases and encrypted missives. Within this eclectic tapestry, a convergence of trailblazers and insurgents congregates, drawn by the irresistible magnetism of its token's allure, lured by the promise of an odyssey through uncharted realms.\r\nLegends weave tales of its inception, a saga intertwined with the enigmatic threads of destiny. Its trajectory defies conventional wisdom, beckoning all to partake in its enigmatic voyage. Within every individual lies a dormant Retardio essence, awaiting nourishment to ignite the flames of a memetic expedition.\r\nThe project unveils its saga through the release of 4444 NFTs, the Retardio Cousins, meticulously curated within the Solami love chain. Each possession empowers its custodian, fostering a collective momentum towards uncharted horizons."
        }
    },
    "rex-3": {
        "contract_address": "CNKEXXypBC66cZ111Mg3JUxyczXS1E9T6MWEufzQZVMo",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CNKEXXypBC66cZ111Mg3JUxyczXS1E9T6MWEufzQZVMo",
            "standard": "metaplex",
            "name": "REX",
            "symbol": "REX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CNKEXXypBC66cZ111Mg3JUxyczXS1E9T6MWEufzQZVMo",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/QlTNl9SAQKRl3nDSDK2w",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "450098.05",
            "totalSupply": "953874436687954485",
            "totalSupplyFormatted": "953874436.687954485",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/0xNavir",
                "website": "https://navir.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/CNKEXXypBC66cZ111Mg3JUxyczXS1E9T6MWEufzQZVMo"
            },
            "description": null
        }
    },
    "rexbt-by-virtuals": {
        "contract_address": "J7cENeeQs1XUgfruGNTEjXAAa54Rut8VYdDuMmmBvirt",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "J7cENeeQs1XUgfruGNTEjXAAa54Rut8VYdDuMmmBvirt",
            "standard": "metaplex",
            "name": "rexbt by VIRTUALS",
            "symbol": "REXBT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_J7cENeeQs1XUgfruGNTEjXAAa54Rut8VYdDuMmmBvirt",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://vpmodels-prod.s3.ap-southeast-1.amazonaws.com/virtual-20791/virtual-20791.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "92kJ7n7G3JEa7KejBmjDHALfDj7VWoYfi4Apg1CXJAw5",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "986691.39",
            "totalSupply": "999998365545156",
            "totalSupplyFormatted": "999998365.545156",
            "links": {
                "telegram": "https://t.me/REXBT_Entry",
                "twitter": "https://x.com/rexbt_agent",
                "website": "https://rexbt.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/J7cENeeQs1XUgfruGNTEjXAAa54Rut8VYdDuMmmBvirt"
            },
            "description": null
        }
    },
    "rhun-capital": {
        "contract_address": "Gh8yeA9vH5Fun7J6esFH3mV65cQTBpxk9Z5XpzU7pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Gh8yeA9vH5Fun7J6esFH3mV65cQTBpxk9Z5XpzU7pump",
            "standard": "metaplex",
            "name": "Rhun Capital",
            "symbol": "RHUN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Gh8yeA9vH5Fun7J6esFH3mV65cQTBpxk9Z5XpzU7pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qma343FjziBBdHNvfME96cjFLmhYknAJqpBYs9D5J5BYqL",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "280204.37",
            "totalSupply": "999962070944063",
            "totalSupplyFormatted": "999962070.944063",
            "links": {
                "github": "https://github.com/Rhun-Capital",
                "twitter": "https://twitter.com/rhuncapital",
                "website": "https://rhun.io",
                "moralis": "https://moralis.com/chain/solana/token/price/Gh8yeA9vH5Fun7J6esFH3mV65cQTBpxk9Z5XpzU7pump"
            },
            "description": null
        }
    },
    "ribbit-2": {
        "contract_address": "65nTNuJGHme4PQvKQyJykKp1bJAkK4A8Q66sd2yBWugf",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "65nTNuJGHme4PQvKQyJykKp1bJAkK4A8Q66sd2yBWugf",
            "standard": "metaplex",
            "name": "RIBBIT",
            "symbol": "RBT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_65nTNuJGHme4PQvKQyJykKp1bJAkK4A8Q66sd2yBWugf",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreid7nltwt5s4t5hy3uvxerqyp7xjumkjab3yxty2t2mfcwdwztrtp4.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "41FZk8pnCd5bA3z3ntQyNaa9myHG1BmgBHK2sMKrTeMY",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1046370.60",
            "totalSupply": "407148094714940429",
            "totalSupplyFormatted": "407148094714.940429",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/ribbitportal",
                "twitter": "https://twitter.com/RibbitOnSolana",
                "website": "https://ribbitonsolana.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/65nTNuJGHme4PQvKQyJykKp1bJAkK4A8Q66sd2yBWugf"
            },
            "description": null
        }
    },
    "rick-the-npc": {
        "contract_address": "9ncLaQhTpKCyq542mH5fWeW6cL5BNmiCsToCcJyVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9ncLaQhTpKCyq542mH5fWeW6cL5BNmiCsToCcJyVpump",
            "standard": "metaplex",
            "name": "Rick the NPC",
            "symbol": "RICK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9ncLaQhTpKCyq542mH5fWeW6cL5BNmiCsToCcJyVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbjrSCKn6bSAoJWuWcemdM8Rj36HTiy8PjHYugJefowuC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "209526.47",
            "totalSupply": "999949756153746",
            "totalSupplyFormatted": "999949756.153746",
            "links": {
                "telegram": "https://t.me/rickthenpc",
                "twitter": "https://twitter.com/rickthenpc",
                "website": "https://rickthenpc.com",
                "moralis": "https://moralis.com/chain/solana/token/price/9ncLaQhTpKCyq542mH5fWeW6cL5BNmiCsToCcJyVpump"
            },
            "description": null
        }
    },
    "rifampicin": {
        "contract_address": "GJtJuWD9qYcCkrwMBmtY1tpapV1sKfB2zUv9Q4aqpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GJtJuWD9qYcCkrwMBmtY1tpapV1sKfB2zUv9Q4aqpump",
            "standard": "metaplex",
            "name": "Rifampicin",
            "symbol": "$RIF",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GJtJuWD9qYcCkrwMBmtY1tpapV1sKfB2zUv9Q4aqpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmR4HA88PEZZvo53rfy1iYWGaotR1DUW7WHdbAWeM78Szi",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3127700.25",
            "totalSupply": "999640519133781",
            "totalSupplyFormatted": "999640519.133781",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/GJtJuWD9qYcCkrwMBmtY1tpapV1sKfB2zUv9Q4aqpump"
            },
            "description": null
        }
    },
    "rift-ai": {
        "contract_address": "jUpa2aDCzvdR9EF4fqDXmuyMUkonPTohphABLmRkRFj",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "jUpa2aDCzvdR9EF4fqDXmuyMUkonPTohphABLmRkRFj",
            "standard": "metaplex",
            "name": "RIFT AI",
            "symbol": "RIFT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_jUpa2aDCzvdR9EF4fqDXmuyMUkonPTohphABLmRkRFj",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/4DKJ82t6MPAh4fQpeTabtRTmzCmJPpgBHGhwnfzdGgdc",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "EFuKis2ogrf5B8BbrsBxP8y6KyUrN3GKGVVFX2Koxdso",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "15160410.04",
            "totalSupply": "999998749175633",
            "totalSupplyFormatted": "999998749.175633",
            "links": {
                "email": "hiss@fchain.xyz",
                "discord": "https://discord.gg/faraway",
                "twitter": "https://x.com/fchainxyz",
                "website": "https://rift.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/jUpa2aDCzvdR9EF4fqDXmuyMUkonPTohphABLmRkRFj"
            },
            "description": null
        }
    },
    "rizzmas": {
        "contract_address": "85cQsFgbi8mBZxiPppbpPXuV7j1hA8tBwhjF4gKW6mHg",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "85cQsFgbi8mBZxiPppbpPXuV7j1hA8tBwhjF4gKW6mHg",
            "standard": "metaplex",
            "name": "Rizzmas",
            "symbol": "Rizzmas",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_85cQsFgbi8mBZxiPppbpPXuV7j1hA8tBwhjF4gKW6mHg",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/FAbpNG_kOipL3HxN27BOnU0v5gmZsr-k-FADCRpJtc0",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "72x3Eo99X44zweqUZNFJh9NzXPL462dxK1WbiE8ZJ8CS",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "684958.06",
            "totalSupply": "496706355841299234",
            "totalSupplyFormatted": "496706355841.299234",
            "links": {
                "discord": "https://discord.gg/rizzmascto",
                "telegram": "https://t.me/rizzmasportal",
                "twitter": "https://x.com/rizzmascto",
                "website": "https://rizzmas.lol/",
                "moralis": "https://moralis.com/chain/solana/token/price/85cQsFgbi8mBZxiPppbpPXuV7j1hA8tBwhjF4gKW6mHg"
            },
            "description": null
        }
    },
    "rkey": {
        "contract_address": "F4YXmo8CDLRvWGnXyxVZ62wwc7oWcBam7tu4G5kGSaKZ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F4YXmo8CDLRvWGnXyxVZ62wwc7oWcBam7tu4G5kGSaKZ",
            "standard": "metaplex",
            "name": "RKEY",
            "symbol": "RKEY",
            "logo": null,
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreifauk3gt4hoeclwx6x2vaxvkdrjpr2k2jwe42p5qarwujtlz2aliu.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "3qD4CcTSXFMJFkXX1qosGLRcuyVf9no4YQ4aym68jT7n",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": null,
            "totalSupply": "999947219173900",
            "totalSupplyFormatted": "999947219.1739",
            "links": null,
            "description": null
        }
    },
    "rnt-token": {
        "contract_address": "2fUFhZyd47Mapv9wcfXh5gnQwFXtqcYu9xAN4THBpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2fUFhZyd47Mapv9wcfXh5gnQwFXtqcYu9xAN4THBpump",
            "standard": "metaplex",
            "name": "REAL NIGGER TATE",
            "symbol": "RNT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2fUFhZyd47Mapv9wcfXh5gnQwFXtqcYu9xAN4THBpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmTrKhYkexYNdjC6g1QRXKPD3i1KzzGRft9iKDy86ZicSS",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2574582.27",
            "totalSupply": "999414333196996",
            "totalSupplyFormatted": "999414333.196996",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/RNitate",
                "moralis": "https://moralis.com/chain/solana/token/price/2fUFhZyd47Mapv9wcfXh5gnQwFXtqcYu9xAN4THBpump"
            },
            "description": null
        }
    },
    "roaland-core": {
        "contract_address": "5tB5D6DGJMxxHYmNkfJNG237x6pZGEwTzGpUUh62yQJ7",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5tB5D6DGJMxxHYmNkfJNG237x6pZGEwTzGpUUh62yQJ7",
            "standard": "metaplex",
            "name": "ROACORE",
            "symbol": "ROA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5tB5D6DGJMxxHYmNkfJNG237x6pZGEwTzGpUUh62yQJ7",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "11316892.07",
            "totalSupply": "949971209085028659",
            "totalSupplyFormatted": "949971209.085028659",
            "links": {
                "discord": "https://discord.gg/NvbmjmU6dK",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/ROALAND_Official",
                "twitter": "https://twitter.com/SOLROALAND",
                "website": "https://www.roaland.foundation/",
                "moralis": "https://moralis.com/chain/solana/token/price/5tB5D6DGJMxxHYmNkfJNG237x6pZGEwTzGpUUh62yQJ7"
            },
            "description": null
        }
    },
    "roaring-kitty-solana": {
        "contract_address": "EKEWAk7hfnwfR8DBb1cTayPPambqyC7pwNiYkaYQKQHp",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EKEWAk7hfnwfR8DBb1cTayPPambqyC7pwNiYkaYQKQHp",
            "standard": "metaplex",
            "name": "Roaring Kitty",
            "symbol": "KITTY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EKEWAk7hfnwfR8DBb1cTayPPambqyC7pwNiYkaYQKQHp",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/-hWYBYyC6FMXxh___ZI2dRighEBKVm2hpFLK8AIQE0E",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "4D5adG5tnbsdKoZUL467mFdNJTRqFxJi2noer652rJzi",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "631377.56",
            "totalSupply": "747219795100990",
            "totalSupplyFormatted": "747219795.10099",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/roaringkittysolana",
                "twitter": "https://twitter.com/RoaringKSol",
                "website": "https://roaringkitty.info/",
                "moralis": "https://moralis.com/chain/solana/token/price/EKEWAk7hfnwfR8DBb1cTayPPambqyC7pwNiYkaYQKQHp"
            },
            "description": null
        }
    },
    "roastmaster9000": {
        "contract_address": "G6haJithfeUgSghVpu1rDPCq2NFiYcJFHNpHEANbpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "G6haJithfeUgSghVpu1rDPCq2NFiYcJFHNpHEANbpump",
            "standard": "metaplex",
            "name": "Roastmaster9000",
            "symbol": "RM9000",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_G6haJithfeUgSghVpu1rDPCq2NFiYcJFHNpHEANbpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdpU9J1oZknHG6kFTi7RRmquUUSkE8kKy1eTqbzUC7bxw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "567593.07",
            "totalSupply": "999971933937351",
            "totalSupplyFormatted": "999971933.937351",
            "links": {
                "telegram": "https://t.me/roastmaster9000",
                "twitter": "https://twitter.com/roastm4ster9000",
                "website": "https://roastmaster9000.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/G6haJithfeUgSghVpu1rDPCq2NFiYcJFHNpHEANbpump"
            },
            "description": null
        }
    },
    "rocky-the-rock": {
        "contract_address": "BVG3BJH4ghUPJT9mCi7JbziNwx3dqRTzgo9x5poGpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BVG3BJH4ghUPJT9mCi7JbziNwx3dqRTzgo9x5poGpump",
            "standard": "metaplex",
            "name": "rocky",
            "symbol": "rocky",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BVG3BJH4ghUPJT9mCi7JbziNwx3dqRTzgo9x5poGpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmX7ecdhuURoWiuohDWkZzTwjnPo7yMUyUgDnALPTuVrTF",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "521896.83",
            "totalSupply": "998022361261378",
            "totalSupplyFormatted": "998022361.261378",
            "links": {
                "instagram": "https://www.instagram.com/rockypetrock/",
                "medium": "https://medium.com/@rockyonsolana/the-pet-rock-and-crypto-4fc70c9e4c71",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/RockyOnSolPortal",
                "tiktok": "https://www.tiktok.com/@rockyonsol",
                "twitter": "https://x.com/RockySolanaCoin",
                "website": "https://www.rockytherock.lol/",
                "moralis": "https://moralis.com/chain/solana/token/price/BVG3BJH4ghUPJT9mCi7JbziNwx3dqRTzgo9x5poGpump"
            },
            "description": null
        }
    },
    "rok": {
        "contract_address": "JAVqtw83AskRh5EC5HDCew8hFbakLrbYSmqgdqvUpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "JAVqtw83AskRh5EC5HDCew8hFbakLrbYSmqgdqvUpump",
            "standard": "metaplex",
            "name": "rok",
            "symbol": "rok",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_JAVqtw83AskRh5EC5HDCew8hFbakLrbYSmqgdqvUpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmV6hcLL3dp9iau4s2ZC2CKhifLkaw4ZiuD7oPuVnwr8n8",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8174.60",
            "totalSupply": "994477467162153",
            "totalSupplyFormatted": "994477467.162153",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+bmzqTyFhQe1iYTNh",
                "twitter": "https://x.com/ROKCTOSOL",
                "website": "https://iamrok.xyz/?i=1",
                "moralis": "https://moralis.com/chain/solana/token/price/JAVqtw83AskRh5EC5HDCew8hFbakLrbYSmqgdqvUpump"
            },
            "description": null
        }
    },
    "rugpull": {
        "contract_address": "HhVM9vHUxbAiRZ9chEecxhF6UdkzveaCG1NC1C3spump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HhVM9vHUxbAiRZ9chEecxhF6UdkzveaCG1NC1C3spump",
            "standard": "metaplex",
            "name": "Brian",
            "symbol": "RUGPULL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HhVM9vHUxbAiRZ9chEecxhF6UdkzveaCG1NC1C3spump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYvZnsJusrfEbjQmqRScoACT9HkkJQHfedBw6ieDJ2pHv",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "944423.47",
            "totalSupply": "998503411411509",
            "totalSupplyFormatted": "998503411.411509",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/RUGPULLofSOL",
                "twitter": "https://x.com/RUGPULLofSOLANA",
                "website": "https://rugpullofsol.com",
                "moralis": "https://moralis.com/chain/solana/token/price/HhVM9vHUxbAiRZ9chEecxhF6UdkzveaCG1NC1C3spump"
            },
            "description": null
        }
    },
    "rush-2": {
        "contract_address": "RUSHazfGVYTM4fvKmeQeTYSg1sk49yaJn3kL3gTcbpF",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "RUSHazfGVYTM4fvKmeQeTYSg1sk49yaJn3kL3gTcbpF",
            "standard": "metaplex",
            "name": "RUSH",
            "symbol": "RUSH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_RUSHazfGVYTM4fvKmeQeTYSg1sk49yaJn3kL3gTcbpF",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/4UhbEsDaFnWFvMYvzx1TFfNaveHG6aCdS-eHV7TzGws",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Rshtgf9oMHPMpKK885hwBvJuEoWLGF2JctEkR3tUByi",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "17497.24",
            "totalSupply": "981062018700145423",
            "totalSupplyFormatted": "981062018.700145423",
            "links": {
                "twitter": "https://twitter.com/solanarush",
                "website": "https://solanarush.com",
                "moralis": "https://moralis.com/chain/solana/token/price/RUSHazfGVYTM4fvKmeQeTYSg1sk49yaJn3kL3gTcbpF"
            },
            "description": null
        }
    },
    "saad-boi": {
        "contract_address": "BC2CWeUZZvZKniqn4MedxFh12jNjSMLke2Hp2puTXutE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BC2CWeUZZvZKniqn4MedxFh12jNjSMLke2Hp2puTXutE",
            "standard": "metaplex",
            "name": "Saad Boi",
            "symbol": "SAAD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BC2CWeUZZvZKniqn4MedxFh12jNjSMLke2Hp2puTXutE",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmaEvfiTRLSs51AJDnQLWQZu5VTubuAG5yGVJYKrXcGTo6",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "332511.26",
            "totalSupply": "999931610418901",
            "totalSupplyFormatted": "999931610.418901",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/BC2CWeUZZvZKniqn4MedxFh12jNjSMLke2Hp2puTXutE"
            },
            "description": null
        }
    },
    "saber": {
        "contract_address": "Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1",
            "standard": "metaplex",
            "name": "Saber Protocol Token",
            "symbol": "SBR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GyktbGXbH9kvxP8RGfWsnFtuRgC7QCQo2WBqpo3ryk7L",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4545540.05",
            "totalSupply": "3206424822989352",
            "totalSupplyFormatted": "3206424822.989352",
            "links": {
                "discord": "https://discord.com/invite/cmVUgRXS53",
                "github": "https://github.com/saberdao/dapp",
                "twitter": "https://twitter.com/The_Saber_DAO",
                "website": "https://saberdao.io/",
                "medium": "https://blog.saberdao.io/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1"
            },
            "description": null
        }
    },
    "sad-hamster": {
        "contract_address": "26KMQVgDUoB6rEfnJ51yAABWWJND8uMtpnQgsHQ64Udr",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "26KMQVgDUoB6rEfnJ51yAABWWJND8uMtpnQgsHQ64Udr",
            "standard": "metaplex",
            "name": "SAD HAMSTER",
            "symbol": "HAMMY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_26KMQVgDUoB6rEfnJ51yAABWWJND8uMtpnQgsHQ64Udr",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/FwgqzyV517HD_Y5sw6V7bnM-GwIgarp8eNvmfHwORNc",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GLfJL1jSPq3v6TjMmSe2LsGQt3P8i7zMiRC9bPWhLb9C",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1336664.58",
            "totalSupply": "999897203726909",
            "totalSupplyFormatted": "999897203.726909",
            "links": {
                "email": "team@sadhamster.io",
                "instagram": "https://www.instagram.com/meme.sadhamster",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/HammyArmy",
                "tiktok": "https://www.tiktok.com/@sadhampstergirl",
                "twitter": "https://x.com/SadHamsterX",
                "website": "https://sadhamster.io",
                "moralis": "https://moralis.com/chain/solana/token/price/26KMQVgDUoB6rEfnJ51yAABWWJND8uMtpnQgsHQ64Udr"
            },
            "description": null
        }
    },
    "sage-universe": {
        "contract_address": "CMe1QWsoDWFUi95GMkk7mCTnnjxBxtnJ3jbrEhQTVWL5",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CMe1QWsoDWFUi95GMkk7mCTnnjxBxtnJ3jbrEhQTVWL5",
            "standard": "metaplex",
            "name": "Sage Universe",
            "symbol": "SAGE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CMe1QWsoDWFUi95GMkk7mCTnnjxBxtnJ3jbrEhQTVWL5",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/y7jgZVkhrH05lPze64G4lUcD-RvhqLMnS4-tY3Ke9Eg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BxV7AN2wekDrkLnwd1y7VWUQbbUJMbTowNYCaMNeP5TR",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "2066076.34",
            "totalSupply": "999962412591529304",
            "totalSupplyFormatted": "999962412.591529304",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/CMe1QWsoDWFUi95GMkk7mCTnnjxBxtnJ3jbrEhQTVWL5"
            },
            "description": null
        }
    },
    "sagittarius": {
        "contract_address": "8x17zMmVjJxqswjX4hNpxVPc7Tr5UabVJF3kv8TKq8Y3",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8x17zMmVjJxqswjX4hNpxVPc7Tr5UabVJF3kv8TKq8Y3",
            "standard": "metaplex",
            "name": "Sagittarius",
            "symbol": "SAGIT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8x17zMmVjJxqswjX4hNpxVPc7Tr5UabVJF3kv8TKq8Y3",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/2X-vwrzjDcApN0FhKJdvjrqE19r0dTbSXu_u5MuD7-o",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DUK1VN3WatYKsVLwRX2JxfJfaKX6bDXvijpPtT28ed13",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "354445.39",
            "totalSupply": "999617537412055",
            "totalSupplyFormatted": "999617537.412055",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8x17zMmVjJxqswjX4hNpxVPc7Tr5UabVJF3kv8TKq8Y3"
            },
            "description": null
        }
    },
    "sallar-2": {
        "contract_address": "GKHgTd6tqvycgG3mqcZraSZDFR32hXhRgo6sZQtudMsC",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GKHgTd6tqvycgG3mqcZraSZDFR32hXhRgo6sZQtudMsC",
            "standard": "metaplex",
            "name": "Sallar",
            "symbol": "ALL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GKHgTd6tqvycgG3mqcZraSZDFR32hXhRgo6sZQtudMsC",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://oib27xefzqkgftbsfh7x5ywfploj3yafasy4l7umda4jm7pkys4q.arweave.net/cgOv3IXMFGLMMin_fuLFetyd4AUEscX-jBg4ln3qxLk",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GKHgTd6tqvycgG3mqcZraSZDFR32hXhRgo6sZQtudMsC",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2766424.46",
            "totalSupply": "260003764649447386",
            "totalSupplyFormatted": "2600037646.49447386",
            "links": {
                "email": "contact@sallar.io",
                "facebook": "https://www.facebook.com/SallarEcosystem",
                "github": "https://github.com/Sallar-Labs/Sallar",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/sallar_all",
                "twitter": "https://x.com/sallar_io",
                "website": "https://sallar.io/",
                "youtube": "https://youtube.com/@sallartoken",
                "moralis": "https://moralis.com/chain/solana/token/price/GKHgTd6tqvycgG3mqcZraSZDFR32hXhRgo6sZQtudMsC"
            },
            "description": null
        }
    },
    "salty": {
        "contract_address": "ENFcR4n3TTSzwDLxuCst3dUq8HvA1czhDB98cj8Ppump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ENFcR4n3TTSzwDLxuCst3dUq8HvA1czhDB98cj8Ppump",
            "standard": "metaplex",
            "name": "Salty",
            "symbol": "SALTY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ENFcR4n3TTSzwDLxuCst3dUq8HvA1czhDB98cj8Ppump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRtbx9XuPPPMaa9UbFZDi7wqGVzgtjPtrua7PHFAj4YHj",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "14717.55",
            "totalSupply": "999426331208902",
            "totalSupplyFormatted": "999426331.208902",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/SaltyPortal",
                "twitter": "https://twitter.com/Salty_on_Sol",
                "website": "https://www.saltysol.lol/",
                "moralis": "https://moralis.com/chain/solana/token/price/ENFcR4n3TTSzwDLxuCst3dUq8HvA1czhDB98cj8Ppump"
            },
            "description": null
        }
    },
    "salvator-mundi": {
        "contract_address": "4BBjpGwLgGmUxtT82YFK9xMhcvyy3zgf3HpxTRip1YoU",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4BBjpGwLgGmUxtT82YFK9xMhcvyy3zgf3HpxTRip1YoU",
            "standard": "metaplex",
            "name": "Salvator Mundi",
            "symbol": "Mundi",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4BBjpGwLgGmUxtT82YFK9xMhcvyy3zgf3HpxTRip1YoU",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/Qmae2K79ki5qf9LgHK4GrgbPVH44gT1Twmk3RLcbr2HGZj",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1211000.81",
            "totalSupply": "999783536809219",
            "totalSupplyFormatted": "999783536.809219",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4BBjpGwLgGmUxtT82YFK9xMhcvyy3zgf3HpxTRip1YoU"
            },
            "description": null
        }
    },
    "samoyedcoin": {
        "contract_address": "7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
            "standard": "metaplex",
            "name": "Samoyed Coin",
            "symbol": "SAMO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AqH29mZfQFgRpfwaPoTMWSKJ5kqauoc1FwVBRksZyQrt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "17542177.82",
            "totalSupply": "5736492814071964231",
            "totalSupplyFormatted": "5736492814.071964231",
            "links": {
                "discord": "https://discord.com/invite/samofamo",
                "medium": "https://officialsamoyedcoin.medium.com/",
                "reddit": "https://www.reddit.com/r/SamoyedCoin/",
                "telegram": "https://t.me/samoyedcoin",
                "twitter": "https://twitter.com/samoyedcoin",
                "website": "https://samoyedcoin.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU"
            },
            "description": null
        }
    },
    "samurai-cat": {
        "contract_address": "53yANribNp1WzRsciY6upAN2VPY85waZEtADTeJhtQGN",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "53yANribNp1WzRsciY6upAN2VPY85waZEtADTeJhtQGN",
            "standard": "metaplex",
            "name": "Samurai Cat",
            "symbol": "YUKI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_53yANribNp1WzRsciY6upAN2VPY85waZEtADTeJhtQGN",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmQNoowk6cQ1NnFhWMEPt5NkJNauZXeftHcZ99iViqKUaK",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "14419.53",
            "totalSupply": "995892813350235",
            "totalSupplyFormatted": "995892813.350235",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/YukiSamuraiCat",
                "twitter": "https://twitter.com/YukiSamuraiCat",
                "website": "https://www.yukisamuraicat.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/53yANribNp1WzRsciY6upAN2VPY85waZEtADTeJhtQGN"
            },
            "description": null
        }
    },
    "san-chan": {
        "contract_address": "2z1p8xCEjRzpBHjXWrx4tJnz7BFL6z7NnvbCxH7bpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2z1p8xCEjRzpBHjXWrx4tJnz7BFL6z7NnvbCxH7bpump",
            "standard": "metaplex",
            "name": "San Chan",
            "symbol": "San",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2z1p8xCEjRzpBHjXWrx4tJnz7BFL6z7NnvbCxH7bpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmaWBS53yhphzpiVToxXwYQQxrBzedTKrb9utKF9qtuiRP",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3773110.39",
            "totalSupply": "941971554904639",
            "totalSupplyFormatted": "941971554.904639",
            "links": {
                "email": "sanchancto@mail.com",
                "telegram": "https://t.me/sanchancto",
                "twitter": "https://x.com/SanChanKantaro",
                "website": "http://sanchan.live",
                "moralis": "https://moralis.com/chain/solana/token/price/2z1p8xCEjRzpBHjXWrx4tJnz7BFL6z7NnvbCxH7bpump"
            },
            "description": null
        }
    },
    "sanctum-2": {
        "contract_address": "CLoUDKc4Ane7HeQcPpE3YHnznRxhMimJ4MyaUqyHFzAu",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CLoUDKc4Ane7HeQcPpE3YHnznRxhMimJ4MyaUqyHFzAu",
            "standard": "metaplex",
            "name": "Cloud",
            "symbol": "CLOUD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CLoUDKc4Ane7HeQcPpE3YHnznRxhMimJ4MyaUqyHFzAu",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/l3jy9_p6Joj44FFMgiEyNHHeYfVBkeKSTcn5R1VMs3Q",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "47SND7bGKvNXrqfP1bjsLCbwTgZhFBzAgmZ42QSkRScz",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "66760703.55",
            "totalSupply": "999997087390182805",
            "totalSupplyFormatted": "999997087.390182805",
            "links": {
                "reddit": "https://www.reddit.com",
                "website": "https://www.sanctum.so/",
                "moralis": "https://moralis.com/chain/solana/token/price/CLoUDKc4Ane7HeQcPpE3YHnznRxhMimJ4MyaUqyHFzAu"
            },
            "description": null
        }
    },
    "sandy-codex": {
        "contract_address": "61yG5LCoeoqzBdopXPy6BsVPTGdRXht95L68hj5ipump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "61yG5LCoeoqzBdopXPy6BsVPTGdRXht95L68hj5ipump",
            "standard": "metaplex",
            "name": "Sandy Codex",
            "symbol": "SANDY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_61yG5LCoeoqzBdopXPy6BsVPTGdRXht95L68hj5ipump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmerxZhzZ8AGN4UiTmRE6oESNcfNRxGJ3S2Xd5sp9LjV53",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "703092.25",
            "totalSupply": "831718325611261",
            "totalSupplyFormatted": "831718325.611261",
            "links": {
                "email": "sandwatchai@gmail.com",
                "telegram": "https://t.me/sandycodex",
                "twitter": "https://x.com/codexsandy",
                "website": "https://www.sandycodex.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/61yG5LCoeoqzBdopXPy6BsVPTGdRXht95L68hj5ipump"
            },
            "description": null
        }
    },
    "santawifhat": {
        "contract_address": "J8uZpXLyrmaPawRFdu81byzRSLqnurTvhQ9nd2ZLVQvE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "J8uZpXLyrmaPawRFdu81byzRSLqnurTvhQ9nd2ZLVQvE",
            "standard": "metaplex",
            "name": "santawifhat",
            "symbol": "SANTA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_J8uZpXLyrmaPawRFdu81byzRSLqnurTvhQ9nd2ZLVQvE",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/zEFHIZDTgny66MK5tnL5YfLRXKd3KeotOW_n5iaaUdE",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "67V2mwgXjNjYxzEuJqPmpvw75CrXigRhwMr7spGMQdAz",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "39203.42",
            "totalSupply": "998507926808738879",
            "totalSupplyFormatted": "998507926.808738879",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/J8uZpXLyrmaPawRFdu81byzRSLqnurTvhQ9nd2ZLVQvE"
            },
            "description": null
        }
    },
    "sbrsol": {
        "contract_address": "2HHgCLfKA5Rd1Fn9xAxfYzS3XoR5NnuxKDYz2EmWpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2HHgCLfKA5Rd1Fn9xAxfYzS3XoR5NnuxKDYz2EmWpump",
            "standard": "metaplex",
            "name": "Strategic Bitcoin Reserve",
            "symbol": "SBR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2HHgCLfKA5Rd1Fn9xAxfYzS3XoR5NnuxKDYz2EmWpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSuSS8WBgGGYv26KJDPHNVW1Yfnoo8AyuBuBF1BMJu3rC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1273911.95",
            "totalSupply": "999920686311464",
            "totalSupplyFormatted": "999920686.311464",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/2HHgCLfKA5Rd1Fn9xAxfYzS3XoR5NnuxKDYz2EmWpump"
            },
            "description": null
        }
    },
    "scan-meme": {
        "contract_address": "3XktN2eZiv5g62qSQ3bbTjTefSxrPjde4PyKDtcRpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3XktN2eZiv5g62qSQ3bbTjTefSxrPjde4PyKDtcRpump",
            "standard": "metaplex",
            "name": "scan meme",
            "symbol": "SCAN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3XktN2eZiv5g62qSQ3bbTjTefSxrPjde4PyKDtcRpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmeiLvX2DNEFceDZBsxfqYHh6FeVjCHnkKNxnyMj6QCSdG",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "94040.63",
            "totalSupply": "999932233238543",
            "totalSupplyFormatted": "999932233.238543",
            "links": {
                "telegram": "https://t.me/scantelegram",
                "twitter": "https://twitter.com/scanmemes",
                "website": "https://scanmemes.net/",
                "moralis": "https://moralis.com/chain/solana/token/price/3XktN2eZiv5g62qSQ3bbTjTefSxrPjde4PyKDtcRpump"
            },
            "description": null
        }
    },
    "schizo-terminal": {
        "contract_address": "H1NPJkh3KUJGbpjkyQD5qG1nrpFW7tHiqek5SAbMpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "H1NPJkh3KUJGbpjkyQD5qG1nrpFW7tHiqek5SAbMpump",
            "standard": "metaplex",
            "name": "Schizo Terminal",
            "symbol": "SCHIZO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_H1NPJkh3KUJGbpjkyQD5qG1nrpFW7tHiqek5SAbMpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSUhHG6e5scmQSocAFgtCnBq2XXkZCM5t8LABc8k5HdPP",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4509523.77",
            "totalSupply": "999984647281691",
            "totalSupplyFormatted": "999984647.281691",
            "links": {
                "telegram": "https://t.me/schizoterminalsol",
                "twitter": "https://twitter.com/SchizoTerminal",
                "website": "https://www.schizoterminal.com",
                "moralis": "https://moralis.com/chain/solana/token/price/H1NPJkh3KUJGbpjkyQD5qG1nrpFW7tHiqek5SAbMpump"
            },
            "description": null
        }
    },
    "sci-hub": {
        "contract_address": "GxdTh6udNstGmLLk9ztBb6bkrms7oLbrJp5yzUaVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GxdTh6udNstGmLLk9ztBb6bkrms7oLbrJp5yzUaVpump",
            "standard": "metaplex",
            "name": "sci-hub",
            "symbol": "scihub",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GxdTh6udNstGmLLk9ztBb6bkrms7oLbrJp5yzUaVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTD2p1f1PZy4CNDoLDdodHdZpLgDh7jfny5Wb13qWP5Dw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3094513.90",
            "totalSupply": "999984779067617",
            "totalSupplyFormatted": "999984779.067617",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/WTFDeSci",
                "twitter": "https://twitter.com/SciHubFans",
                "website": "https://www.scihub.fans/",
                "moralis": "https://moralis.com/chain/solana/token/price/GxdTh6udNstGmLLk9ztBb6bkrms7oLbrJp5yzUaVpump"
            },
            "description": null
        }
    },
    "scorpio": {
        "contract_address": "J4fQTRN13MKpXhVE74t99msKJLbrjegjEgLBnzEv2YH1",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "J4fQTRN13MKpXhVE74t99msKJLbrjegjEgLBnzEv2YH1",
            "standard": "metaplex",
            "name": "Scorpio",
            "symbol": "SCORPIO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_J4fQTRN13MKpXhVE74t99msKJLbrjegjEgLBnzEv2YH1",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/e9DFJE4KT5jImDBSrmjoc7kwSrUFcXy9kMa-bk3Quho",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DUK1VN3WatYKsVLwRX2JxfJfaKX6bDXvijpPtT28ed13",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "399807.46",
            "totalSupply": "999998656833100",
            "totalSupplyFormatted": "999998656.8331",
            "links": {
                "telegram": "https://t.me/astrofoliosol",
                "twitter": "https://twitter.com/astrofoliosol",
                "website": "https://astrofolio.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/J4fQTRN13MKpXhVE74t99msKJLbrjegjEgLBnzEv2YH1"
            },
            "description": null
        }
    },
    "scoutly-ai": {
        "contract_address": "GLPdQwGtjcynj3RLraenPeR9v1REnpdyuciPBpVipump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GLPdQwGtjcynj3RLraenPeR9v1REnpdyuciPBpVipump",
            "standard": "metaplex",
            "name": "Scoutly AI",
            "symbol": "SCOUT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GLPdQwGtjcynj3RLraenPeR9v1REnpdyuciPBpVipump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmddNtkABQ9FjAbd8AkohzBgvfkWFaRvSiJ1Wy31Cxy8iF",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "306073.43",
            "totalSupply": "985832626269880",
            "totalSupplyFormatted": "985832626.26988",
            "links": {
                "email": "scoutlygg@outlook.com",
                "twitter": "https://x.com/scoutlygg",
                "website": "https://scoutly.gg/",
                "moralis": "https://moralis.com/chain/solana/token/price/GLPdQwGtjcynj3RLraenPeR9v1REnpdyuciPBpVipump"
            },
            "description": null
        }
    },
    "seamania": {
        "contract_address": "9n7PCZLVMG9sEViRwz2cmaR4eM72R3ekWuBdEzZppump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9n7PCZLVMG9sEViRwz2cmaR4eM72R3ekWuBdEzZppump",
            "standard": "metaplex",
            "name": "Seamania",
            "symbol": "SEAMANIA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9n7PCZLVMG9sEViRwz2cmaR4eM72R3ekWuBdEzZppump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcrqfB5r9UCfdE6qKtkksTW4sWpRwJHC8Ksy28H2P6ENk",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2804890.29",
            "totalSupply": "999739910110694",
            "totalSupplyFormatted": "999739910.110694",
            "links": {
                "twitter": "https://twitter.com/seamania1999",
                "website": "https://seamaniaprotocol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/9n7PCZLVMG9sEViRwz2cmaR4eM72R3ekWuBdEzZppump"
            },
            "description": null
        }
    },
    "selfiedogcoin": {
        "contract_address": "9WPTUkh8fKuCnepRWoPYLH3aK9gSjPHFDenBq2X1Czdp",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9WPTUkh8fKuCnepRWoPYLH3aK9gSjPHFDenBq2X1Czdp",
            "standard": "metaplex",
            "name": "SelfieDogCoin",
            "symbol": "SELFIE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9WPTUkh8fKuCnepRWoPYLH3aK9gSjPHFDenBq2X1Czdp",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmcXHa7ctRKkMvWM3EDjJtNWudfqJXYbWA84geTQWYua84",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2336502.65",
            "totalSupply": "999740128958584",
            "totalSupplyFormatted": "999740128.958584",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/selfiedog_sol",
                "twitter": "https://twitter.com/SelfieDog_SOL",
                "website": "https://www.selfiedog.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/9WPTUkh8fKuCnepRWoPYLH3aK9gSjPHFDenBq2X1Czdp"
            },
            "description": null
        }
    },
    "send-2": {
        "contract_address": "SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa",
            "standard": "metaplex",
            "name": "Send",
            "symbol": "SEND",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/ZH_RvxiMLqERih2YP-XoCE7nKZw2XccFOzznqfGV8VE",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "JinEQVgxEpsuumtpUf7kjozNPTQWxXmgpuaK2UgegFV",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "14440131.80",
            "totalSupply": "999610598467624",
            "totalSupplyFormatted": "999610598.467624",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa"
            },
            "description": null
        }
    },
    "sensus": {
        "contract_address": "F8tDt7QRAYicWQPK5LTh8kZR4zKJPdTiEq5dwCcVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F8tDt7QRAYicWQPK5LTh8kZR4zKJPdTiEq5dwCcVpump",
            "standard": "metaplex",
            "name": "Sensus",
            "symbol": "SENSUS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_F8tDt7QRAYicWQPK5LTh8kZR4zKJPdTiEq5dwCcVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTQWofwgizrweVGvZL4QkkvMGhUXZDDtracQcUNKX2T6S",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1288542.79",
            "totalSupply": "943947976917738",
            "totalSupplyFormatted": "943947976.917738",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/F8tDt7QRAYicWQPK5LTh8kZR4zKJPdTiEq5dwCcVpump"
            },
            "description": null
        }
    },
    "shakey-ai": {
        "contract_address": "7f9USKiLfbksTfNt6yrF2z6bxNDQ4FRKni8rSEd4pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7f9USKiLfbksTfNt6yrF2z6bxNDQ4FRKni8rSEd4pump",
            "standard": "metaplex",
            "name": "Shakey AI",
            "symbol": "Shakey",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7f9USKiLfbksTfNt6yrF2z6bxNDQ4FRKni8rSEd4pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQb57DBAYkCYACqX6botDZWjjpjs5TaYAZPQXzcnEvXgY",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "477958.38",
            "totalSupply": "994950661832910",
            "totalSupplyFormatted": "994950661.83291",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7f9USKiLfbksTfNt6yrF2z6bxNDQ4FRKni8rSEd4pump"
            },
            "description": null
        }
    },
    "sharpei": {
        "contract_address": "9jZgvgS2bWtQiYzv48GcWzY4tnkeRSANbTm8Kp1LmSyS",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9jZgvgS2bWtQiYzv48GcWzY4tnkeRSANbTm8Kp1LmSyS",
            "standard": "metaplex",
            "name": "SHARPEI",
            "symbol": "SHAR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9jZgvgS2bWtQiYzv48GcWzY4tnkeRSANbTm8Kp1LmSyS",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/PlN6KrcnjkZylajxpxxCu474Ps3r6UNvWTqpGgyxH2g",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "27q5ksZPejmyLf8yosxwCiiqXxYrqzfGNpPvbaWBAyYm",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "496983.17",
            "totalSupply": "899927508119314",
            "totalSupplyFormatted": "899927508.119314",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/9jZgvgS2bWtQiYzv48GcWzY4tnkeRSANbTm8Kp1LmSyS"
            },
            "description": null
        }
    },
    "she-rises": {
        "contract_address": "4TwC4AiF1uUSHES2eBftGqemp6TqjEnKghqiH6dFpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4TwC4AiF1uUSHES2eBftGqemp6TqjEnKghqiH6dFpump",
            "standard": "metaplex",
            "name": "She Rises",
            "symbol": "AKA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4TwC4AiF1uUSHES2eBftGqemp6TqjEnKghqiH6dFpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmewDN8SjoCMKf1rFLovpWeNouV2KUTFpMnZd56FLzwP4X",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2294728.39",
            "totalSupply": "999989274230032",
            "totalSupplyFormatted": "999989274.230032",
            "links": {
                "telegram": "https://t.me/AkashaAIOfficial",
                "twitter": "https://twitter.com/Akasha_Rising",
                "website": "https://akasha.bloomverse.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/4TwC4AiF1uUSHES2eBftGqemp6TqjEnKghqiH6dFpump"
            },
            "description": null
        }
    },
    "sheeshin-on-solana": {
        "contract_address": "ShEEsukacNfbBpULD1xtCZKjeMMzvc78xufMDuE3jvB",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ShEEsukacNfbBpULD1xtCZKjeMMzvc78xufMDuE3jvB",
            "standard": "metaplex",
            "name": "SheeshSPL",
            "symbol": "SHEESH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ShEEsukacNfbBpULD1xtCZKjeMMzvc78xufMDuE3jvB",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/58GpA71vJ04qOInTiAJ5CF_IjrPj9ucBjNLdkdWkQH8",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "shEEZtHstFN2Qmu18JeiGNQSwjDuSE3M9VNWNSeSVQn",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "66728.02",
            "totalSupply": "4197760895189",
            "totalSupplyFormatted": "4197760.895189",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/ShEEsukacNfbBpULD1xtCZKjeMMzvc78xufMDuE3jvB"
            },
            "description": null
        }
    },
    "shiba-wing": {
        "contract_address": "3UYS3XXYC9yWvNyBWFKqqb5w9YQfX65RQzoAKd8jEUCB",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3UYS3XXYC9yWvNyBWFKqqb5w9YQfX65RQzoAKd8jEUCB",
            "standard": "metaplex",
            "name": "Shiba $Wing",
            "symbol": "WING",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3UYS3XXYC9yWvNyBWFKqqb5w9YQfX65RQzoAKd8jEUCB",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmct7VrkYEkTpgMGpqHKh39NMqA7Quajtkxk7tS8fU89W9",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DYwhafcqj3CaUXCs1kJKLTSQpNYSUbpTTpWw2nc95MCk",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1737819.14",
            "totalSupply": "888884583399896",
            "totalSupplyFormatted": "888884583.399896",
            "links": {
                "discord": "https://discord.com/invite/n7PsBxwwpk",
                "instagram": "https://www.instagram.com/shibawingtoken/",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/ShibaWingPortal",
                "twitter": "https://x.com/tokenshibawing",
                "website": "https://www.shibawing.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/3UYS3XXYC9yWvNyBWFKqqb5w9YQfX65RQzoAKd8jEUCB"
            },
            "description": null
        }
    },
    "shibwifhatcoin": {
        "contract_address": "F6qoefQq4iCBLoNZ34RjEqHjHkD8vtmoRSdw9Nd55J1k",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F6qoefQq4iCBLoNZ34RjEqHjHkD8vtmoRSdw9Nd55J1k",
            "standard": "metaplex",
            "name": "shibwifhat",
            "symbol": "SHIB",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_F6qoefQq4iCBLoNZ34RjEqHjHkD8vtmoRSdw9Nd55J1k",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreihdssy5uum5n63hhqwmg2phx7jfygggrxwlmljjekgd7d7k3qvtue.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AqGLjehrL1sr5aDMvnQgAu7ALvfmSFajxc2hCWnEjhmb",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "866317.62",
            "totalSupply": "980617399029226334",
            "totalSupplyFormatted": "980617399.029226334",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/Shibwifhat_Dogwifhatkiller",
                "twitter": "https://twitter.com/shibwifcoin",
                "website": "https://shibwifcoin.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/F6qoefQq4iCBLoNZ34RjEqHjHkD8vtmoRSdw9Nd55J1k"
            },
            "description": null
        }
    },
    "shift-ai": {
        "contract_address": "2NUEQdSpFFGhssmT9LFUn67gAucyajmgscT7zsizpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2NUEQdSpFFGhssmT9LFUn67gAucyajmgscT7zsizpump",
            "standard": "metaplex",
            "name": "Shift AI",
            "symbol": "Shift",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2NUEQdSpFFGhssmT9LFUn67gAucyajmgscT7zsizpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTok9rZhq8azEbT6Jd5FhFCwH2xAddd8aGmdGsGBy55tb",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "482624.58",
            "totalSupply": "999976328678162",
            "totalSupplyFormatted": "999976328.678162",
            "links": {
                "telegram": "https://t.me/deployshift",
                "twitter": "https://twitter.com/DeployShift",
                "website": "https://deployshift.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/2NUEQdSpFFGhssmT9LFUn67gAucyajmgscT7zsizpump"
            },
            "description": null
        }
    },
    "shillguy": {
        "contract_address": "4Q7UJpgqrD51Y9DuJjeKuVnEmanJTbqPRGazVsUZpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4Q7UJpgqrD51Y9DuJjeKuVnEmanJTbqPRGazVsUZpump",
            "standard": "metaplex",
            "name": "SHILLGUY",
            "symbol": "SHILL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4Q7UJpgqrD51Y9DuJjeKuVnEmanJTbqPRGazVsUZpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTuKWefGq79ihtsQUuonmJqx8GNnxkwQaC9hMFQ1cyRe4",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "455586.53",
            "totalSupply": "999981411349900",
            "totalSupplyFormatted": "999981411.3499",
            "links": {
                "github": "https://github.com/shillguy/eliza",
                "telegram": "https://t.me/ShillGuyChat",
                "twitter": "https://x.com/SHILLGUY_AI",
                "website": "https://shillguy.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/4Q7UJpgqrD51Y9DuJjeKuVnEmanJTbqPRGazVsUZpump"
            },
            "description": null
        }
    },
    "shoggoth": {
        "contract_address": "H2c31USxu35MDkBrGph8pUDUnmzo2e4Rf4hnvL2Upump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "H2c31USxu35MDkBrGph8pUDUnmzo2e4Rf4hnvL2Upump",
            "standard": "metaplex",
            "name": "Shoggoth",
            "symbol": "Shoggoth",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_H2c31USxu35MDkBrGph8pUDUnmzo2e4Rf4hnvL2Upump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPbd2wAJGCqdoHdr8opzMiKED14qf91dQkSf9m8eBv5r2",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5672660.10",
            "totalSupply": "999995609912018",
            "totalSupplyFormatted": "999995609.912018",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/shoggothcoin",
                "twitter": "https://twitter.com/Shoggoth_SOL",
                "website": "https://shoggoth.monster/",
                "moralis": "https://moralis.com/chain/solana/token/price/H2c31USxu35MDkBrGph8pUDUnmzo2e4Rf4hnvL2Upump"
            },
            "description": null
        }
    },
    "shroom": {
        "contract_address": "xyzR4s6H724bUq6q7MTqWxUnhi8LM5fiKKUq38h8M1P",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "xyzR4s6H724bUq6q7MTqWxUnhi8LM5fiKKUq38h8M1P",
            "standard": "metaplex",
            "name": "Shroom",
            "symbol": "SHROOM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_xyzR4s6H724bUq6q7MTqWxUnhi8LM5fiKKUq38h8M1P",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreiermdsd2wzaokzinkazbu4xxs2fqgjlldo3ojsqwyzp2gaaqe4usm.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "ddP8PmysBG7u9GL2JJfASDxXD6k9eGYohymV4mxcFfn",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "381238.11",
            "totalSupply": "1420563750197907706",
            "totalSupplyFormatted": "1420563750.197907706",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/shroomatesportal",
                "twitter": "https://twitter.com/trippylabs",
                "website": "https://www.shroomates.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/xyzR4s6H724bUq6q7MTqWxUnhi8LM5fiKKUq38h8M1P"
            },
            "description": null
        }
    },
    "shytoshi-kusama": {
        "contract_address": "7d1vpt5eri79nETcL74Punhp3mGkeBgUkMdPWep6pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7d1vpt5eri79nETcL74Punhp3mGkeBgUkMdPWep6pump",
            "standard": "metaplex",
            "name": "Shytoshi Kusama",
            "symbol": "SHY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7d1vpt5eri79nETcL74Punhp3mGkeBgUkMdPWep6pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbEC164nPQWrifc3Zi9WP9rTS4fiC9KFUy5YLzEYmyKqR",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1219600.11",
            "totalSupply": "499971346763875",
            "totalSupplyFormatted": "499971346.763875",
            "links": {
                "telegram": "https://t.me/shytoshisol",
                "twitter": "https://x.com/shyonsolana",
                "website": "https://shycoincto.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/7d1vpt5eri79nETcL74Punhp3mGkeBgUkMdPWep6pump"
            },
            "description": null
        }
    },
    "siaprime-coin": {
        "contract_address": "5sMyPtYRcrEVt27DW3xhGVVha3zCXLv4caVt88PXjBgV",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5sMyPtYRcrEVt27DW3xhGVVha3zCXLv4caVt88PXjBgV",
            "standard": "metaplex",
            "name": "SCP",
            "symbol": "SCP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5sMyPtYRcrEVt27DW3xhGVVha3zCXLv4caVt88PXjBgV",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://scpri.me/files/scp.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FSGyT8FcwwCGWXAdNFsvpALahL1h3ui95RjfL1QBPuai",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "371302.74",
            "totalSupply": "9243963510099864",
            "totalSupplyFormatted": "9243963.510099864",
            "links": {
                "discord": "https://discord.gg/scprime",
                "facebook": "https://www.facebook.com/ScPrimeCloud",
                "reddit": "https://www.reddit.com/r/ScPrime/",
                "telegram": "https://t.me/scpcoin",
                "twitter": "https://twitter.com/ScPrimeCloud",
                "website": "https://scpri.me/",
                "moralis": "https://moralis.com/chain/solana/token/price/5sMyPtYRcrEVt27DW3xhGVVha3zCXLv4caVt88PXjBgV"
            },
            "description": null
        }
    },
    "sigma": {
        "contract_address": "5SVG3T9CNQsm2kEwzbRq6hASqh1oGfjqTtLXYUibpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5SVG3T9CNQsm2kEwzbRq6hASqh1oGfjqTtLXYUibpump",
            "standard": "metaplex",
            "name": "SIGMA",
            "symbol": "SIGMA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5SVG3T9CNQsm2kEwzbRq6hASqh1oGfjqTtLXYUibpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmXYf2zZCWSexp6avcRxiSajtSX7iquy7iPJAhDj8e7qG3",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "13538484.22",
            "totalSupply": "899829234285868",
            "totalSupplyFormatted": "899829234.285868",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/SIGMAonsolportal",
                "twitter": "https://twitter.com/sigmaonsol69",
                "website": "https://www.sigmasolana.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/5SVG3T9CNQsm2kEwzbRq6hASqh1oGfjqTtLXYUibpump"
            },
            "description": null
        }
    },
    "silly-dragon": {
        "contract_address": "7EYnhQoR9YM3N7UoaKRoA44Uy8JeaZV3qyouov87awMs",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7EYnhQoR9YM3N7UoaKRoA44Uy8JeaZV3qyouov87awMs",
            "standard": "metaplex",
            "name": "Silly Dragon",
            "symbol": "SILLY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7EYnhQoR9YM3N7UoaKRoA44Uy8JeaZV3qyouov87awMs",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/P8X64pGutyX5eyTpQmqZr3H4_Lqhm0IYxr5SyzFFNek",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "38qZKCqcphT5wDrVNJGHYcuenjEtEFPitvrqvMFQkPu7",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "2496897.24",
            "totalSupply": "999908791069212841",
            "totalSupplyFormatted": "999908791.069212841",
            "links": {
                "email": "token@sillydragon.io",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/SillyDragonSOL",
                "twitter": "https://x.com/SillyDragonSOL/",
                "website": "https://sillydragon.io",
                "moralis": "https://moralis.com/chain/solana/token/price/7EYnhQoR9YM3N7UoaKRoA44Uy8JeaZV3qyouov87awMs"
            },
            "description": null
        }
    },
    "sillynubcat": {
        "contract_address": "GtDZKAqvMZMnti46ZewMiXCa4oXF4bZxwQPoKzXPFxZn",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GtDZKAqvMZMnti46ZewMiXCa4oXF4bZxwQPoKzXPFxZn",
            "standard": "metaplex",
            "name": "nubcat",
            "symbol": "nub",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GtDZKAqvMZMnti46ZewMiXCa4oXF4bZxwQPoKzXPFxZn",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreig36zcmd7bnzc7o5vkfped627hutpfzqint2c7teukevyzlb4biee.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "F5ZHEzFRmC3aXeKtnhJSikvT2f4ddVig8frAWYFcqQfU",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5041654.54",
            "totalSupply": "999962225124589744",
            "totalSupplyFormatted": "999962225.124589744",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://x.com/nubcoin",
                "website": "https://nubcat.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/GtDZKAqvMZMnti46ZewMiXCa4oXF4bZxwQPoKzXPFxZn"
            },
            "description": null
        }
    },
    "simsai": {
        "contract_address": "u6VCRrFvejYX8cTnc1ptZT8UqVGbPXPmE8kvcGnpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "u6VCRrFvejYX8cTnc1ptZT8UqVGbPXPmE8kvcGnpump",
            "standard": "metaplex",
            "name": "SimsAI",
            "symbol": "SIMSAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_u6VCRrFvejYX8cTnc1ptZT8UqVGbPXPmE8kvcGnpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmNYmxz8xCEkqwPKkDV7a1Jgvbn1jXxh1spnbFynVUB3hH",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "694697.14",
            "totalSupply": "999990128098660",
            "totalSupplyFormatted": "999990128.09866",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/u6VCRrFvejYX8cTnc1ptZT8UqVGbPXPmE8kvcGnpump"
            },
            "description": null
        }
    },
    "skibidi-toilet-2": {
        "contract_address": "DPaQfq5sFnoqw2Sh9WMmmASFL9LNu6RdtDqwE1tab2tB",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DPaQfq5sFnoqw2Sh9WMmmASFL9LNu6RdtDqwE1tab2tB",
            "standard": "metaplex",
            "name": "Skibidi Toilet",
            "symbol": "SKBDI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DPaQfq5sFnoqw2Sh9WMmmASFL9LNu6RdtDqwE1tab2tB",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://i.degencdn.com/ipfs/bafkreigdpzp7fwsw5vtunqe6kjiwndqhdeushgfp4dlen55ikofur5bp34",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9AzvaMJnG7vJ98nGbxh9V7pE3tSQsh6cvy8rc21D3yX1",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3295192.99",
            "totalSupply": "74918345233898917",
            "totalSupplyFormatted": "74918345.233898917",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/SkibidiToiletSOL",
                "twitter": "https://x.com/skbditoilet?s=21&t=agrz7AMdORJSvImYTFbRtA",
                "website": "https://www.skbdi.lol/",
                "moralis": "https://moralis.com/chain/solana/token/price/DPaQfq5sFnoqw2Sh9WMmmASFL9LNu6RdtDqwE1tab2tB"
            },
            "description": null
        }
    },
    "slerf": {
        "contract_address": "7BgBvyjrZX1YKz4oh9mjb8ZScatkkwb8DzFx7LoiVkM3",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7BgBvyjrZX1YKz4oh9mjb8ZScatkkwb8DzFx7LoiVkM3",
            "standard": "metaplex",
            "name": "SLERF",
            "symbol": "SLERF",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7BgBvyjrZX1YKz4oh9mjb8ZScatkkwb8DzFx7LoiVkM3",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreidlyzol5fxghgvvqlwstfwygmzswdh74odipkg265fvfygsrqdu6m.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "B2WJdZWZCTA8JHFjprZVEpMgmwU3McHkDmxxqVh8wzkb",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "32908533.48",
            "totalSupply": "499994287006760608",
            "totalSupplyFormatted": "499994287.006760608",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/slerfthesloth",
                "twitter": "https://twitter.com/Slerfsol",
                "website": "https://www.slerf.wtf/",
                "moralis": "https://moralis.com/chain/solana/token/price/7BgBvyjrZX1YKz4oh9mjb8ZScatkkwb8DzFx7LoiVkM3"
            },
            "description": null
        }
    },
    "slopfather": {
        "contract_address": "EWWDzCwq4UYW3ERTXbdgd6X6sdkKHFMJqRz1ZiFcpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EWWDzCwq4UYW3ERTXbdgd6X6sdkKHFMJqRz1ZiFcpump",
            "standard": "metaplex",
            "name": "Slopfather",
            "symbol": "FATHA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EWWDzCwq4UYW3ERTXbdgd6X6sdkKHFMJqRz1ZiFcpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTWbxhNAqZC6HBrMSpPQT1tBt5sQguGXTgxH1X5sUhBBr",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "511575.76",
            "totalSupply": "999958481661658",
            "totalSupplyFormatted": "999958481.661658",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/slopfather",
                "website": "https://slop.club/",
                "moralis": "https://moralis.com/chain/solana/token/price/EWWDzCwq4UYW3ERTXbdgd6X6sdkKHFMJqRz1ZiFcpump"
            },
            "description": null
        }
    },
    "slothana": {
        "contract_address": "HQ7DaoiUxzC2K1Dr7KXRHccNtXvEYgNvoUextXe8dmBh",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HQ7DaoiUxzC2K1Dr7KXRHccNtXvEYgNvoUextXe8dmBh",
            "standard": "metaplex",
            "name": "Slothana",
            "symbol": "SLOTH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HQ7DaoiUxzC2K1Dr7KXRHccNtXvEYgNvoUextXe8dmBh",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://aqua-junior-shark-690.mypinata.cloud/ipfs/QmVpqsVjQqiBLd2qRcNcss3viFNqtNLN3us5MSKh11WU5i",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5KiiiVSuRjxbKJXy81xzFsoDQc9EgirCCR3Tdmgv9nYo",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4588410.48",
            "totalSupply": "1854755289541410",
            "totalSupplyFormatted": "1854755289.54141",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/HQ7DaoiUxzC2K1Dr7KXRHccNtXvEYgNvoUextXe8dmBh"
            },
            "description": null
        }
    },
    "slurp-2": {
        "contract_address": "EPpeesRbnZSpe6nJaWSQNyhqrwyjGJPh4GPrzBvkpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EPpeesRbnZSpe6nJaWSQNyhqrwyjGJPh4GPrzBvkpump",
            "standard": "metaplex",
            "name": "Slurp",
            "symbol": "SLURP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EPpeesRbnZSpe6nJaWSQNyhqrwyjGJPh4GPrzBvkpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXwyM89NZM9aqinVR4jge2e4dgyMAwtjBfaRBM1FC6eeR",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "9416.84",
            "totalSupply": "999452309101429",
            "totalSupplyFormatted": "999452309.101429",
            "links": {
                "telegram": "https://t.me/slurpgate",
                "twitter": "https://twitter.com/SlurpSOLCTO",
                "website": "https://slurp.army/",
                "moralis": "https://moralis.com/chain/solana/token/price/EPpeesRbnZSpe6nJaWSQNyhqrwyjGJPh4GPrzBvkpump"
            },
            "description": null
        }
    },
    "smoking-chicken-fish": {
        "contract_address": "GiG7Hr61RVm4CSUxJmgiCoySFQtdiwxtqf64MsRppump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GiG7Hr61RVm4CSUxJmgiCoySFQtdiwxtqf64MsRppump",
            "standard": "metaplex",
            "name": "Smoking Chicken Fish",
            "symbol": "SCF",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GiG7Hr61RVm4CSUxJmgiCoySFQtdiwxtqf64MsRppump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmQmRUmqcDreK1K2v86zoeUev822diqRZTZbNPWSj5HECD",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5409045.59",
            "totalSupply": "999853339371690",
            "totalSupplyFormatted": "999853339.37169",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/smokingchickenfish",
                "twitter": "https://twitter.com/churchofthescf",
                "website": "https://smokingchickenfish.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/GiG7Hr61RVm4CSUxJmgiCoySFQtdiwxtqf64MsRppump"
            },
            "description": null
        }
    },
    "smol-pep": {
        "contract_address": "Zc4uJVrHC2APe9qKwBD11Gg4BbvQr3naM8f7Wiopump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Zc4uJVrHC2APe9qKwBD11Gg4BbvQr3naM8f7Wiopump",
            "standard": "metaplex",
            "name": "smol pepe ",
            "symbol": "pep ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Zc4uJVrHC2APe9qKwBD11Gg4BbvQr3naM8f7Wiopump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWgxGWkiaYrfKKTypdacBLAg85E7Qzp3RrAQHP5JgmXsL",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2931790.88",
            "totalSupply": "999959029026747",
            "totalSupplyFormatted": "999959029.026747",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Zc4uJVrHC2APe9qKwBD11Gg4BbvQr3naM8f7Wiopump"
            },
            "description": null
        }
    },
    "snake-wif-hat": {
        "contract_address": "5EdKas4QsHaa71QS1X98wiCTgJCCVMjw5GhY5QMKpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5EdKas4QsHaa71QS1X98wiCTgJCCVMjw5GhY5QMKpump",
            "standard": "metaplex",
            "name": "Snake wif Hat",
            "symbol": "SSSSS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5EdKas4QsHaa71QS1X98wiCTgJCCVMjw5GhY5QMKpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdJTza6kQrtt2JcoWBeip8i13hXuXG8oi2GwHQf3A4MLC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "619477.78",
            "totalSupply": "999952828031070",
            "totalSupplyFormatted": "999952828.03107",
            "links": {
                "reddit": "https://www.reddit.com/r/SnakewifHat/",
                "telegram": "https://t.me/portal_to_snakewifhat",
                "twitter": "https://x.com/Snake_wif_Hat",
                "website": "https://snakewifhat.pro/",
                "moralis": "https://moralis.com/chain/solana/token/price/5EdKas4QsHaa71QS1X98wiCTgJCCVMjw5GhY5QMKpump"
            },
            "description": null
        }
    },
    "snap-kero": {
        "contract_address": "4G86CMxGsMdLETrYnavMFKPhQzKTvDBYGMRAdVtr72nu",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4G86CMxGsMdLETrYnavMFKPhQzKTvDBYGMRAdVtr72nu",
            "standard": "metaplex",
            "name": "SNAP",
            "symbol": "$NAP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4G86CMxGsMdLETrYnavMFKPhQzKTvDBYGMRAdVtr72nu",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreifrlkatluvgi4pvb3snkm6ynlmownjie2sxx7tjff3ke7ehqmxwja.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "54fUb7AkNicDfHU8r28BktinY57ZrkG3pJGAjhU4vxW9",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5139601.28",
            "totalSupply": "1642045135955593571",
            "totalSupplyFormatted": "1642045135955.593571",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4G86CMxGsMdLETrYnavMFKPhQzKTvDBYGMRAdVtr72nu"
            },
            "description": null
        }
    },
    "sobull": {
        "contract_address": "27pGA2TokxUaDT3F784TNHEoE93dUmbc2bSewzUZGExw",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "27pGA2TokxUaDT3F784TNHEoE93dUmbc2bSewzUZGExw",
            "standard": "metaplex",
            "name": "SoBULL",
            "symbol": "SoBULL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_27pGA2TokxUaDT3F784TNHEoE93dUmbc2bSewzUZGExw",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/g_RkCQ6Rmgsip-P02ROHOrvD_1SXZsjnRnIzPAzoW6A",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DKXYcXT1TU2qvoJmEVwGwWUETA8AUoLjA8RFKMUdkRxt",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "1860.76",
            "totalSupply": "986619292383343224",
            "totalSupplyFormatted": "986619292.383343224",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/27pGA2TokxUaDT3F784TNHEoE93dUmbc2bSewzUZGExw"
            },
            "description": null
        }
    },
    "sobull-2": {
        "contract_address": "DBNCHKkwHLkP7TSnaqarXqC3tPhxU6ss7G5kBW6yt1zW",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DBNCHKkwHLkP7TSnaqarXqC3tPhxU6ss7G5kBW6yt1zW",
            "standard": "metaplex",
            "name": "SoBULL",
            "symbol": "SoBULL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DBNCHKkwHLkP7TSnaqarXqC3tPhxU6ss7G5kBW6yt1zW",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/7Dq54IYYB_2IicQelvCkLmF00iVm4L8urwTF7Z8h9OI",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8YZbFe1wvUBt9QsMAwfDS7MTsMnjmMpsssT8To6yCrYP",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "320825.22",
            "totalSupply": "999994448781182691",
            "totalSupplyFormatted": "999994448.781182691",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/DBNCHKkwHLkP7TSnaqarXqC3tPhxU6ss7G5kBW6yt1zW"
            },
            "description": null
        }
    },
    "socean-staked-sol": {
        "contract_address": "5oVNBeEEQvYi1cX3ir8Dx5n1P7pdxydbGF2X4TxVusJm",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5oVNBeEEQvYi1cX3ir8Dx5n1P7pdxydbGF2X4TxVusJm",
            "standard": "metaplex",
            "name": "Infinity",
            "symbol": "INF",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5oVNBeEEQvYi1cX3ir8Dx5n1P7pdxydbGF2X4TxVusJm",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreigok7uw2i4ovxzjautejollex65pxj7ta5sf6sn6slvp6m5gdczp4.ipfs.nftstorage.link/",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GRwm4EXMyVwtftQeTft7DZT3HBRxx439PrKq4oM6BwoZ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "100318728.71",
            "totalSupply": "564919109434848",
            "totalSupplyFormatted": "564919.109434848",
            "links": {
                "discord": "https://discord.com/invite/sanctumso",
                "medium": "https://medium.com/@soceanfinance",
                "twitter": "https://twitter.com/sanctumso",
                "website": "https://sanctum.so",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/sanctumso",
                "moralis": "https://moralis.com/chain/solana/token/price/5oVNBeEEQvYi1cX3ir8Dx5n1P7pdxydbGF2X4TxVusJm"
            },
            "description": null
        }
    },
    "sol-bastard": {
        "contract_address": "25p2BoNp6qrJH5As6ek6H7Ei495oSkyZd3tGb97sqFmH",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "25p2BoNp6qrJH5As6ek6H7Ei495oSkyZd3tGb97sqFmH",
            "standard": "metaplex",
            "name": "SolBastard",
            "symbol": "soba",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_25p2BoNp6qrJH5As6ek6H7Ei495oSkyZd3tGb97sqFmH",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmSGbi5QaKTWbwLXAMMEmQ5orcBo6oGCqBWmQoWRuQCyRf",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1153555.55",
            "totalSupply": "895605845406328",
            "totalSupplyFormatted": "895605845.406328",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/SolBastardSOBA",
                "twitter": "https://twitter.com/SolBastardSoba",
                "website": "https://solbastard.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/25p2BoNp6qrJH5As6ek6H7Ei495oSkyZd3tGb97sqFmH"
            },
            "description": null
        }
    },
    "sola-ai": {
        "contract_address": "B5UsiUYcTD3PcQa8r2uXcVgRmDL8jUYuXPiYjrY7pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "B5UsiUYcTD3PcQa8r2uXcVgRmDL8jUYuXPiYjrY7pump",
            "standard": "metaplex",
            "name": "Sola AI",
            "symbol": "SOLA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_B5UsiUYcTD3PcQa8r2uXcVgRmDL8jUYuXPiYjrY7pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRDv4boEWsnye83uzxNZLWsfCLeib2kuc394GNfAtUpBj",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "674128.22",
            "totalSupply": "999954342703012",
            "totalSupplyFormatted": "999954342.703012",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/B5UsiUYcTD3PcQa8r2uXcVgRmDL8jUYuXPiYjrY7pump"
            },
            "description": null
        }
    },
    "solama": {
        "contract_address": "AVLhahDcDQ4m4vHM4ug63oh7xc8Jtk49Dm5hoe9Sazqr",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AVLhahDcDQ4m4vHM4ug63oh7xc8Jtk49Dm5hoe9Sazqr",
            "standard": "metaplex",
            "name": "Solama",
            "symbol": "SOLAMA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AVLhahDcDQ4m4vHM4ug63oh7xc8Jtk49Dm5hoe9Sazqr",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/si5X46UdVsceCEi8-rYAXrd4ABgk-ExBaHUk_k7vNts",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8jdAy26dSB1LYrktfwmcNqhDyMWcJJqkoNv3hDuEJfrb",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2441349.05",
            "totalSupply": "676557718101902",
            "totalSupplyFormatted": "676557718.101902",
            "links": {
                "email": "contact@solama.com",
                "instagram": "https://www.instagram.com/solama_spl/",
                "reddit": "https://www.reddit.com/r/SOLAMA",
                "telegram": "https://t.me/SolamaOfficial",
                "tiktok": "https://www.tiktok.com/@solamaofficial",
                "twitter": "https://twitter.com/SolamaSPL",
                "website": "https://www.solama.com",
                "youtube": "https://www.youtube.com/@SolamaOfficial",
                "moralis": "https://moralis.com/chain/solana/token/price/AVLhahDcDQ4m4vHM4ug63oh7xc8Jtk49Dm5hoe9Sazqr"
            },
            "description": null
        }
    },
    "solana-ecosystem-index": {
        "contract_address": "8JnNWJ46yfdq8sKgT1Lk4G7VWkAA8Rhh7LhqgJ6WY41G",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8JnNWJ46yfdq8sKgT1Lk4G7VWkAA8Rhh7LhqgJ6WY41G",
            "standard": "metaplex",
            "name": "Solana Ecosystem Index",
            "symbol": "SOLI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8JnNWJ46yfdq8sKgT1Lk4G7VWkAA8Rhh7LhqgJ6WY41G",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "266184.67",
            "totalSupply": "50425993204",
            "totalSupplyFormatted": "50425.993204",
            "links": {
                "discord": "https://discord.gg/amun",
                "medium": "https://medium.com/amun-tokens",
                "telegram": "https://t.me/AmunTokens",
                "twitter": "https://twitter.com/Amun",
                "website": "https://amun.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/8JnNWJ46yfdq8sKgT1Lk4G7VWkAA8Rhh7LhqgJ6WY41G"
            },
            "description": null
        }
    },
    "solana-money-glitch": {
        "contract_address": "B9r1YcdKPg6AmTb4RaFJtucjocozVKJ3gpAcRp7PQ6kE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "B9r1YcdKPg6AmTb4RaFJtucjocozVKJ3gpAcRp7PQ6kE",
            "standard": "metaplex",
            "name": "Solana Money Glitch",
            "symbol": "SMG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_B9r1YcdKPg6AmTb4RaFJtucjocozVKJ3gpAcRp7PQ6kE",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://i.degencdn.com/ipfs/bafkreie274bqaureliol2o6gbbnpoqzknpn6yvkfqb6x6dsdklzmxf53au",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "88824.57",
            "totalSupply": "787382018510799",
            "totalSupplyFormatted": "787382018.510799",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/solanamoneyglitch",
                "twitter": "https://x.com/SMGrewards",
                "website": "https://www.solanamoney.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/B9r1YcdKPg6AmTb4RaFJtucjocozVKJ3gpAcRp7PQ6kE"
            },
            "description": null
        }
    },
    "solana-social-explorer": {
        "contract_address": "H4phNbsqjV5rqk8u6FUACTLB6rNZRTAPGnBb8KXJpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "H4phNbsqjV5rqk8u6FUACTLB6rNZRTAPGnBb8KXJpump",
            "standard": "metaplex",
            "name": "Solana Social Explorer",
            "symbol": "SSE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_H4phNbsqjV5rqk8u6FUACTLB6rNZRTAPGnBb8KXJpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbPQm1EHG3CfoAdTSEnxU2mqFauCw3HAMhNhqqMJcrTqW",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "16774785.44",
            "totalSupply": "999979936789628",
            "totalSupplyFormatted": "999979936.789628",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/H4phNbsqjV5rqk8u6FUACTLB6rNZRTAPGnBb8KXJpump"
            },
            "description": null
        }
    },
    "solana-swap": {
        "contract_address": "HDa3zJc12ahykSsBRvgiWzr6WLEByf36yzKKbVvy4gnF",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HDa3zJc12ahykSsBRvgiWzr6WLEByf36yzKKbVvy4gnF",
            "standard": "metaplex",
            "name": "Solana Swap",
            "symbol": "SOS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HDa3zJc12ahykSsBRvgiWzr6WLEByf36yzKKbVvy4gnF",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "186343185.86",
            "totalSupply": "999999999246256",
            "totalSupplyFormatted": "999999999.246256",
            "links": {
                "github": "https://github.com/Solana-Swap",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/SolanaSwap_News",
                "twitter": "https://twitter.com/Swap_Solana",
                "website": "https://solanaswap.co/",
                "moralis": "https://moralis.com/chain/solana/token/price/HDa3zJc12ahykSsBRvgiWzr6WLEByf36yzKKbVvy4gnF"
            },
            "description": null
        }
    },
    "solanacorn": {
        "contract_address": "6DSqVXg9WLTWgz6LACqxN757QdHe1sCqkUfojWmxWtok",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6DSqVXg9WLTWgz6LACqxN757QdHe1sCqkUfojWmxWtok",
            "standard": "metaplex",
            "name": "Solanacorn",
            "symbol": "CORN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6DSqVXg9WLTWgz6LACqxN757QdHe1sCqkUfojWmxWtok",
            "decimals": "7",
            "metaplex": {
                "metadataUri": "https://arweave.net/G7beo5UzlTpl_2xNCvdwWO8r6sOYzpVz7nSaxVPMKjo",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "EPMBBPnfMpbRaQNWXDMQutte9NgnZ5ayhkGzkTFKMA9f",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "351853.93",
            "totalSupply": "6939919688970919394",
            "totalSupplyFormatted": "693991968897.0919394",
            "links": {
                "email": "solanacorn@gmail.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/CORNonSolana",
                "twitter": "https://twitter.com/CornOnSolana",
                "website": "https://www.solanacorn.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/6DSqVXg9WLTWgz6LACqxN757QdHe1sCqkUfojWmxWtok"
            },
            "description": null
        }
    },
    "solanahub-staked-sol": {
        "contract_address": "HUBsveNpjo5pWqNkH57QzxjQASdTVXcSK7bVKTSZtcSX",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HUBsveNpjo5pWqNkH57QzxjQASdTVXcSK7bVKTSZtcSX",
            "standard": "metaplex",
            "name": "SolanaHub staked SOL",
            "symbol": "hubSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HUBsveNpjo5pWqNkH57QzxjQASdTVXcSK7bVKTSZtcSX",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/F155zs_t_NbgDOubpHukUb7BoLWcR2hYVqhE_slbc98",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HUBrNaijTVGwJXML7XinwSCBVLSBJ4WbR4R3XD4q4Pyw",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5162652.14",
            "totalSupply": "34382361062342",
            "totalSupplyFormatted": "34382.361062342",
            "links": {
                "github": "https://github.com/Avaulto/SolanaHub",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/SolanaHubApp",
                "website": "https://www.solanahub.app/",
                "moralis": "https://moralis.com/chain/solana/token/price/HUBsveNpjo5pWqNkH57QzxjQASdTVXcSK7bVKTSZtcSX"
            },
            "description": null
        }
    },
    "solanium": {
        "contract_address": "xxxxa1sKNGwFtw2kFn8XauW9xq8hBZ5kVtcSesTT9fW",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "xxxxa1sKNGwFtw2kFn8XauW9xq8hBZ5kVtcSesTT9fW",
            "standard": "metaplex",
            "name": "Solanium",
            "symbol": "SLIM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_xxxxa1sKNGwFtw2kFn8XauW9xq8hBZ5kVtcSesTT9fW",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AqH29mZfQFgRpfwaPoTMWSKJ5kqauoc1FwVBRksZyQrt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4939427.60",
            "totalSupply": "99995493579633",
            "totalSupplyFormatted": "99995493.579633",
            "links": {
                "github": "https://github.com/solanium-io",
                "medium": "https://medium.com/@solanium",
                "website": "https://www.solanium.io/",
                "telegram": "https://t.me/solanium",
                "twitter": "https://twitter.com/solanium_io",
                "moralis": "https://moralis.com/chain/solana/token/price/xxxxa1sKNGwFtw2kFn8XauW9xq8hBZ5kVtcSesTT9fW"
            },
            "description": null
        }
    },
    "solarba": {
        "contract_address": "6Qd6mmFR84jzg24S3851TWNGeTTFrfPko76UiHyRMDMT",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6Qd6mmFR84jzg24S3851TWNGeTTFrfPko76UiHyRMDMT",
            "standard": "metaplex",
            "name": "SolARBa",
            "symbol": "SOLARBA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6Qd6mmFR84jzg24S3851TWNGeTTFrfPko76UiHyRMDMT",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "574436.09",
            "totalSupply": "336237204169",
            "totalSupplyFormatted": "336237.204169",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/6Qd6mmFR84jzg24S3851TWNGeTTFrfPko76UiHyRMDMT"
            },
            "description": null
        }
    },
    "solaris-ai": {
        "contract_address": "3RfQPYVJgJbwyB3BzqqypCEWWryxjTfFDAcXQsckpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3RfQPYVJgJbwyB3BzqqypCEWWryxjTfFDAcXQsckpump",
            "standard": "metaplex",
            "name": "Solaris AI",
            "symbol": "SOLARIS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3RfQPYVJgJbwyB3BzqqypCEWWryxjTfFDAcXQsckpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmb3gF2rLW2b9z4dLT7PLW3qabGqrfjbhiZptSLU7wJupB",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "703819.57",
            "totalSupply": "999980916453256",
            "totalSupplyFormatted": "999980916.453256",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/Solaris_Portal",
                "twitter": "https://x.com/solarisai_fun",
                "website": "https://www.solarisai.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/3RfQPYVJgJbwyB3BzqqypCEWWryxjTfFDAcXQsckpump"
            },
            "description": null
        }
    },
    "solayer": {
        "contract_address": "LAYER4xPpTCb3QL8S9u41EAhAX7mhBn8Q6xMTwY2Yzc",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "LAYER4xPpTCb3QL8S9u41EAhAX7mhBn8Q6xMTwY2Yzc",
            "standard": "metaplex",
            "name": "Solayer",
            "symbol": "LAYER",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_LAYER4xPpTCb3QL8S9u41EAhAX7mhBn8Q6xMTwY2Yzc",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "314f8t9ASLqzmN8NRVcvqyqaLSTCmrWh4Zd2Swaa6fkA",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "907637621.04",
            "totalSupply": "999999932840218809",
            "totalSupplyFormatted": "999999932.840218809",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/LAYER4xPpTCb3QL8S9u41EAhAX7mhBn8Q6xMTwY2Yzc"
            },
            "description": null
        }
    },
    "solayer-staked-sol": {
        "contract_address": "sSo14endRuUbvQaJS3dq36Q829a3A6BEfoeeRGJywEh",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "sSo14endRuUbvQaJS3dq36Q829a3A6BEfoeeRGJywEh",
            "standard": "metaplex",
            "name": "Solayer SOL",
            "symbol": "sSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_sSo14endRuUbvQaJS3dq36Q829a3A6BEfoeeRGJywEh",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CKJUDVeXTSh2tEaNEkhWTy3P4wyrFKJTXzQCVAziZYiY",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "100068201.15",
            "totalSupply": "684500002180766",
            "totalSupplyFormatted": "684500.002180766",
            "links": {
                "discord": "https://discord.com/invite/solayerlabs",
                "github": "https://github.com/solayer-labs/solayer-improvement-proposal/blob/main/solayer-litepaper-v0.pdf",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/solayer_labs",
                "website": "https://solayer.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/sSo14endRuUbvQaJS3dq36Q829a3A6BEfoeeRGJywEh"
            },
            "description": null
        }
    },
    "solbank": {
        "contract_address": "8twuNzMszqWeFbDErwtf4gw13E6MUS4Hsdx5mi3aqXAM",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8twuNzMszqWeFbDErwtf4gw13E6MUS4Hsdx5mi3aqXAM",
            "standard": "metaplex",
            "name": "Solbank",
            "symbol": "SB",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8twuNzMszqWeFbDErwtf4gw13E6MUS4Hsdx5mi3aqXAM",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/Fz1SPxJx2TrdIb6pbqGCtEKrf1Tmx5ZYNhHSYtm7uog",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AqboyxYWrAxb5jqULDqEdSETWVqVaE1tobs3KcfT62WR",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "140135.22",
            "totalSupply": "1000130062578841476",
            "totalSupplyFormatted": "1000130062.578841476",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/slbnkentryportal",
                "twitter": "https://twitter.com/solbankfinance",
                "website": "https://solbank.finance/",
                "moralis": "https://moralis.com/chain/solana/token/price/8twuNzMszqWeFbDErwtf4gw13E6MUS4Hsdx5mi3aqXAM"
            },
            "description": null
        }
    },
    "solcasino-token": {
        "contract_address": "SCSuPPNUSypLBsV4darsrYNg4ANPgaGhKhsA3GmMyjz",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "SCSuPPNUSypLBsV4darsrYNg4ANPgaGhKhsA3GmMyjz",
            "standard": "metaplex",
            "name": "Solcasino Token",
            "symbol": "SCS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_SCSuPPNUSypLBsV4darsrYNg4ANPgaGhKhsA3GmMyjz",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://arweave.net/lLiNhrAH8C3FCVNjEInT45Hi7z8J9GvVDzHEaCM9IBE",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "HLnKfgULguvHnKHmxbysgKwJ9MAFce7bAhUmPfASfNUg",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "10778738.89",
            "totalSupply": "615801609424347",
            "totalSupplyFormatted": "6158016094.24347",
            "links": {
                "discord": "https://discord.com/solcasinoio",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/solcasinoio",
                "website": "https://solcasino.io",
                "moralis": "https://moralis.com/chain/solana/token/price/SCSuPPNUSypLBsV4darsrYNg4ANPgaGhKhsA3GmMyjz"
            },
            "description": null
        }
    },
    "solchat": {
        "contract_address": "947tEoG318GUmyjVYhraNRvWpMX7fpBTDQFBoJvSkSG3",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "947tEoG318GUmyjVYhraNRvWpMX7fpBTDQFBoJvSkSG3",
            "standard": "metaplex",
            "name": "Solchat",
            "symbol": "CHAT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_947tEoG318GUmyjVYhraNRvWpMX7fpBTDQFBoJvSkSG3",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreifhkd7cjdrc5wu45mtptqkhc3nq2hp6awqt7mttu62g4um3lqyjde.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Akzc1T8qCw5LFmGKZ2ZBZTETcmeiBeTipTXjXeSRSQCi",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "2812897.57",
            "totalSupply": "8992213643619682",
            "totalSupplyFormatted": "8992213.643619682",
            "links": {
                "email": "mail@solchat.io",
                "medium": "https://medium.com/@Solchat",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/SolChatCoin",
                "twitter": "https://x.com/solchatcoin",
                "website": "https://www.solchat.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/947tEoG318GUmyjVYhraNRvWpMX7fpBTDQFBoJvSkSG3"
            },
            "description": null
        }
    },
    "soldoge": {
        "contract_address": "8ymi88q5DtmdNTn2sPRNFkvMkszMHuLJ1e3RVdWjPa3s",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8ymi88q5DtmdNTn2sPRNFkvMkszMHuLJ1e3RVdWjPa3s",
            "standard": "metaplex",
            "name": "SolDoge",
            "symbol": "SDOGE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8ymi88q5DtmdNTn2sPRNFkvMkszMHuLJ1e3RVdWjPa3s",
            "decimals": "0",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AqH29mZfQFgRpfwaPoTMWSKJ5kqauoc1FwVBRksZyQrt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "103453.89",
            "totalSupply": "9950359396",
            "totalSupplyFormatted": "9950359396",
            "links": {
                "discord": "https://discord.gg/pMTFxKtD7q",
                "github": "https://github.com/soldogefrens",
                "reddit": "https://www.reddit.com/r/solanadoge",
                "telegram": "https://t.me/SolanaDoge",
                "website": "https://www.soldoge.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/8ymi88q5DtmdNTn2sPRNFkvMkszMHuLJ1e3RVdWjPa3s"
            },
            "description": null
        }
    },
    "soldragon": {
        "contract_address": "3FG9DAv3CDBEh1CQJhRM9BYe5thUMvP5GmW46524Qahv",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3FG9DAv3CDBEh1CQJhRM9BYe5thUMvP5GmW46524Qahv",
            "standard": "metaplex",
            "name": "SolDragon",
            "symbol": "DRAGON",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3FG9DAv3CDBEh1CQJhRM9BYe5thUMvP5GmW46524Qahv",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/Oy_IS-w77G9oyeKV35zO4jAOAOvCu38Y9kBWEcOJ1B4",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9eiKe8HMUg1LnxMHLfJ1RNvjyxbCzeqL7c9QT2Gev86Q",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "51264.13",
            "totalSupply": "99865059705039514",
            "totalSupplyFormatted": "99865059.705039514",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/3FG9DAv3CDBEh1CQJhRM9BYe5thUMvP5GmW46524Qahv"
            },
            "description": null
        }
    },
    "solend": {
        "contract_address": "SLNDpmoWTVADgEdndyvWzroNL7zSi1dF9PC3xHGtPwp",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "SLNDpmoWTVADgEdndyvWzroNL7zSi1dF9PC3xHGtPwp",
            "standard": "metaplex",
            "name": "Solend",
            "symbol": "SLND",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_SLNDpmoWTVADgEdndyvWzroNL7zSi1dF9PC3xHGtPwp",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "30493785.26",
            "totalSupply": "90522642071127",
            "totalSupplyFormatted": "90522642.071127",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/SLNDpmoWTVADgEdndyvWzroNL7zSi1dF9PC3xHGtPwp"
            },
            "description": null
        }
    },
    "soleng": {
        "contract_address": "2wUGjvMqXusgfzYP3Vj149bSM9MwTPLS4maxkdGfpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2wUGjvMqXusgfzYP3Vj149bSM9MwTPLS4maxkdGfpump",
            "standard": "metaplex",
            "name": "SOLENG",
            "symbol": "SOLENG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2wUGjvMqXusgfzYP3Vj149bSM9MwTPLS4maxkdGfpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXKdj6sv3Q9J7t6ZU4PVubHXgcHwBiDRFkasoQECisfyZ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1473975.38",
            "totalSupply": "999410368036581",
            "totalSupplyFormatted": "999410368.036581",
            "links": {
                "telegram": "https://t.me/+R_ukYifH4KdlNDE0",
                "twitter": "https://twitter.com/soleng_agent",
                "website": "https://www.soleng.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/2wUGjvMqXusgfzYP3Vj149bSM9MwTPLS4maxkdGfpump"
            },
            "description": null
        }
    },
    "solfarm": {
        "contract_address": "TuLipcqtGVXP9XR62wM8WWCm6a9vhLs7T1uoWBk6FDs",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "TuLipcqtGVXP9XR62wM8WWCm6a9vhLs7T1uoWBk6FDs",
            "standard": "metaplex",
            "name": "Tulip",
            "symbol": "TULIP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_TuLipcqtGVXP9XR62wM8WWCm6a9vhLs7T1uoWBk6FDs",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AqH29mZfQFgRpfwaPoTMWSKJ5kqauoc1FwVBRksZyQrt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1536883.79",
            "totalSupply": "9999959586709",
            "totalSupplyFormatted": "9999959.586709",
            "links": {
                "discord": "http://discord.gg/tulipgarden",
                "github": "https://github.com/sol-farm",
                "medium": "https://solfarm.medium.com/",
                "website": "https://tulip.garden",
                "moralis": "https://moralis.com/chain/solana/token/price/TuLipcqtGVXP9XR62wM8WWCm6a9vhLs7T1uoWBk6FDs"
            },
            "description": null
        }
    },
    "solforge-fusion": {
        "contract_address": "BLiUhfaUFbSoMVeRqq3QYTA1eJsTsB3ZDEYtUsGGQ9em",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BLiUhfaUFbSoMVeRqq3QYTA1eJsTsB3ZDEYtUsGGQ9em",
            "standard": "metaplex",
            "name": "SolForge Fusion",
            "symbol": "SFG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BLiUhfaUFbSoMVeRqq3QYTA1eJsTsB3ZDEYtUsGGQ9em",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcsuFuEoQJ5ucxMmg2N9vQ8F1Giphsko7yjCTxBneJhEW",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FomSxLB9GxH9Xrpjf7G1rGVdUSBH2oL3c7q7RLNd9LBm",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "100326138.92",
            "totalSupply": "84432677871701661",
            "totalSupplyFormatted": "84432677.871701661",
            "links": {
                "discord": "https://discord.gg/stoneblade",
                "twitter": "https://twitter.com/SolforgeFusion",
                "website": "https://solforgefusion.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/BLiUhfaUFbSoMVeRqq3QYTA1eJsTsB3ZDEYtUsGGQ9em"
            },
            "description": null
        }
    },
    "solid": {
        "contract_address": "SoLiDMWBct5TurG1LNcocemBK7QmTn4P33GSrRrcd2n",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "SoLiDMWBct5TurG1LNcocemBK7QmTn4P33GSrRrcd2n",
            "standard": "metaplex",
            "name": "Solana ID",
            "symbol": "SOLID",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_SoLiDMWBct5TurG1LNcocemBK7QmTn4P33GSrRrcd2n",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/TOuRksoAvEXfOyI3nZtc_ydHMcaC9qg_im8qon0rCZs",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "SoLiD86HcDLBX9G253X8Hw35VfeBDazq8oBERegRgxR",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8232039.24",
            "totalSupply": "999999422338021377",
            "totalSupplyFormatted": "999999422.338021377",
            "links": {
                "discord": "https://discord.com/invite/solanaid",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/solanaidofficial",
                "twitter": "https://twitter.com/solanaidentity",
                "website": "https://www.solana.id/",
                "moralis": "https://moralis.com/chain/solana/token/price/SoLiDMWBct5TurG1LNcocemBK7QmTn4P33GSrRrcd2n"
            },
            "description": null
        }
    },
    "solmail": {
        "contract_address": "C8cNX2D1y3jqKpMFkQhP1gGbfvTEdeckZXLBKSN5z5KF",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "C8cNX2D1y3jqKpMFkQhP1gGbfvTEdeckZXLBKSN5z5KF",
            "standard": "metaplex",
            "name": "SolMail",
            "symbol": "Mail",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_C8cNX2D1y3jqKpMFkQhP1gGbfvTEdeckZXLBKSN5z5KF",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmRuN1xdfkfpTWAbwqbnoWdC1fYwoPjTvmyGQ1SmaRCyAU",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "332224.93",
            "totalSupply": "999909487118152",
            "totalSupplyFormatted": "999909487.118152",
            "links": {
                "github": "https://solmail-1.gitbook.io/solmail",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+P_URJSVuvU1mNTc5",
                "twitter": "https://twitter.com/SolMailOfficial",
                "website": "https://solmail.so/",
                "moralis": "https://moralis.com/chain/solana/token/price/C8cNX2D1y3jqKpMFkQhP1gGbfvTEdeckZXLBKSN5z5KF"
            },
            "description": null
        }
    },
    "solmax": {
        "contract_address": "FEhfph34VeoCfkuiNnv89pEGPiGPukWfhrKtLko66mvj",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FEhfph34VeoCfkuiNnv89pEGPiGPukWfhrKtLko66mvj",
            "standard": "metaplex",
            "name": "SOLMAX",
            "symbol": "SOLMAX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FEhfph34VeoCfkuiNnv89pEGPiGPukWfhrKtLko66mvj",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://i.degencdn.com/ipfs/bafkreibgcp4vxwiiwqt6inxhjbdfctxdeig3y2e7rboah7pu6rgysxcr3i",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8JAQQQQNfx2c6RE9Usq6AfYjcHoST818qVUMXevRvvbt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "591757.32",
            "totalSupply": "314604181842",
            "totalSupplyFormatted": "314604.181842",
            "links": {
                "twitter": "https://twitter.com/SolMaxRewards",
                "website": "https://solmax-sol.tech/",
                "moralis": "https://moralis.com/chain/solana/token/price/FEhfph34VeoCfkuiNnv89pEGPiGPukWfhrKtLko66mvj"
            },
            "description": null
        }
    },
    "solmedia": {
        "contract_address": "BNT4uhSStq1beFADv3cq4wQAVfWB392PjAaxTBpNeWxu",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BNT4uhSStq1beFADv3cq4wQAVfWB392PjAaxTBpNeWxu",
            "standard": "metaplex",
            "name": "Solmedia",
            "symbol": "MEDIA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BNT4uhSStq1beFADv3cq4wQAVfWB392PjAaxTBpNeWxu",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreiccopr74muerqg73tkutzjlj7graoeoolecgqbdokkvm66xiacoqi.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "4dmQVHEG5ATiNfZMwok5mH3RRiaSxoyRxuY3nFmL68DZ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "65836.09",
            "totalSupply": "99960660032242",
            "totalSupplyFormatted": "99960660.032242",
            "links": {
                "telegram": "https://t.me/SolMediaTech",
                "website": "https://sm.network",
                "moralis": "https://moralis.com/chain/solana/token/price/BNT4uhSStq1beFADv3cq4wQAVfWB392PjAaxTBpNeWxu"
            },
            "description": null
        }
    },
    "solnic": {
        "contract_address": "DeaKMzAeZja3Mh5okZE6WUvygLP3Lfuvm6Rg78HqXTz9",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DeaKMzAeZja3Mh5okZE6WUvygLP3Lfuvm6Rg78HqXTz9",
            "standard": "metaplex",
            "name": "Solnic",
            "symbol": "SOLNIC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DeaKMzAeZja3Mh5okZE6WUvygLP3Lfuvm6Rg78HqXTz9",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/xAQpvml7IK_k54SVQnjHsJpCvwdteAApGMfAi3prng8",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "2Rjf2pMwt4hMbNbUMnVWprCCNeWcaos7nY1jM7xZ9Hik",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "4128523.86",
            "totalSupply": "939870889509066",
            "totalSupplyFormatted": "939870889.509066",
            "links": {
                "email": "fast@solnic.io",
                "telegram": "https://t.me/solnicportal",
                "twitter": "https://twitter.com/SolnicToken",
                "website": "https://solnic.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/DeaKMzAeZja3Mh5okZE6WUvygLP3Lfuvm6Rg78HqXTz9"
            },
            "description": null
        }
    },
    "sols": {
        "contract_address": "2wme8EVkw8qsfSk2B3QeX4S64ac6wxHPXb3GrdckEkio",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2wme8EVkw8qsfSk2B3QeX4S64ac6wxHPXb3GrdckEkio",
            "standard": "metaplex",
            "name": "sols",
            "symbol": "sols",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2wme8EVkw8qsfSk2B3QeX4S64ac6wxHPXb3GrdckEkio",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/WlMwnDwaLYgT4uPRXGnlvBYmcUL2yKbZield-IGBSrg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DGn2nHnGqLucsfZiVgvJy4MFShkJJskHdix7WQ4eezQF",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1152921.69",
            "totalSupply": "20999986988652942",
            "totalSupplyFormatted": "20999986.988652942",
            "links": {
                "discord": "https://discord.gg/vYFYThGaxt",
                "github": "https://github.com/neftworld",
                "twitter": "https://twitter.com/solkekw",
                "website": "https://www.spl20.io",
                "moralis": "https://moralis.com/chain/solana/token/price/2wme8EVkw8qsfSk2B3QeX4S64ac6wxHPXb3GrdckEkio"
            },
            "description": null
        }
    },
    "solxencat": {
        "contract_address": "7UN8WkBumTUCofVPXCPjNWQ6msQhzrg9tFQRP48Nmw5V",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7UN8WkBumTUCofVPXCPjNWQ6msQhzrg9tFQRP48Nmw5V",
            "standard": "metaplex",
            "name": "SolXenCat",
            "symbol": "xencat",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7UN8WkBumTUCofVPXCPjNWQ6msQhzrg9tFQRP48Nmw5V",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmNwCRF7TLmYSGGnRL7ESwDkXiv9DxNJzuKhJNJRLQuUUa",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1223889.02",
            "totalSupply": "999928118348971",
            "totalSupplyFormatted": "999928118.348971",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7UN8WkBumTUCofVPXCPjNWQ6msQhzrg9tFQRP48Nmw5V"
            },
            "description": null
        }
    },
    "sonic-svm": {
        "contract_address": "SonicxvLud67EceaEzCLRnMTBqzYUUYNr93DBkBdDES",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "SonicxvLud67EceaEzCLRnMTBqzYUUYNr93DBkBdDES",
            "standard": "metaplex",
            "name": "Sonic SVM",
            "symbol": "SONIC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_SonicxvLud67EceaEzCLRnMTBqzYUUYNr93DBkBdDES",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/-Z3XOHXJD0U9d5vRVTnDQ84a0ZhfMt4TLKUz1wgI6GU",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "26HQNndCqMveEbyxTzuocSuZqxtqYypyYiMFUXDjp3jC",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "605268411.93",
            "totalSupply": "2399999454097446671",
            "totalSupplyFormatted": "2399999454.097446671",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/SonicxvLud67EceaEzCLRnMTBqzYUUYNr93DBkBdDES"
            },
            "description": null
        }
    },
    "sonic-the-goat": {
        "contract_address": "59u8qAD2S2gEtsY5Vs7dJ95YspnHavyHEtRfzCEb9F7G",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "59u8qAD2S2gEtsY5Vs7dJ95YspnHavyHEtRfzCEb9F7G",
            "standard": "metaplex",
            "name": "Sonic The Goat",
            "symbol": "GOAT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_59u8qAD2S2gEtsY5Vs7dJ95YspnHavyHEtRfzCEb9F7G",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/bafkreic4hwjpch6lcduhpiv63sqpcwpvc4wypqyvlwadmroc2kun4ggfua",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BXuNiJPhvDVHLisZScuX3XxpVPQthW7oThRo7HdUsaAy",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "195112.35",
            "totalSupply": "1000576177193536143",
            "totalSupplyFormatted": "1000576177193.536143",
            "links": {
                "email": "marketing@goatthecoin.xyz",
                "instagram": "https://www.instagram.com/goatthecoin",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/GOATthecoin",
                "tiktok": "https://www.tiktok.com/@goatthecoin",
                "twitter": "https://twitter.com/GOATthecoin",
                "website": "https://www.goatthecoin.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/59u8qAD2S2gEtsY5Vs7dJ95YspnHavyHEtRfzCEb9F7G"
            },
            "description": null
        }
    },
    "sora-labs": {
        "contract_address": "89nnWMkWeF9LSJvAWcN2JFQfeWdDk6diKEckeToEU1hE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "89nnWMkWeF9LSJvAWcN2JFQfeWdDk6diKEckeToEU1hE",
            "standard": "metaplex",
            "name": "sora labs",
            "symbol": "sora",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_89nnWMkWeF9LSJvAWcN2JFQfeWdDk6diKEckeToEU1hE",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmX8wPb9GCaKQaDfrJmjB3cZk6M4Yckrk1Jezk9pa6JJWy",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "294993.65",
            "totalSupply": "999802240031266",
            "totalSupplyFormatted": "999802240.031266",
            "links": {
                "github": "https://github.com/soralabs",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/@labs_sora",
                "website": "https://soralabs.app/",
                "moralis": "https://moralis.com/chain/solana/token/price/89nnWMkWeF9LSJvAWcN2JFQfeWdDk6diKEckeToEU1hE"
            },
            "description": null
        }
    },
    "soul-graph": {
        "contract_address": "9doRRAik5gvhbEwjbZDbZR6GxXSAfdoomyJR57xKpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9doRRAik5gvhbEwjbZDbZR6GxXSAfdoomyJR57xKpump",
            "standard": "metaplex",
            "name": "Soul Graph",
            "symbol": "GRPH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9doRRAik5gvhbEwjbZDbZR6GxXSAfdoomyJR57xKpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQqVedqqHEmZiTEhKQ6gL9Jew3raj8ek8D5wUThj5EQNg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4046700.10",
            "totalSupply": "999927130684052",
            "totalSupplyFormatted": "999927130.684052",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/9doRRAik5gvhbEwjbZDbZR6GxXSAfdoomyJR57xKpump"
            },
            "description": null
        }
    },
    "soul-scanner": {
        "contract_address": "J4ywFdm8H7hjwKzCaEQujhkDRfCnRviVnHMvFNDAoLNQ",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "J4ywFdm8H7hjwKzCaEQujhkDRfCnRviVnHMvFNDAoLNQ",
            "standard": "metaplex",
            "name": "Soul Scanner",
            "symbol": "SOUL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_J4ywFdm8H7hjwKzCaEQujhkDRfCnRviVnHMvFNDAoLNQ",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreiecjm334zui62lyaorhsqr3afdtoxb6fsqmoyyd5ngfqd36axmyfe.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "A5NkgVefjUedfAGTkn6pTpGCkCVkFzCiFqxmQZDD8aXk",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1212971.64",
            "totalSupply": "999931279606",
            "totalSupplyFormatted": "999931.279606",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/soul_scanner",
                "twitter": "https://twitter.com/soulscannerbot",
                "website": "https://www.soulscanner.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/J4ywFdm8H7hjwKzCaEQujhkDRfCnRviVnHMvFNDAoLNQ"
            },
            "description": null
        }
    },
    "soulbazaar": {
        "contract_address": "Agentfk87X48g37uPprEZaQtizDvnSQVeTqVjAtmbhd3",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Agentfk87X48g37uPprEZaQtizDvnSQVeTqVjAtmbhd3",
            "standard": "metaplex",
            "name": "SoulBazaar",
            "symbol": "$SOULS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Agentfk87X48g37uPprEZaQtizDvnSQVeTqVjAtmbhd3",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWmJ4Zpz6BX4G9Au44ybqhZRNgyJKFaLtPjiZppE3Rcrz",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "373672.81",
            "totalSupply": "999983442513753",
            "totalSupplyFormatted": "999983442.513753",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Agentfk87X48g37uPprEZaQtizDvnSQVeTqVjAtmbhd3"
            },
            "description": null
        }
    },
    "spacefalcon": {
        "contract_address": "HovGjrBGTfna4dvg6exkMxXuexB3tUfEZKcut8AWowXj",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HovGjrBGTfna4dvg6exkMxXuexB3tUfEZKcut8AWowXj",
            "standard": "metaplex",
            "name": "Space Falcon",
            "symbol": "FCON",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HovGjrBGTfna4dvg6exkMxXuexB3tUfEZKcut8AWowXj",
            "decimals": "4",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1073911.68",
            "totalSupply": "189983756243419",
            "totalSupplyFormatted": "18998375624.3419",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/HovGjrBGTfna4dvg6exkMxXuexB3tUfEZKcut8AWowXj"
            },
            "description": null
        }
    },
    "spectrum-2": {
        "contract_address": "CA2NxcCqzbsXfaX8ytYvr71bG3oTK4NNYmGAcCaWpvpq",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CA2NxcCqzbsXfaX8ytYvr71bG3oTK4NNYmGAcCaWpvpq",
            "standard": "metaplex",
            "name": "Spectrum",
            "symbol": "SPCTRM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CA2NxcCqzbsXfaX8ytYvr71bG3oTK4NNYmGAcCaWpvpq",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/rruf6v6nvZ5DcgLwoHBssYbRO77pIsl52eV9sf5nkpE",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "3Zx1nw7oAcT5RjAB98nMNb4KBh2bKUWu1MACT7FxivZ4",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "287308.15",
            "totalSupply": "99999357332542568",
            "totalSupplyFormatted": "999993573.32542568",
            "links": {
                "telegram": "https://t.me/solspectrum",
                "twitter": "https://x.com/spectrum__sol",
                "website": "https://spectrumsol.xyz",
                "moralis": "https://moralis.com/chain/solana/token/price/CA2NxcCqzbsXfaX8ytYvr71bG3oTK4NNYmGAcCaWpvpq"
            },
            "description": null
        }
    },
    "spinning-cat": {
        "contract_address": "VaxZxmFXV8tmsd72hUn22ex6GFzZ5uq9DVJ5wA5pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "VaxZxmFXV8tmsd72hUn22ex6GFzZ5uq9DVJ5wA5pump",
            "standard": "metaplex",
            "name": "spinning cat",
            "symbol": "OIIAOIIA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_VaxZxmFXV8tmsd72hUn22ex6GFzZ5uq9DVJ5wA5pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXAjvQs4dwNDQgiWEzGqEdLwLZYjNzSVN2GzXfVZsy45k",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5266669.71",
            "totalSupply": "999819219120407",
            "totalSupplyFormatted": "999819219.120407",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/oiiaoiiacatportal",
                "twitter": "https://twitter.com/OIIAOIIA_COIN_",
                "website": "https://spinning.cat/",
                "moralis": "https://moralis.com/chain/solana/token/price/VaxZxmFXV8tmsd72hUn22ex6GFzZ5uq9DVJ5wA5pump"
            },
            "description": null
        }
    },
    "spore-2": {
        "contract_address": "8bdhP1UQMevciC9oJ7NrvgDfoW8XPXPfbkkm6vKtMS7N",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8bdhP1UQMevciC9oJ7NrvgDfoW8XPXPfbkkm6vKtMS7N",
            "standard": "metaplex",
            "name": "SPORE",
            "symbol": "SPORE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8bdhP1UQMevciC9oJ7NrvgDfoW8XPXPfbkkm6vKtMS7N",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmZP162yZxCCMqSNex8CQwu4qfhRDnBGjUWBE4uVkQWjaG",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3209915.84",
            "totalSupply": "999976895642929",
            "totalSupplyFormatted": "999976895.642929",
            "links": {
                "discord": "https://discord.gg/sporedotfun",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/sporedotfun",
                "website": "https://www.spore.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/8bdhP1UQMevciC9oJ7NrvgDfoW8XPXPfbkkm6vKtMS7N"
            },
            "description": null
        }
    },
    "spunk": {
        "contract_address": "H3j2qniYA7fY3SyBiYeKCYh9h3edtriKi2JfjE7sPuNk",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "H3j2qniYA7fY3SyBiYeKCYh9h3edtriKi2JfjE7sPuNk",
            "standard": "metaplex",
            "name": "SPUNK",
            "symbol": "SPUNK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_H3j2qniYA7fY3SyBiYeKCYh9h3edtriKi2JfjE7sPuNk",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreicxrruqxtsmzjghb5p5quudwxt45vsxf5wuzvheqymixojxivsiju.ipfs.w3s.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GJuGX3yz18MK4jxxzVsYjj2qL2JWAV4hjSxqXrfmMYWY",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "253245.25",
            "totalSupply": "999993085370371",
            "totalSupplyFormatted": "999993085.370371",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/H3j2qniYA7fY3SyBiYeKCYh9h3edtriKi2JfjE7sPuNk"
            },
            "description": null
        }
    },
    "stage-0": {
        "contract_address": "CFTyvm52gRGRRx2LZK22XivaYgm3xKCw7PUpNDvmXhhV",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CFTyvm52gRGRRx2LZK22XivaYgm3xKCw7PUpNDvmXhhV",
            "standard": "metaplex",
            "name": "ACC",
            "symbol": "ACC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CFTyvm52gRGRRx2LZK22XivaYgm3xKCw7PUpNDvmXhhV",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://quicknode.quicknode-ipfs.com/ipfs/QmTMLs7A59xpqK2fgcea2guJnkbhkchakJBovsCdu5MwiM",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BB7WUychW3f6Vih8WEJ9xkwuMrTaMuLkvyHYwxyCLfDf",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "239452.97",
            "totalSupply": "99999568384717993",
            "totalSupplyFormatted": "999995683.84717993",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/CFTyvm52gRGRRx2LZK22XivaYgm3xKCw7PUpNDvmXhhV"
            },
            "description": null
        }
    },
    "star-atlas": {
        "contract_address": "ATLASXmbPQxBUYbxPsV97usA3fPQYEqzQBUHgiFCUsXx",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ATLASXmbPQxBUYbxPsV97usA3fPQYEqzQBUHgiFCUsXx",
            "standard": "metaplex",
            "name": "Star Atlas",
            "symbol": "ATLAS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ATLASXmbPQxBUYbxPsV97usA3fPQYEqzQBUHgiFCUsXx",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GgYtnDJMHQG4gpVzy2KHukSvHfFJcs1jLXASsBCQE83P",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "52330429.57",
            "totalSupply": "3599982771934161817",
            "totalSupplyFormatted": "35999827719.34161817",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/ATLASXmbPQxBUYbxPsV97usA3fPQYEqzQBUHgiFCUsXx"
            },
            "description": null
        }
    },
    "star-atlas-dao": {
        "contract_address": "poLisWXnNRwC6oBu1vHiuKQzFjGL4XDSu4g9qjz9qVk",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "poLisWXnNRwC6oBu1vHiuKQzFjGL4XDSu4g9qjz9qVk",
            "standard": "metaplex",
            "name": "Star Atlas DAO",
            "symbol": "POLIS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_poLisWXnNRwC6oBu1vHiuKQzFjGL4XDSu4g9qjz9qVk",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GgYtnDJMHQG4gpVzy2KHukSvHfFJcs1jLXASsBCQE83P",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "27669773.12",
            "totalSupply": "35999822431805733",
            "totalSupplyFormatted": "359998224.31805733",
            "links": {
                "discord": "https://discord.gg/staratlas",
                "medium": "https://medium.com/star-atlas",
                "reddit": "https://www.reddit.comr/staratlas/",
                "telegram": "https://t.me/staratlasgame",
                "twitter": "https://twitter.com/staratlas",
                "website": "https://staratlas.com",
                "moralis": "https://moralis.com/chain/solana/token/price/poLisWXnNRwC6oBu1vHiuKQzFjGL4XDSu4g9qjz9qVk"
            },
            "description": null
        }
    },
    "stash-inu": {
        "contract_address": "EWMfSJgDCE7CXDAYz3hbCaA7NsFHTnddySXx3shco2Hs",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EWMfSJgDCE7CXDAYz3hbCaA7NsFHTnddySXx3shco2Hs",
            "standard": "metaplex",
            "name": "STASH INU",
            "symbol": "STASH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EWMfSJgDCE7CXDAYz3hbCaA7NsFHTnddySXx3shco2Hs",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreieo3q3xwhvt7wo2xyiq2r7i5y4p7nzg225eee2bujlebbovq7e27m.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5VefHx8dCDvFUPZCMfs19SAJVFE18NguEM1k5n2BZ8hU",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1530473.62",
            "totalSupply": "9385263094119645",
            "totalSupplyFormatted": "9385263094.119645",
            "links": {
                "telegram": "https://t.me/StashInu",
                "twitter": "https://twitter.com/StashInu",
                "website": "https://stashinu.com",
                "moralis": "https://moralis.com/chain/solana/token/price/EWMfSJgDCE7CXDAYz3hbCaA7NsFHTnddySXx3shco2Hs"
            },
            "description": null
        }
    },
    "step-finance": {
        "contract_address": "StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT",
            "standard": "metaplex",
            "name": "Step",
            "symbol": "STEP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GkT2mRSujbydLUmA178ykHe7hZtaUpkmX2sfwS8suWb3",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "25403163.34",
            "totalSupply": "349999535587111160",
            "totalSupplyFormatted": "349999535.58711116",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT"
            },
            "description": null
        }
    },
    "step-staked-sol": {
        "contract_address": "StPsoHokZryePePFV8N7iXvfEmgUoJ87rivABX7gaW6",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "StPsoHokZryePePFV8N7iXvfEmgUoJ87rivABX7gaW6",
            "standard": "metaplex",
            "name": "stepSOL",
            "symbol": "stepSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_StPsoHokZryePePFV8N7iXvfEmgUoJ87rivABX7gaW6",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://step-public.s3.eu-north-1.amazonaws.com/stepSOL.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "29ZTqmxmo7FaFjeJKcGdRSZSkB87sHxFr17pKo8DcsiG",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "828653.65",
            "totalSupply": "5803692595392",
            "totalSupplyFormatted": "5803.692595392",
            "links": {
                "discord": "https://discord.com/invite/k5gMJUAEJe",
                "github": "https://github.com/step-finance",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/stepfinance_",
                "website": "https://www.step.finance/",
                "moralis": "https://moralis.com/chain/solana/token/price/StPsoHokZryePePFV8N7iXvfEmgUoJ87rivABX7gaW6"
            },
            "description": null
        }
    },
    "stonks-4": {
        "contract_address": "43VWkd99HjqkhFTZbWBpMpRhjG469nWa7x7uEsgSH7We",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "43VWkd99HjqkhFTZbWBpMpRhjG469nWa7x7uEsgSH7We",
            "standard": "metaplex",
            "name": "Stonks",
            "symbol": "STNK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_43VWkd99HjqkhFTZbWBpMpRhjG469nWa7x7uEsgSH7We",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AqH29mZfQFgRpfwaPoTMWSKJ5kqauoc1FwVBRksZyQrt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "10237115.24",
            "totalSupply": "581917871098530",
            "totalSupplyFormatted": "581917.87109853",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/STONKS_SOL",
                "website": "https://stonkscoin.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/43VWkd99HjqkhFTZbWBpMpRhjG469nWa7x7uEsgSH7We"
            },
            "description": null
        }
    },
    "stonks-5": {
        "contract_address": "6NcdiK8B5KK2DzKvzvCfqi8EHaEqu48fyEzC8Mm9pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6NcdiK8B5KK2DzKvzvCfqi8EHaEqu48fyEzC8Mm9pump",
            "standard": "metaplex",
            "name": "STONKS",
            "symbol": "STONKS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6NcdiK8B5KK2DzKvzvCfqi8EHaEqu48fyEzC8Mm9pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmaiHAmmcML3QJWXKQaH8GV3AryMsjiBFT72eoPtCb5uTX",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "42841759.21",
            "totalSupply": "999935095770470",
            "totalSupplyFormatted": "999935095.77047",
            "links": {
                "email": "ctostonks@gmail.com",
                "telegram": "https://t.me/STONKS_Offical",
                "twitter": "https://x.com/Stonks_DM",
                "website": "https://mystonks.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/6NcdiK8B5KK2DzKvzvCfqi8EHaEqu48fyEzC8Mm9pump"
            },
            "description": null
        }
    },
    "stooges": {
        "contract_address": "AHnZ7VyyQ5jHXbitQL8tuN7ciGG66EvCnU7eKoKX99fz",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AHnZ7VyyQ5jHXbitQL8tuN7ciGG66EvCnU7eKoKX99fz",
            "standard": "metaplex",
            "name": "Stooges",
            "symbol": "STOG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AHnZ7VyyQ5jHXbitQL8tuN7ciGG66EvCnU7eKoKX99fz",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://nftstorage.link/ipfs/bafkreigvxz25sea6k2o4dkco45tra5v3hjx2qjp3kmyw6jvy3cvbdbynrm",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GQGYCZ7a8cy5KdLfYB9biDETqJKJ9ihnZfhSk3dNXwkn",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "359475.85",
            "totalSupply": "2999706708174991",
            "totalSupplyFormatted": "2999706708.174991",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/StoogesOfficial",
                "twitter": "https://x.com/StoogesOfficial",
                "website": "https://www.stooges.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/AHnZ7VyyQ5jHXbitQL8tuN7ciGG66EvCnU7eKoKX99fz"
            },
            "description": null
        }
    },
    "stool-prisondente": {
        "contract_address": "AxriehR6Xw3adzHopnvMn7GcpRFcD41ddpiTWMg6pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AxriehR6Xw3adzHopnvMn7GcpRFcD41ddpiTWMg6pump",
            "standard": "metaplex",
            "name": "Stool Prisondente",
            "symbol": "jailstool",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AxriehR6Xw3adzHopnvMn7GcpRFcD41ddpiTWMg6pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXKkaxh8BnApVfrU7sMxXUfgHCQ76oxFJ3jDesWbsKbwC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "7578256.81",
            "totalSupply": "999826745942389",
            "totalSupplyFormatted": "999826745.942389",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/jailstoolarmy",
                "twitter": "https://x.com/stoolpresidente",
                "website": "https://getjailstool.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/AxriehR6Xw3adzHopnvMn7GcpRFcD41ddpiTWMg6pump"
            },
            "description": null
        }
    },
    "storm-money": {
        "contract_address": "GUdXKe5B35QBcqa8VrPQqn8LCQrK2X1aecCQSJs3EVrS",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GUdXKe5B35QBcqa8VrPQqn8LCQrK2X1aecCQSJs3EVrS",
            "standard": "metaplex",
            "name": "Storm Money",
            "symbol": "STORM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GUdXKe5B35QBcqa8VrPQqn8LCQrK2X1aecCQSJs3EVrS",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://r32wrcv3bsahny4eg22o6p2hqafitodbyq4yhb6mak3re4tigf4a.arweave.net/jvVoirsMgHbjhDa07z9HgAqJuGHEOYOHzAK3EnJoMXg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "357125.01",
            "totalSupply": "988559457699001",
            "totalSupplyFormatted": "988559457.699001",
            "links": {
                "telegram": "https://t.me/StormMoney_sol",
                "twitter": "https://twitter.com/stormmoney_io",
                "website": "https://stormmoney.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/GUdXKe5B35QBcqa8VrPQqn8LCQrK2X1aecCQSJs3EVrS"
            },
            "description": null
        }
    },
    "strategic-solana-reserve": {
        "contract_address": "7d5uLATMiAoRC1n9yNc7VCrhx44H6bjEzDx7Gxuhpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7d5uLATMiAoRC1n9yNc7VCrhx44H6bjEzDx7Gxuhpump",
            "standard": "metaplex",
            "name": "Official Strategic Solana Res",
            "symbol": "SSR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7d5uLATMiAoRC1n9yNc7VCrhx44H6bjEzDx7Gxuhpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRiYrtMMjYah82kAhx41FFZfyQ9HqDhF5PJkmh8xEvBRC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "372268.95",
            "totalSupply": "999876316402969",
            "totalSupplyFormatted": "999876316.402969",
            "links": {
                "email": "enigma@strategic-solana-reserve.com",
                "telegram": "https://t.me/OfficialStrategicSolanaReserve",
                "twitter": "https://x.com/OfficialSolanaR",
                "website": "https://strategic-solana-reserve.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/7d5uLATMiAoRC1n9yNc7VCrhx44H6bjEzDx7Gxuhpump"
            },
            "description": null
        }
    },
    "streamflow": {
        "contract_address": "STREAMribRwybYpMmSYoCsQUdr6MZNXEqHgm7p1gu9M",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "STREAMribRwybYpMmSYoCsQUdr6MZNXEqHgm7p1gu9M",
            "standard": "metaplex",
            "name": "Streamflow",
            "symbol": "STREAM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_STREAMribRwybYpMmSYoCsQUdr6MZNXEqHgm7p1gu9M",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/uRLTOPSo1-70v7FNGBESeNOO6LaDTlhdaIGHkFrGIq8",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "JCvMkyfm7iM4gAUfQ43A8BWFWktAjPjPMqbTpZvAG3MC",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "36198954.93",
            "totalSupply": "999998754979293",
            "totalSupplyFormatted": "999998754.979293",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/STREAMribRwybYpMmSYoCsQUdr6MZNXEqHgm7p1gu9M"
            },
            "description": null
        }
    },
    "strike-3": {
        "contract_address": "STrikemJEk2tFVYpg7SMo9nGPrnJ56fHnS1K7PV2fPw",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "STrikemJEk2tFVYpg7SMo9nGPrnJ56fHnS1K7PV2fPw",
            "standard": "metaplex",
            "name": "STRIKE",
            "symbol": "STRIKE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_STrikemJEk2tFVYpg7SMo9nGPrnJ56fHnS1K7PV2fPw",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/bafkreicb4n7roxouo7mwg463lbwe2zyqai6mjdymcba46wqxftq2c3ffoy",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9B8qgfxQbp97n9AEdbaz55wWsQUmkSToDDjzsormLwSW",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "52278279.43",
            "totalSupply": "9999997977764006",
            "totalSupplyFormatted": "9999997977.764006",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/STrikemJEk2tFVYpg7SMo9nGPrnJ56fHnS1K7PV2fPw"
            },
            "description": null
        }
    },
    "stronghold-staked-sol": {
        "contract_address": "strng7mqqc1MBJJV6vMzYbEqnwVGvKKGKedeCvtktWA",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "strng7mqqc1MBJJV6vMzYbEqnwVGvKKGKedeCvtktWA",
            "standard": "metaplex",
            "name": "Stronghold LST",
            "symbol": "strongSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_strng7mqqc1MBJJV6vMzYbEqnwVGvKKGKedeCvtktWA",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://shdw-drive.genesysgo.net/CqCTE2k6ext17JLE7EFk6pXAznS7m1rLJaN9nHxUAwpc/strongMetadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Fqg9mbiNAFD8jGzMztjJuSN2twoMUP8nvFmg1wCsCZWG",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "11870781.43",
            "totalSupply": "79879497492783",
            "totalSupplyFormatted": "79879.497492783",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/StrongholdSOL",
                "website": "https://thesixnine.one/",
                "moralis": "https://moralis.com/chain/solana/token/price/strng7mqqc1MBJJV6vMzYbEqnwVGvKKGKedeCvtktWA"
            },
            "description": null
        }
    },
    "success-kid": {
        "contract_address": "9X2RHtKrBzw3SLYe9E88cBd1kz5RfU1f4JTSn4aRH43d",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9X2RHtKrBzw3SLYe9E88cBd1kz5RfU1f4JTSn4aRH43d",
            "standard": "metaplex",
            "name": "Success Kid",
            "symbol": "SKID",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9X2RHtKrBzw3SLYe9E88cBd1kz5RfU1f4JTSn4aRH43d",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreia3wwa3aetywkye5pketfk35qixxkfcuauealx5aneh6vpqejxxca.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8sNU3VZqLCpqduF4XzvchEYkMwdw51qmUvGZ2bpWASm6",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "657689.41",
            "totalSupply": "88882267888918",
            "totalSupplyFormatted": "88882267.888918",
            "links": {
                "email": "support@successkidsol.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/SuccessKidOfficialSol",
                "twitter": "https://twitter.com/successkid_sol",
                "website": "https://successkidsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/9X2RHtKrBzw3SLYe9E88cBd1kz5RfU1f4JTSn4aRH43d"
            },
            "description": null
        }
    },
    "supercycle-real": {
        "contract_address": "2G8LH53fcr3aCrEsmAo73eunbZRbyjKrGH5qmur6pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2G8LH53fcr3aCrEsmAo73eunbZRbyjKrGH5qmur6pump",
            "standard": "metaplex",
            "name": "supercycle (real)",
            "symbol": "supercycle",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2G8LH53fcr3aCrEsmAo73eunbZRbyjKrGH5qmur6pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmfCxLkwtPALuFiXE5vy1q3ueEqhW97uUg3WEN7hNpRJ8S",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "349327.94",
            "totalSupply": "995335539422892",
            "totalSupplyFormatted": "995335539.422892",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/supercyclereal",
                "twitter": "https://x.com/realsupercycle",
                "website": "https://www.supercyclereal.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/2G8LH53fcr3aCrEsmAo73eunbZRbyjKrGH5qmur6pump"
            },
            "description": null
        }
    },
    "swarm-2": {
        "contract_address": "JBSVUpKgYNHt4GLtNebQxTJmZgftTMWENQrziHtGpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "JBSVUpKgYNHt4GLtNebQxTJmZgftTMWENQrziHtGpump",
            "standard": "metaplex",
            "name": "Swarm",
            "symbol": "Swarm",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_JBSVUpKgYNHt4GLtNebQxTJmZgftTMWENQrziHtGpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qma7V5x5KEFD6VPmw7GfefTpNTPrfgsM3s9BXy9mJzNyRU",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "398931.76",
            "totalSupply": "999946757581093",
            "totalSupplyFormatted": "999946757.581093",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/swarmsolana",
                "twitter": "http://x.com/swarmsolana",
                "website": "https://swarm.love",
                "moralis": "https://moralis.com/chain/solana/token/price/JBSVUpKgYNHt4GLtNebQxTJmZgftTMWENQrziHtGpump"
            },
            "description": null
        }
    },
    "swarmnode-ai": {
        "contract_address": "Hjw6bEcHtbHGpQr8onG3izfJY5DJiWdt7uk2BfdSpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Hjw6bEcHtbHGpQr8onG3izfJY5DJiWdt7uk2BfdSpump",
            "standard": "metaplex",
            "name": "SwarmNode.ai",
            "symbol": "SNAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Hjw6bEcHtbHGpQr8onG3izfJY5DJiWdt7uk2BfdSpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmS7kVXsN2yhTzm9pwNjorZhn8rsKmbA8Db6LGZuLMfBuW",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "32035967.22",
            "totalSupply": "999975472607896",
            "totalSupplyFormatted": "999975472.607896",
            "links": {
                "twitter": "https://x.com/swarmnode",
                "website": "https://swarmnode.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/Hjw6bEcHtbHGpQr8onG3izfJY5DJiWdt7uk2BfdSpump"
            },
            "description": null
        }
    },
    "swarms": {
        "contract_address": "74SBV4zDXxTRgv1pEMoECskKBkZHc2yGPnc7GYVepump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "74SBV4zDXxTRgv1pEMoECskKBkZHc2yGPnc7GYVepump",
            "standard": "metaplex",
            "name": "swarms",
            "symbol": "swarms",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_74SBV4zDXxTRgv1pEMoECskKBkZHc2yGPnc7GYVepump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTXT8EFrM7FShwENGKMPSi9Es2iXP6F1CzMDAtCJhkC6f",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "57841589.53",
            "totalSupply": "999981458845389",
            "totalSupplyFormatted": "999981458.845389",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/74SBV4zDXxTRgv1pEMoECskKBkZHc2yGPnc7GYVepump"
            },
            "description": null
        }
    },
    "sylvi-agent": {
        "contract_address": "DuidnHq4WKSeJx3m4QKf7xSfXXa7H9ocT39hFjMSpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DuidnHq4WKSeJx3m4QKf7xSfXXa7H9ocT39hFjMSpump",
            "standard": "metaplex",
            "name": "SYLVI AGENT",
            "symbol": "SylviAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DuidnHq4WKSeJx3m4QKf7xSfXXa7H9ocT39hFjMSpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmekVgZAMNuzYfahZoiDcqiZuvidcyjspUS8M511dgCQj3",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "421722.84",
            "totalSupply": "999971163689166",
            "totalSupplyFormatted": "999971163.689166",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/DuidnHq4WKSeJx3m4QKf7xSfXXa7H9ocT39hFjMSpump"
            },
            "description": null
        }
    },
    "synatra-staked-usdc": {
        "contract_address": "yUSDX7W89jXWn4zzDPLnhykDymSjQSmpaJ8e4fjC1fg",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "yUSDX7W89jXWn4zzDPLnhykDymSjQSmpaJ8e4fjC1fg",
            "standard": "metaplex",
            "name": "Synatra Staked USDC",
            "symbol": "yUSD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_yUSDX7W89jXWn4zzDPLnhykDymSjQSmpaJ8e4fjC1fg",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://shdw-drive.genesysgo.net/HahVMG4mRpRAia2DuUtJi68ngrhHxGHonXchiYDLv67a/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "syna9p1JkU334k1fAfDu59RiPkvu7JEV6sGoPjLMxiN",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1711989.26",
            "totalSupply": "1309688355176",
            "totalSupplyFormatted": "1309688.355176",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/yUSDX7W89jXWn4zzDPLnhykDymSjQSmpaJ8e4fjC1fg"
            },
            "description": null
        }
    },
    "synesis-one": {
        "contract_address": "SNSNkV9zfG5ZKWQs6x4hxvBRV6s8SqMfSGCtECDvdMd",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "SNSNkV9zfG5ZKWQs6x4hxvBRV6s8SqMfSGCtECDvdMd",
            "standard": "metaplex",
            "name": "SynesisOne",
            "symbol": "SNS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_SNSNkV9zfG5ZKWQs6x4hxvBRV6s8SqMfSGCtECDvdMd",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://raw.githubusercontent.com/Synesis-One/spl-token/main/metadata-mpl.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "ADMmxfJff5U8Ubec3esMw6vhfMdkkRfXyzNmbXXki7bS",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6616404.32",
            "totalSupply": "999678678493799710",
            "totalSupplyFormatted": "999678678.49379971",
            "links": {
                "discord": "https://discord.com/invite/synesisone",
                "telegram": "https://t.me/Synesis_One",
                "twitter": "https://twitter.com/synesis_one",
                "website": "https://www.synesis.one/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/SNSNkV9zfG5ZKWQs6x4hxvBRV6s8SqMfSGCtECDvdMd"
            },
            "description": null
        }
    },
    "taitiko": {
        "contract_address": "4ELGifwr2jHtEaFZUXXvQLAYiE6W5bvpWYZbJTRSpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4ELGifwr2jHtEaFZUXXvQLAYiE6W5bvpWYZbJTRSpump",
            "standard": "metaplex",
            "name": "Taitiko",
            "symbol": "TTG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4ELGifwr2jHtEaFZUXXvQLAYiE6W5bvpWYZbJTRSpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qma8CiH4jqHct4ULjkZ6EuEhceTtB3esTXMhp1LUiMraRc",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1907958.53",
            "totalSupply": "999981934566631",
            "totalSupplyFormatted": "999981934.566631",
            "links": {
                "telegram": "https://t.me/taitiko_chat",
                "twitter": "https://x.com/TaitikoOfficial",
                "website": "https://www.taitiko.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/4ELGifwr2jHtEaFZUXXvQLAYiE6W5bvpWYZbJTRSpump"
            },
            "description": null
        }
    },
    "tajir-tech-hub": {
        "contract_address": "4AdDFsG1xzz1L7zKGo2fbiqv256Z92u8uCcJCgYuTBLo",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4AdDFsG1xzz1L7zKGo2fbiqv256Z92u8uCcJCgYuTBLo",
            "standard": "metaplex",
            "name": "Tajir Media",
            "symbol": "TJRM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4AdDFsG1xzz1L7zKGo2fbiqv256Z92u8uCcJCgYuTBLo",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreihkkx67lkhqmfbeguzind2llouq3b65mdllegfo424ytqkg6jw4ou.ipfs.w3s.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "6utvWptNtJtpKtNUk5g9g5nm4mDCWhoRui5qkSQEcZFr",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "34830986.33",
            "totalSupply": "892141445906899282",
            "totalSupplyFormatted": "892141445.906899282",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4AdDFsG1xzz1L7zKGo2fbiqv256Z92u8uCcJCgYuTBLo"
            },
            "description": null
        }
    },
    "take-the-l": {
        "contract_address": "4mE8keRGoGskVfgkDwXLvADNirsav3sUWTHyTbHEpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4mE8keRGoGskVfgkDwXLvADNirsav3sUWTHyTbHEpump",
            "standard": "metaplex",
            "name": "Take the L",
            "symbol": "L",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4mE8keRGoGskVfgkDwXLvADNirsav3sUWTHyTbHEpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYVwwxYimyWmiMEKWLkpBwmkZZDaoKW2aUFMWZuTV2PK4",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "7902.87",
            "totalSupply": "981723576530140",
            "totalSupplyFormatted": "981723576.53014",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/thetheLCTO",
                "twitter": "https://twitter.com/princekamilton",
                "moralis": "https://moralis.com/chain/solana/token/price/4mE8keRGoGskVfgkDwXLvADNirsav3sUWTHyTbHEpump"
            },
            "description": null
        }
    },
    "taolie-coin": {
        "contract_address": "7dLJnm2NzHPMwB7mJL7azhyMLqs4ZzKYkkhr3ob72Gwo",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7dLJnm2NzHPMwB7mJL7azhyMLqs4ZzKYkkhr3ob72Gwo",
            "standard": "metaplex",
            "name": "TAOlie: Decentralized Compute Marketplace",
            "symbol": "TAOLIE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7dLJnm2NzHPMwB7mJL7azhyMLqs4ZzKYkkhr3ob72Gwo",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1076218.68",
            "totalSupply": "999999699987540",
            "totalSupplyFormatted": "999999699.98754",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/TAOlie_Coin",
                "twitter": "https://twitter.com/TAOlie_SOl",
                "website": "https://taolie.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/7dLJnm2NzHPMwB7mJL7azhyMLqs4ZzKYkkhr3ob72Gwo"
            },
            "description": null
        }
    },
    "taoshi": {
        "contract_address": "6MMdrc39L3rMZkshRP9WSKe3trSdcbx5ywJmzJBanzqw",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6MMdrc39L3rMZkshRP9WSKe3trSdcbx5ywJmzJBanzqw",
            "standard": "metaplex",
            "name": "TAOSHI",
            "symbol": "TAOSHI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6MMdrc39L3rMZkshRP9WSKe3trSdcbx5ywJmzJBanzqw",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://bafkreigajdmfnaoadcanrrbffnm3tn6xn64zfjkgufwlp3zfilra2h7aoe.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CNprwEpj6spY97WTprL4mCDLVwtRG3LVBwJa3LAQvJfb",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "309589.53",
            "totalSupply": "2085196169247201",
            "totalSupplyFormatted": "20851961.69247201",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/6MMdrc39L3rMZkshRP9WSKe3trSdcbx5ywJmzJBanzqw"
            },
            "description": null
        }
    },
    "tars-protocol": {
        "contract_address": "Hax9LTgsQkze1YFychnBLtFH8gYbQKtKfWKKg2SP6gdD",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Hax9LTgsQkze1YFychnBLtFH8gYbQKtKfWKKg2SP6gdD",
            "standard": "metaplex",
            "name": "TARS AI",
            "symbol": "TAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Hax9LTgsQkze1YFychnBLtFH8gYbQKtKfWKKg2SP6gdD",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://coffee-important-lizard-419.mypinata.cloud/ipfs/Qmbu9N9Lwp7AanwM6hsRwaFJtfSNVLtryMpkHd4AdVcRnu",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8JhsXt3iCqnBnngfyadAvhTb7VD4ZHVe9vbLKaNgMxqU",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "93100523.65",
            "totalSupply": "894992449764654600",
            "totalSupplyFormatted": "894992449.7646546",
            "links": {
                "github": "https://github.com/Tars-protocol",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/tars_pro",
                "twitter": "https://twitter.com/tarsprotocol",
                "website": "https://tars.pro/",
                "moralis": "https://moralis.com/chain/solana/token/price/Hax9LTgsQkze1YFychnBLtFH8gYbQKtKfWKKg2SP6gdD"
            },
            "description": null
        }
    },
    "taurus-2": {
        "contract_address": "EjkkxYpfSwS6TAtKKuiJuNMMngYvumc1t1v9ZX1WJKMp",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EjkkxYpfSwS6TAtKKuiJuNMMngYvumc1t1v9ZX1WJKMp",
            "standard": "metaplex",
            "name": "Taurus",
            "symbol": "TAURUS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EjkkxYpfSwS6TAtKKuiJuNMMngYvumc1t1v9ZX1WJKMp",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/bE1Dd3Dz1YL9iwR72E4UqhSKQv04QKQvGsJCuDteg-w",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DUK1VN3WatYKsVLwRX2JxfJfaKX6bDXvijpPtT28ed13",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "450448.32",
            "totalSupply": "999996277514229",
            "totalSupplyFormatted": "999996277.514229",
            "links": {
                "telegram": "https://t.me/astrofoliosol",
                "twitter": "https://twitter.com/astrofoliosol",
                "website": "https://astrofolio.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/EjkkxYpfSwS6TAtKKuiJuNMMngYvumc1t1v9ZX1WJKMp"
            },
            "description": null
        }
    },
    "taxsolutions-ai": {
        "contract_address": "3bvHXFp72aHbY1UPy3H2eSKgmbZkUT4ZPx9mehhf6xn7",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3bvHXFp72aHbY1UPy3H2eSKgmbZkUT4ZPx9mehhf6xn7",
            "standard": "metaplex",
            "name": "TaxSolutions.AI",
            "symbol": "TAX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3bvHXFp72aHbY1UPy3H2eSKgmbZkUT4ZPx9mehhf6xn7",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/Hief9BvAUC1-hkJOZVA65t3NzquoHlLIirbGY3yEmGk",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7zxihikkwv2kTPdAg6J8LojpankmKg7Eu6XwUSFHdRvU",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "14253.73",
            "totalSupply": "999770776808071",
            "totalSupplyFormatted": "999770776.808071",
            "links": {
                "email": "support@taxsolutionsai.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/TaxSolutionsAI",
                "twitter": "https://x.com/TaxSolutionsAi",
                "website": "https://taxsolutionsai.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/3bvHXFp72aHbY1UPy3H2eSKgmbZkUT4ZPx9mehhf6xn7"
            },
            "description": null
        }
    },
    "teh-epik-duck": {
        "contract_address": "3BgwJ8b7b9hHX4sgfZ2KJhv9496CoVfsMK2YePevsBRw",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3BgwJ8b7b9hHX4sgfZ2KJhv9496CoVfsMK2YePevsBRw",
            "standard": "metaplex",
            "name": "TEH EPIK DUCK",
            "symbol": "EPIK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3BgwJ8b7b9hHX4sgfZ2KJhv9496CoVfsMK2YePevsBRw",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmcyHeUb7GarRXXgQzWz3dEtKjSjQPQsC2BTjgwDJg2qWs",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3369208.52",
            "totalSupply": "846372546903323",
            "totalSupplyFormatted": "846372546.903323",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/3BgwJ8b7b9hHX4sgfZ2KJhv9496CoVfsMK2YePevsBRw"
            },
            "description": null
        }
    },
    "tema": {
        "contract_address": "CnfshwmvDqLrB1jSLF7bLJ3iZF5u354WRFGPBmGz4uyf",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CnfshwmvDqLrB1jSLF7bLJ3iZF5u354WRFGPBmGz4uyf",
            "standard": "metaplex",
            "name": "Tema",
            "symbol": "TEMA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CnfshwmvDqLrB1jSLF7bLJ3iZF5u354WRFGPBmGz4uyf",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmetdCtL8pAVu4dHJAbUnBS4MUMSHXBtMyoc6C8Zeqhwwn",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1215805.95",
            "totalSupply": "999995019951909",
            "totalSupplyFormatted": "999995019.951909",
            "links": {
                "telegram": "https://t.me/Tema_TheRaccoon",
                "twitter": "https://x.com/Tema_Raccoon",
                "website": "https://www.temacoin.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/CnfshwmvDqLrB1jSLF7bLJ3iZF5u354WRFGPBmGz4uyf"
            },
            "description": null
        }
    },
    "tensor": {
        "contract_address": "TNSRxcUxoT9xBG3de7PiJyTDYu7kskLqcpddxnEJAS6",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "TNSRxcUxoT9xBG3de7PiJyTDYu7kskLqcpddxnEJAS6",
            "standard": "metaplex",
            "name": "Tensor",
            "symbol": "TNSR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_TNSRxcUxoT9xBG3de7PiJyTDYu7kskLqcpddxnEJAS6",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://arweave.net/ZgmUJiwoRnSpM54FSI_ja_e1c7_AiKzXEVTrcfO6t3A",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7rtye8syTEK4W8omFkUiyUcj2MPFRUTq7yuczc7jNZZS",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "417071188.84",
            "totalSupply": "999998899095918516",
            "totalSupplyFormatted": "999998899.095918516",
            "links": {
                "discord": "https://discord.gg/tensor",
                "github": "https://github.com/tensor-foundation",
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/tensorfdn",
                "website": "https://www.tensor.foundation",
                "moralis": "https://moralis.com/chain/solana/token/price/TNSRxcUxoT9xBG3de7PiJyTDYu7kskLqcpddxnEJAS6"
            },
            "description": null
        }
    },
    "tensorium": {
        "contract_address": "HHoXk7WursT9DLBBhHzBWBbuQkfvvoNyHKpJi61mpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HHoXk7WursT9DLBBhHzBWBbuQkfvvoNyHKpJi61mpump",
            "standard": "metaplex",
            "name": "Tensorium",
            "symbol": "TNSR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HHoXk7WursT9DLBBhHzBWBbuQkfvvoNyHKpJi61mpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVPjcLoH3LAt1T4QyfKpeiqtEYUMshp4LNddXsWuDtLyJ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "871126.81",
            "totalSupply": "999982563995244",
            "totalSupplyFormatted": "999982563.995244",
            "links": {
                "github": "https://github.com/TensoriumAi",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/AgentHustle",
                "twitter": "https://twitter.com/AgentHustleAI",
                "website": "https://agenthustle.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/HHoXk7WursT9DLBBhHzBWBbuQkfvvoNyHKpJi61mpump"
            },
            "description": null
        }
    },
    "terminal-of-fun": {
        "contract_address": "9MnKTgwFyXJgnZumHGT9NdHuzm98ACjkNwpLniLhpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9MnKTgwFyXJgnZumHGT9NdHuzm98ACjkNwpLniLhpump",
            "standard": "metaplex",
            "name": "terminal of fun",
            "symbol": "fun",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9MnKTgwFyXJgnZumHGT9NdHuzm98ACjkNwpLniLhpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQXGky8XnXZp9v4ZDzjer7FYiJ1wkCC3BVyHFPt2psQss",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "42362.23",
            "totalSupply": "964619403503726",
            "totalSupplyFormatted": "964619403.503726",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/terminal_of_fun",
                "website": "https://terminalof.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/9MnKTgwFyXJgnZumHGT9NdHuzm98ACjkNwpLniLhpump"
            },
            "description": null
        }
    },
    "tetsuo-coin": {
        "contract_address": "8i51XNNpGaKaj4G4nDdmQh95v4FKAxw8mhtaRoKd9tE8",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8i51XNNpGaKaj4G4nDdmQh95v4FKAxw8mhtaRoKd9tE8",
            "standard": "metaplex",
            "name": "Tetsuo Coin",
            "symbol": "TETSUO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8i51XNNpGaKaj4G4nDdmQh95v4FKAxw8mhtaRoKd9tE8",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVP9DG2L1jVrh8xnTizzfvw1jf6aptdMw4cc14sa2Vd3Q",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2475611.40",
            "totalSupply": "999985618522651",
            "totalSupplyFormatted": "999985618.522651",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/7etsuo",
                "website": "https://www.c-asm.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/8i51XNNpGaKaj4G4nDdmQh95v4FKAxw8mhtaRoKd9tE8"
            },
            "description": null
        }
    },
    "tgmetrics": {
        "contract_address": "8tdzC7mFKhmfPg3KdSBafHqH7jgi3CvKomfj3Hhupump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8tdzC7mFKhmfPg3KdSBafHqH7jgi3CvKomfj3Hhupump",
            "standard": "metaplex",
            "name": "TgMetrics",
            "symbol": "TgMetrics",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8tdzC7mFKhmfPg3KdSBafHqH7jgi3CvKomfj3Hhupump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmfVQJs1p7bvfA9ZbUKT3587NGxpnHPpgyDdauKtAE3D3c",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "692473.21",
            "totalSupply": "999816930050245",
            "totalSupplyFormatted": "999816930.050245",
            "links": {
                "github": "https://github.com/louiscrypto",
                "telegram": "https://t.me/TgMetrics_Portal",
                "twitter": "https://twitter.com/tgmetrics",
                "website": "https://tgmetrics.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/8tdzC7mFKhmfPg3KdSBafHqH7jgi3CvKomfj3Hhupump"
            },
            "description": null
        }
    },
    "thales-ai": {
        "contract_address": "7yn2PRbB96TgcCkkMK4zD6vvMth6Co5B5Nma6XvPpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7yn2PRbB96TgcCkkMK4zD6vvMth6Co5B5Nma6XvPpump",
            "standard": "metaplex",
            "name": "Thales",
            "symbol": "Thales",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7yn2PRbB96TgcCkkMK4zD6vvMth6Co5B5Nma6XvPpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmXGHsyPcuS3HnTrU5xBsQq44C5w3bQNhB4Hefy6mnK2cd",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1842815.92",
            "totalSupply": "999814404676503",
            "totalSupplyFormatted": "999814404.676503",
            "links": {
                "telegram": "https://t.me/thales_ai16z",
                "twitter": "https://twitter.com/Thales_ai",
                "website": "https://thalesai.net/home",
                "moralis": "https://moralis.com/chain/solana/token/price/7yn2PRbB96TgcCkkMK4zD6vvMth6Co5B5Nma6XvPpump"
            },
            "description": null
        }
    },
    "the-blinking-ai-cat-catfather": {
        "contract_address": "7uCHQdxAz2ojRgEpXRHas1nJAeTTo9b7JWNgpXXi9D9p",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7uCHQdxAz2ojRgEpXRHas1nJAeTTo9b7JWNgpXXi9D9p",
            "standard": "metaplex",
            "name": "The Blinking AI Cat - Catfather",
            "symbol": "CATF",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7uCHQdxAz2ojRgEpXRHas1nJAeTTo9b7JWNgpXXi9D9p",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbLKHPwo4AuKNyBeBfXtyrd3oGvFyMPHRokWduuNAxS3F",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "428371.10",
            "totalSupply": "987580862424333",
            "totalSupplyFormatted": "987580862.424333",
            "links": {
                "telegram": "https://t.me/TheblinkingcatF",
                "twitter": "https://twitter.com/theblinkingcat",
                "website": "https://blinkgenerator.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/7uCHQdxAz2ojRgEpXRHas1nJAeTTo9b7JWNgpXXi9D9p"
            },
            "description": null
        }
    },
    "the-cat-is-blue": {
        "contract_address": "Fzo4d3toWjH7aFioUaMWWDNkmGh1BbHKSWAgXpHb2pf4",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Fzo4d3toWjH7aFioUaMWWDNkmGh1BbHKSWAgXpHb2pf4",
            "standard": "metaplex",
            "name": "The Cat Is BLUE",
            "symbol": "BLUE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Fzo4d3toWjH7aFioUaMWWDNkmGh1BbHKSWAgXpHb2pf4",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafkreifystsul4rvq5tvttztyqv346hvqokusndunbwkrumvz343r7plqa.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BnJZb9JFUARSPHzG2Vf1rJLqC7FY5ffGDjNE5JbJWp2K",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3163.01",
            "totalSupply": "498582710229255",
            "totalSupplyFormatted": "498582710.229255",
            "links": {
                "telegram": "https://t.me/catisblue",
                "twitter": "https://twitter.com/CatIsBlue_",
                "website": "https://www.catisblue.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/Fzo4d3toWjH7aFioUaMWWDNkmGh1BbHKSWAgXpHb2pf4"
            },
            "description": null
        }
    },
    "the-first-meme": {
        "contract_address": "Bg4M3QWtpi416fb1njZrXBmusBNav1XsDRc6izxXpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Bg4M3QWtpi416fb1njZrXBmusBNav1XsDRc6izxXpump",
            "standard": "metaplex",
            "name": "The First Meme",
            "symbol": "FIRST",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Bg4M3QWtpi416fb1njZrXBmusBNav1XsDRc6izxXpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmcKdjNGqQa1FoeTykmjrkSyWubkmZVeNW9sFHnPJKVmsk",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "518563.27",
            "totalSupply": "999988948313047",
            "totalSupplyFormatted": "999988948.313047",
            "links": {
                "telegram": "https://t.me/StraightUpFirst",
                "twitter": "https://twitter.com/StraightUpFirst",
                "website": "https://thefirst.meme",
                "moralis": "https://moralis.com/chain/solana/token/price/Bg4M3QWtpi416fb1njZrXBmusBNav1XsDRc6izxXpump"
            },
            "description": null
        }
    },
    "the-last-play": {
        "contract_address": "zGh48JtNHVBb5evgoZLXwgPD2Qu4MhkWdJLGDAupump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "zGh48JtNHVBb5evgoZLXwgPD2Qu4MhkWdJLGDAupump",
            "standard": "metaplex",
            "name": "The Last Play",
            "symbol": "retire",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_zGh48JtNHVBb5evgoZLXwgPD2Qu4MhkWdJLGDAupump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmfGS7XmDe1oZSHr4eNYiSyvqowgrsQgXzARWchvUVWwy3",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1263521.92",
            "totalSupply": "999851168413496",
            "totalSupplyFormatted": "999851168.413496",
            "links": {
                "telegram": "https://t.me/retireportal",
                "twitter": "https://twitter.com/thelastplaysol",
                "website": "https://x.com/i/communities/1852918705610534962",
                "moralis": "https://moralis.com/chain/solana/token/price/zGh48JtNHVBb5evgoZLXwgPD2Qu4MhkWdJLGDAupump"
            },
            "description": null
        }
    },
    "the-lokie-cabal": {
        "contract_address": "2URzn4j6SYXUQVZ8DqxsrSVPbpNP8xRQPbGBLtm1BV47",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2URzn4j6SYXUQVZ8DqxsrSVPbpNP8xRQPbGBLtm1BV47",
            "standard": "metaplex",
            "name": "The Lokie Cabal",
            "symbol": "CABAL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2URzn4j6SYXUQVZ8DqxsrSVPbpNP8xRQPbGBLtm1BV47",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWjF3Qu9rdggaDojRmp8TCeHzcV4NeTMKJCPEjhrt8KBC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2377506.73",
            "totalSupply": "999993999391892",
            "totalSupplyFormatted": "999993999.391892",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/2URzn4j6SYXUQVZ8DqxsrSVPbpNP8xRQPbGBLtm1BV47"
            },
            "description": null
        }
    },
    "the-new-genesis": {
        "contract_address": "9S9fB8R5fhXN9jnXPNJtDXgfPjXBJhoAEMhJojP5pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9S9fB8R5fhXN9jnXPNJtDXgfPjXBJhoAEMhJojP5pump",
            "standard": "metaplex",
            "name": "The New Genesis",
            "symbol": "gen",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9S9fB8R5fhXN9jnXPNJtDXgfPjXBJhoAEMhJojP5pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVMJVaATbfQoL31zxw1fhoipLwPATcdG2yvQ7UXeNZxzz",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "8419.54",
            "totalSupply": "959820204287451",
            "totalSupplyFormatted": "959820204.287451",
            "links": {
                "telegram": "https://t.me/thenewgenesisaichannel",
                "twitter": "https://twitter.com/TheNewGenesisAi",
                "website": "https://www.thenewgenesis.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/9S9fB8R5fhXN9jnXPNJtDXgfPjXBJhoAEMhJojP5pump"
            },
            "description": null
        }
    },
    "the-nutting-professor": {
        "contract_address": "DHkguUzSuKRAZQTQ394tfQpa8CqrFoKSGggBr7XsawJr",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DHkguUzSuKRAZQTQ394tfQpa8CqrFoKSGggBr7XsawJr",
            "standard": "metaplex",
            "name": "The Nutting Professor",
            "symbol": "PRONUT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DHkguUzSuKRAZQTQ394tfQpa8CqrFoKSGggBr7XsawJr",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cdn.dexscreener.com/cms/tokens/metadata/DLGtku4lrMKZnR7YY7df",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "11111111111111111111111111111111",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "700757.40",
            "totalSupply": "994652282156009304",
            "totalSupplyFormatted": "994652282.156009304",
            "links": {
                "telegram": "https://t.me/PRONUTSOL",
                "twitter": "https://x.com/PRONUTSOL",
                "website": "https://mymemes.ai/pronut",
                "moralis": "https://moralis.com/chain/solana/token/price/DHkguUzSuKRAZQTQ394tfQpa8CqrFoKSGggBr7XsawJr"
            },
            "description": null
        }
    },
    "the-professor": {
        "contract_address": "2Pp6ebUvEL9YRTauUTmGTwYZKRfyQXGM9jE4S8WPDtEy",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2Pp6ebUvEL9YRTauUTmGTwYZKRfyQXGM9jE4S8WPDtEy",
            "standard": "metaplex",
            "name": "The Professor ",
            "symbol": "LAB",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2Pp6ebUvEL9YRTauUTmGTwYZKRfyQXGM9jE4S8WPDtEy",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmdjrTEuRjDV6765AuBL282gtWxGhewK1TCDnSuaMG4A7H",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "421135.08",
            "totalSupply": "999947947096634",
            "totalSupplyFormatted": "999947947.096634",
            "links": {
                "email": "professor@madlabsol.io",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+Vexu8jfxJpYxYmIx",
                "twitter": "https://twitter.com/Madlabsolana",
                "website": "https://madlabsol.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/2Pp6ebUvEL9YRTauUTmGTwYZKRfyQXGM9jE4S8WPDtEy"
            },
            "description": null
        }
    },
    "the-real-landwolf": {
        "contract_address": "Faf89929Ni9fbg4gmVZTca7eW6NFg877Jqn6MizT3Gvw",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Faf89929Ni9fbg4gmVZTca7eW6NFg877Jqn6MizT3Gvw",
            "standard": "metaplex",
            "name": "LandWolf",
            "symbol": "WOLF",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Faf89929Ni9fbg4gmVZTca7eW6NFg877Jqn6MizT3Gvw",
            "decimals": "8",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/WL_G166T-u5m6kO7AGdvsNr-2kNSlLqFFIJvIBWdG9M",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "GPFzm8qZ3oJGmyzKQV8A67k99yBZbcHi5btTfy7NkCwb",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "1930390.16",
            "totalSupply": "999963821411932404",
            "totalSupplyFormatted": "9999638214.11932404",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/LandWolfSolPortal",
                "twitter": "https://x.com/TheBoysClubWolf",
                "website": "https://solanaslandwolf.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/Faf89929Ni9fbg4gmVZTca7eW6NFg877Jqn6MizT3Gvw"
            },
            "description": null
        }
    },
    "the-soldog": {
        "contract_address": "Euoq6CyQFCjCVSLR9wFaUPDW19Y6ZHwEcJoZsEi643i1",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Euoq6CyQFCjCVSLR9wFaUPDW19Y6ZHwEcJoZsEi643i1",
            "standard": "metaplex",
            "name": "LAIKA",
            "symbol": "LAIKA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Euoq6CyQFCjCVSLR9wFaUPDW19Y6ZHwEcJoZsEi643i1",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/_9bzPHN7_ojfqSzoyBslJdAHECW44OhlKf5vip_FzfM",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7UyfgpAeFLDaq7nrK2Y4LgoXGcnrx32TQrJ3r1BPs3EV",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5213994.39",
            "totalSupply": "999998924375013924",
            "totalSupplyFormatted": "999998924375.013924",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Euoq6CyQFCjCVSLR9wFaUPDW19Y6ZHwEcJoZsEi643i1"
            },
            "description": null
        }
    },
    "the1": {
        "contract_address": "BhmEQeiFd8Cu5fB6nmxm9rUsQj9Pu35X96RKv6GKtRJU",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BhmEQeiFd8Cu5fB6nmxm9rUsQj9Pu35X96RKv6GKtRJU",
            "standard": "metaplex",
            "name": "THE 1",
            "symbol": "THE1",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BhmEQeiFd8Cu5fB6nmxm9rUsQj9Pu35X96RKv6GKtRJU",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmbq2XSwDD41W4ZBoaxufFxSxD2iXYiLfEx7zGATvcdZoW",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "768162.53",
            "totalSupply": "999994185400301",
            "totalSupplyFormatted": "999994185.400301",
            "links": {
                "telegram": "https://t.me/the1life",
                "twitter": "https://twitter.com/the1aiagent",
                "website": "https://the1.life/",
                "moralis": "https://moralis.com/chain/solana/token/price/BhmEQeiFd8Cu5fB6nmxm9rUsQj9Pu35X96RKv6GKtRJU"
            },
            "description": null
        }
    },
    "thecat": {
        "contract_address": "DRTeDJXZYYZxmq3tmgSPvLi3ef5E51cRH1KzzwXvC5M7",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DRTeDJXZYYZxmq3tmgSPvLi3ef5E51cRH1KzzwXvC5M7",
            "standard": "metaplex",
            "name": "THECAT",
            "symbol": "THECAT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DRTeDJXZYYZxmq3tmgSPvLi3ef5E51cRH1KzzwXvC5M7",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/IeAXHyN5QrWKoEKGqkNrH_FNlvF-b3Fbg9iXPdBkdWk",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5Uxr5sAhrv53rYP5QJ8UP4Fe53dVA7May5PVyZJCYWD1",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "379478.19",
            "totalSupply": "790413248752718",
            "totalSupplyFormatted": "790413248.752718",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/DRTeDJXZYYZxmq3tmgSPvLi3ef5E51cRH1KzzwXvC5M7"
            },
            "description": null
        }
    },
    "thumb": {
        "contract_address": "BdNKUUo8vnvdhwi1Ejn4PXNfeeQF2374hCK3m91ppump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BdNKUUo8vnvdhwi1Ejn4PXNfeeQF2374hCK3m91ppump",
            "standard": "metaplex",
            "name": "thumb",
            "symbol": "thumb",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BdNKUUo8vnvdhwi1Ejn4PXNfeeQF2374hCK3m91ppump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmRzuXnn6PfBKwA2Ghz9Uuex6uJnTpvmWSeazrM8idN2yd",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "284428.96",
            "totalSupply": "206895492498355",
            "totalSupplyFormatted": "206895492.498355",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/+DaKmbVXV6kcxNTU8",
                "twitter": "https://x.com/thumbinghard",
                "website": "https://thumb.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/BdNKUUo8vnvdhwi1Ejn4PXNfeeQF2374hCK3m91ppump"
            },
            "description": null
        }
    },
    "time": {
        "contract_address": "ED5wbeyAYtLM4WRGnohPxJEwniaikEFioVmJyZH6K31m",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ED5wbeyAYtLM4WRGnohPxJEwniaikEFioVmJyZH6K31m",
            "standard": "metaplex",
            "name": "TIME",
            "symbol": "$TIME",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ED5wbeyAYtLM4WRGnohPxJEwniaikEFioVmJyZH6K31m",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/ET2Ev3KSsfuCn1Ob_7qsMGLcB16iEw2RHJZ5N47A3VY",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AB7DCC6VRJ7MwLJW3Ns8KRxBS65ico75tLSq2UQSDRYP",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "270539.16",
            "totalSupply": "465643984900583010",
            "totalSupplyFormatted": "465643984900.58301",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/ED5wbeyAYtLM4WRGnohPxJEwniaikEFioVmJyZH6K31m"
            },
            "description": null
        }
    },
    "tired-dad": {
        "contract_address": "5ZMUboLJUeneKouqrqu4jeLE68vX68ehE5qprV3Upump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5ZMUboLJUeneKouqrqu4jeLE68vX68ehE5qprV3Upump",
            "standard": "metaplex",
            "name": "Tired Dad",
            "symbol": "TIRED",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5ZMUboLJUeneKouqrqu4jeLE68vX68ehE5qprV3Upump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmTJCBiniRG5ApJ5mfBAdTHxsQrHM3vUD5n6Rf6jb8C7ed",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "522064.50",
            "totalSupply": "999826686322292",
            "totalSupplyFormatted": "999826686.322292",
            "links": {
                "telegram": "https://t.me/+Pa5jkHAAlmdjMGVh",
                "tiktok": "https://www.tiktok.com/@tired_dadz",
                "twitter": "https://x.com/tired_dad_onsol",
                "website": "https://tireddadcoin.com/",
                "youtube": "https://www.youtube.com/c/Tired_Dadz",
                "moralis": "https://moralis.com/chain/solana/token/price/5ZMUboLJUeneKouqrqu4jeLE68vX68ehE5qprV3Upump"
            },
            "description": null
        }
    },
    "tmpl": {
        "contract_address": "2Upvxdxu6gLELdjg1asMRgpDt322y2wcXNxnvVWoFHSa",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2Upvxdxu6gLELdjg1asMRgpDt322y2wcXNxnvVWoFHSa",
            "standard": "metaplex",
            "name": "TMPL",
            "symbol": "TMPL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2Upvxdxu6gLELdjg1asMRgpDt322y2wcXNxnvVWoFHSa",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://bafkreif2yz3vtsam76p22pcg6wf73merglh4c26bkzcs6o7jiqpsqsfj2y.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9gxGPAjoThh49RDQSwftL6ehkVEoGWZW68GbMHeuESs8",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "17779.88",
            "totalSupply": "999993340151064",
            "totalSupplyFormatted": "9999933401.51064",
            "links": {
                "email": "hey@lulax.xyz",
                "discord": "https://discord.com/invite/templepharmacy",
                "instagram": "https://www.instagram.com/temple.pharmacy/",
                "telegram": "https://t.me/TemplePharmacyPortal",
                "twitter": "https://x.com/TemplePharmacy_",
                "website": "https://www.lulax.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/2Upvxdxu6gLELdjg1asMRgpDt322y2wcXNxnvVWoFHSa"
            },
            "description": null
        }
    },
    "toad-sol": {
        "contract_address": "FViMp5phQH2bX81S7Yyn1yXjj3BRddFBNcMCbTH8FCze",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FViMp5phQH2bX81S7Yyn1yXjj3BRddFBNcMCbTH8FCze",
            "standard": "metaplex",
            "name": "Toad",
            "symbol": "$TOAD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FViMp5phQH2bX81S7Yyn1yXjj3BRddFBNcMCbTH8FCze",
            "decimals": "4",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/nvZ-WHccKme3SNvORdwJCordVmM01D8gdmmutIzn1Sg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "4LuQpX2uUAH4q3ukaWDiH9E6pSqTx3TypReDMHTgaHGg",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "859638.46",
            "totalSupply": "4205050448402198360",
            "totalSupplyFormatted": "420505044840219.836",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/FViMp5phQH2bX81S7Yyn1yXjj3BRddFBNcMCbTH8FCze"
            },
            "description": null
        }
    },
    "tobi": {
        "contract_address": "HPueqQjSgaSatMBKrvBvAnRmc6jnr51cPM1EjUJVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HPueqQjSgaSatMBKrvBvAnRmc6jnr51cPM1EjUJVpump",
            "standard": "metaplex",
            "name": "tobi",
            "symbol": "tobi ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HPueqQjSgaSatMBKrvBvAnRmc6jnr51cPM1EjUJVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVnmqsMtq6NJt2SZQvEiAbPQ8F7zwBHGufbYpv6ifCz74",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "278401.70",
            "totalSupply": "998711089295984",
            "totalSupplyFormatted": "998711089.295984",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/HPueqQjSgaSatMBKrvBvAnRmc6jnr51cPM1EjUJVpump"
            },
            "description": null
        }
    },
    "tooker-kurlson": {
        "contract_address": "9EYScpiysGnEimnQPzazr7Jn9GVfxFYzgTEj85hV9L6U",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9EYScpiysGnEimnQPzazr7Jn9GVfxFYzgTEj85hV9L6U",
            "standard": "metaplex",
            "name": "tooker kurlson",
            "symbol": "tooker",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9EYScpiysGnEimnQPzazr7Jn9GVfxFYzgTEj85hV9L6U",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreiba5qh6u2fagtq4umtw6f3whwhwxmd54jevbkbvveg6qy5v2gcqyq.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AzKqmCn9rDpvLqw6ccAAz3uBaQMzqu3qqeb6VDx7Lz3r",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "612669.87",
            "totalSupply": "970879893601497249",
            "totalSupplyFormatted": "970879893.601497249",
            "links": {
                "email": "tookerkurlson@yahoo.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/TookerKurlson",
                "twitter": "https://twitter.com/tookerkurlson",
                "website": "https://www.tookerkurlson.com/",
                "youtube": "https://www.youtube.com/@tookerkurlson",
                "moralis": "https://moralis.com/chain/solana/token/price/9EYScpiysGnEimnQPzazr7Jn9GVfxFYzgTEj85hV9L6U"
            },
            "description": null
        }
    },
    "top-g": {
        "contract_address": "8NH3AfwkizHmbVd83SSxc2YbsFmFL4m2BeepvL6upump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8NH3AfwkizHmbVd83SSxc2YbsFmFL4m2BeepvL6upump",
            "standard": "metaplex",
            "name": "TOP G",
            "symbol": "TOPG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8NH3AfwkizHmbVd83SSxc2YbsFmFL4m2BeepvL6upump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmTPL9NuDTP2isYgHGJf9himy4oMCxjxJGWBpB6Pm5ftWo",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "109723.95",
            "totalSupply": "411944722105452",
            "totalSupplyFormatted": "411944722.105452",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8NH3AfwkizHmbVd83SSxc2YbsFmFL4m2BeepvL6upump"
            },
            "description": null
        }
    },
    "top-hat": {
        "contract_address": "AxGAbdFtdbj2oNXa4dKqFvwHzgFtW9mFHWmd7vQfpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AxGAbdFtdbj2oNXa4dKqFvwHzgFtW9mFHWmd7vQfpump",
            "standard": "metaplex",
            "name": "TOP HAT",
            "symbol": "HAT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AxGAbdFtdbj2oNXa4dKqFvwHzgFtW9mFHWmd7vQfpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmRGP81WsfLPtw4VaExcsJr2sE2P1qftuiszQx5aHBwce6",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6913437.62",
            "totalSupply": "989996501082093",
            "totalSupplyFormatted": "989996501.082093",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/tophatwizards",
                "twitter": "https://twitter.com/TopHat_One",
                "website": "https://tophat.one",
                "moralis": "https://moralis.com/chain/solana/token/price/AxGAbdFtdbj2oNXa4dKqFvwHzgFtW9mFHWmd7vQfpump"
            },
            "description": null
        }
    },
    "tori-the-cat": {
        "contract_address": "D8F1FvrUhwg8WBjMqABopFYo13WwymGnVhsL3d7dRexP",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "D8F1FvrUhwg8WBjMqABopFYo13WwymGnVhsL3d7dRexP",
            "standard": "metaplex",
            "name": "Tori the Cat",
            "symbol": "TORI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_D8F1FvrUhwg8WBjMqABopFYo13WwymGnVhsL3d7dRexP",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://bafkreibznlkp4impzeodtpxxztd74totjkcogxrza5eshixg6f6brozfs4.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BoMhGUPChPgxeoL9EYHLejhqiXPwbEuV4HYe2jagu7hw",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "292438.21",
            "totalSupply": "99999387216317",
            "totalSupplyFormatted": "999993872.16317",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/tori_token",
                "twitter": "https://twitter.com/tori_solana",
                "website": "https://www.tori.cat/",
                "moralis": "https://moralis.com/chain/solana/token/price/D8F1FvrUhwg8WBjMqABopFYo13WwymGnVhsL3d7dRexP"
            },
            "description": null
        }
    },
    "torsy": {
        "contract_address": "5YqckGEkWHJmp9LW5aUF2uJrdUbMJaHcYnGjA8M7Ebw8",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5YqckGEkWHJmp9LW5aUF2uJrdUbMJaHcYnGjA8M7Ebw8",
            "standard": "metaplex",
            "name": "TORSY",
            "symbol": "TORSY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5YqckGEkWHJmp9LW5aUF2uJrdUbMJaHcYnGjA8M7Ebw8",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://nftstorage.link/ipfs/bafkreifhgmsoyivl67dtgg6rodohr5emec53nnzazfqejrnghipnik3hcq",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "68rNU1zw7KXtjp7Zc4TjvAgvqb866JusgCE8QoEeQKqK",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "534963.75",
            "totalSupply": "637052722107181208",
            "totalSupplyFormatted": "637052722.107181208",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/torsymemecoin",
                "twitter": "https://twitter.com/torsy_torsy",
                "website": "https://torsy.meme/",
                "moralis": "https://moralis.com/chain/solana/token/price/5YqckGEkWHJmp9LW5aUF2uJrdUbMJaHcYnGjA8M7Ebw8"
            },
            "description": null
        }
    },
    "tracyai-by-virtuals": {
        "contract_address": "C1nzFL2DD3Wqc3dzRbsrpb6tiZ6dbYsXubjVtzyHvirt",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "C1nzFL2DD3Wqc3dzRbsrpb6tiZ6dbYsXubjVtzyHvirt",
            "standard": "metaplex",
            "name": "TracyAI by VIRTUALS",
            "symbol": "TRACY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_C1nzFL2DD3Wqc3dzRbsrpb6tiZ6dbYsXubjVtzyHvirt",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://vpmodels-prod.s3.ap-southeast-1.amazonaws.com/virtual-20687/virtual-20687.json",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "7nzLp7mFz9eYfXFFhtXnWVVvsfFYSachzX2fXY7RxnY2",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6686164.78",
            "totalSupply": "999999818164424",
            "totalSupplyFormatted": "999999818.164424",
            "links": {
                "discord": "https://discord.gg/TracyAI",
                "telegram": "https://t.me/HeyTracyAI",
                "twitter": "https://twitter.com/HeyTracyAI",
                "website": "https://tracy.tech/",
                "moralis": "https://moralis.com/chain/solana/token/price/C1nzFL2DD3Wqc3dzRbsrpb6tiZ6dbYsXubjVtzyHvirt"
            },
            "description": null
        }
    },
    "trenchai": {
        "contract_address": "AaWVpk6eZbgBfVbq1UfXw3EXBmAvw4QXov1xHuG7pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "AaWVpk6eZbgBfVbq1UfXw3EXBmAvw4QXov1xHuG7pump",
            "standard": "metaplex",
            "name": "Trenches AI",
            "symbol": "TrenchAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_AaWVpk6eZbgBfVbq1UfXw3EXBmAvw4QXov1xHuG7pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmPgP7cBsJWx7LTXa55VA9ZLvxHQY632maABc7qdBGrAFF",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "455411.24",
            "totalSupply": "999684426073762",
            "totalSupplyFormatted": "999684426.073762",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/Trenchesmembership_bot",
                "twitter": "https://x.com/Trenches_AI_",
                "website": "https://pump.fun/coin/AaWVpk6eZbgBfVbq1UfXw3EXBmAvw4QXov1xHuG7pump",
                "moralis": "https://moralis.com/chain/solana/token/price/AaWVpk6eZbgBfVbq1UfXw3EXBmAvw4QXov1xHuG7pump"
            },
            "description": null
        }
    },
    "trenchbuddy": {
        "contract_address": "GACpABn18xqiSJbD9ZEyArJDT9RHRMUut5nK9Z9Spump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GACpABn18xqiSJbD9ZEyArJDT9RHRMUut5nK9Z9Spump",
            "standard": "metaplex",
            "name": "TrenchBuddy",
            "symbol": "TRENCH",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GACpABn18xqiSJbD9ZEyArJDT9RHRMUut5nK9Z9Spump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQvrFLGfVi96x8DpTSSBJaYyqhQ9nuHHYrPAM4spd6RoW",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1033422.91",
            "totalSupply": "998858409821650",
            "totalSupplyFormatted": "998858409.82165",
            "links": {
                "telegram": "https://t.me/TrenchBuddy",
                "twitter": "https://twitter.com/TrenchBuddy",
                "website": "https://trenchbuddy.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/GACpABn18xqiSJbD9ZEyArJDT9RHRMUut5nK9Z9Spump"
            },
            "description": null
        }
    },
    "tri-sigma": {
        "contract_address": "BLDiYcvm3CLcgZ7XUBPgz6idSAkNmWY6MBbm8Xpjpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BLDiYcvm3CLcgZ7XUBPgz6idSAkNmWY6MBbm8Xpjpump",
            "standard": "metaplex",
            "name": "TRI SIGMA",
            "symbol": "TRISIG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BLDiYcvm3CLcgZ7XUBPgz6idSAkNmWY6MBbm8Xpjpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbqYpHwAQm9w9yYCmfXaqxWx7DBcirKmmTnhX73iJ6Sjj",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "4520637.53",
            "totalSupply": "999932653871161",
            "totalSupplyFormatted": "999932653.871161",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/tri_sigma_",
                "website": "https://trisigma.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/BLDiYcvm3CLcgZ7XUBPgz6idSAkNmWY6MBbm8Xpjpump"
            },
            "description": null
        }
    },
    "triad": {
        "contract_address": "t3DohmswhKk94PPbPYwA6ZKACyY3y5kbcqeQerAJjmV",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "t3DohmswhKk94PPbPYwA6ZKACyY3y5kbcqeQerAJjmV",
            "standard": "metaplex",
            "name": "Triad",
            "symbol": "TRD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_t3DohmswhKk94PPbPYwA6ZKACyY3y5kbcqeQerAJjmV",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1336366.63",
            "totalSupply": "17527945465795",
            "totalSupplyFormatted": "17527945.465795",
            "links": {
                "discord": "https://discord.com/invite/triadfi",
                "github": "https://github.com/triadxyz",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/triad369",
                "twitter": "https://twitter.com/triadfi",
                "website": "https://www.triadfi.co/",
                "moralis": "https://moralis.com/chain/solana/token/price/t3DohmswhKk94PPbPYwA6ZKACyY3y5kbcqeQerAJjmV"
            },
            "description": null
        }
    },
    "trump-ai-2": {
        "contract_address": "8JRGk7mm55oU2iqDExoKa3MYS2ma8iSurzho8iojpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8JRGk7mm55oU2iqDExoKa3MYS2ma8iSurzho8iojpump",
            "standard": "metaplex",
            "name": "Trump AI",
            "symbol": "TRUMPAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8JRGk7mm55oU2iqDExoKa3MYS2ma8iSurzho8iojpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmVutgfXEgxXgyMJER2X3NVsB47szFrVVBN7PVTiojpmW4",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "368935.18",
            "totalSupply": "999989638084618",
            "totalSupplyFormatted": "999989638.084618",
            "links": {
                "telegram": "https://t.me/TalktoTrumpAI",
                "twitter": "https://twitter.com/Talk_to_trump",
                "website": "https://talktotrump.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/8JRGk7mm55oU2iqDExoKa3MYS2ma8iSurzho8iojpump"
            },
            "description": null
        }
    },
    "trump-s-golden-bull": {
        "contract_address": "3nGc7DR6jE41W2iLfvPC3ctPEPzhqAMWuvZRKXNLpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3nGc7DR6jE41W2iLfvPC3ctPEPzhqAMWuvZRKXNLpump",
            "standard": "metaplex",
            "name": "Trump's Golden Bull",
            "symbol": "BULL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3nGc7DR6jE41W2iLfvPC3ctPEPzhqAMWuvZRKXNLpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWGYCcVAUocbLw1o5TQkQv4eMs9T19dop3pXcwGrGBAUS",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "55307.94",
            "totalSupply": "998825102116481",
            "totalSupplyFormatted": "998825102.116481",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/trumpbullcto2",
                "twitter": "https://twitter.com/trumpgoldenbull",
                "website": "https://trumpsgoldenbull.com",
                "moralis": "https://moralis.com/chain/solana/token/price/3nGc7DR6jE41W2iLfvPC3ctPEPzhqAMWuvZRKXNLpump"
            },
            "description": null
        }
    },
    "trust-the-process": {
        "contract_address": "EqeEBGHQhQy6SqeaJcnqAsNs3qaG19sdF89Xsarpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EqeEBGHQhQy6SqeaJcnqAsNs3qaG19sdF89Xsarpump",
            "standard": "metaplex",
            "name": "Trust The Process",
            "symbol": "TRUST",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EqeEBGHQhQy6SqeaJcnqAsNs3qaG19sdF89Xsarpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmdPRXTmbyYazeigu3GFheScA6YSpG51KcWEYC8Ym3nRwT",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1363554.08",
            "totalSupply": "999765436397348",
            "totalSupplyFormatted": "999765436.397348",
            "links": {
                "telegram": "https://t.me/trust_the_coin",
                "twitter": "https://x.com/trust_solana",
                "website": "https://www.trust.frl/",
                "moralis": "https://moralis.com/chain/solana/token/price/EqeEBGHQhQy6SqeaJcnqAsNs3qaG19sdF89Xsarpump"
            },
            "description": null
        }
    },
    "truthchain": {
        "contract_address": "2GmUPhpe93kcTJZrC7NJ2keeDZRT5dBveUgegb13pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "2GmUPhpe93kcTJZrC7NJ2keeDZRT5dBveUgegb13pump",
            "standard": "metaplex",
            "name": "TruthChain",
            "symbol": "truth",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_2GmUPhpe93kcTJZrC7NJ2keeDZRT5dBveUgegb13pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmc44PrgsHJGfdn6iigDKbYBnVW1JsRDzYafo2bgtqHVCN",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "299059.53",
            "totalSupply": "999881414911682",
            "totalSupplyFormatted": "999881414.911682",
            "links": {
                "email": "rex@taroko.technology",
                "telegram": "https://t.me/truth_chain",
                "twitter": "https://x.com/truthchain",
                "website": "https://www.verafy.ai",
                "moralis": "https://moralis.com/chain/solana/token/price/2GmUPhpe93kcTJZrC7NJ2keeDZRT5dBveUgegb13pump"
            },
            "description": null
        }
    },
    "tsotchke": {
        "contract_address": "4mbdysBik3jmzD7mt6FGPDsMxnYcxExSQRFjPucdpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4mbdysBik3jmzD7mt6FGPDsMxnYcxExSQRFjPucdpump",
            "standard": "metaplex",
            "name": "tsotchke",
            "symbol": "TSOTCHKE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4mbdysBik3jmzD7mt6FGPDsMxnYcxExSQRFjPucdpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQAqHbxas1Tme8buDM75rugscSGB9TAFepMYBrpWXZEfs",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6412801.90",
            "totalSupply": "999983455097135",
            "totalSupplyFormatted": "999983455.097135",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/tsotchkecoinOFFICIAL",
                "twitter": "https://twitter.com/tsotchkecoin",
                "website": "https://github.com/tsotchke/spin_based_neural_network",
                "moralis": "https://moralis.com/chain/solana/token/price/4mbdysBik3jmzD7mt6FGPDsMxnYcxExSQRFjPucdpump"
            },
            "description": null
        }
    },
    "tsuki": {
        "contract_address": "463SK47VkB7uE7XenTHKiVcMtxRsfNE2X4Q9wByaURVA",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "463SK47VkB7uE7XenTHKiVcMtxRsfNE2X4Q9wByaURVA",
            "standard": "metaplex",
            "name": "Tsuki",
            "symbol": "TSUKI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_463SK47VkB7uE7XenTHKiVcMtxRsfNE2X4Q9wByaURVA",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcCW4muuv8ZtiUvJisfkqCgaXm2Xx6fu8MxMa16stnzDX",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BnMVjL7wY1GXa4EDBT33efk677A4Uny6AhxAXxxaYxzx",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1197528.86",
            "totalSupply": "949251248440859808",
            "totalSupplyFormatted": "949251248.440859808",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/463SK47VkB7uE7XenTHKiVcMtxRsfNE2X4Q9wByaURVA"
            },
            "description": null
        }
    },
    "ugly-dog": {
        "contract_address": "74Rq6Bmckiq8qvARhdqxPfQtkQsxsqVKCbDQL5PKpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "74Rq6Bmckiq8qvARhdqxPfQtkQsxsqVKCbDQL5PKpump",
            "standard": "metaplex",
            "name": "Ugly Dog",
            "symbol": "$UGLYDOG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_74Rq6Bmckiq8qvARhdqxPfQtkQsxsqVKCbDQL5PKpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmZzpD3R8JZYkcW8wzv9XbxxdhQuL9iuiELZqmt5FLn8AE",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "408479.43",
            "totalSupply": "999927611037269",
            "totalSupplyFormatted": "999927611.037269",
            "links": {
                "telegram": "https://t.me/uglydogtokenofficial",
                "twitter": "https://twitter.com/UglyDogMeme",
                "website": "https://uglydog.meme",
                "moralis": "https://moralis.com/chain/solana/token/price/74Rq6Bmckiq8qvARhdqxPfQtkQsxsqVKCbDQL5PKpump"
            },
            "description": null
        }
    },
    "ume": {
        "contract_address": "3gV3t7Y9zsd7wNjGXXukn2RT81vfH46hA3oEcHgVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3gV3t7Y9zsd7wNjGXXukn2RT81vfH46hA3oEcHgVpump",
            "standard": "metaplex",
            "name": "Ume",
            "symbol": "Ume",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3gV3t7Y9zsd7wNjGXXukn2RT81vfH46hA3oEcHgVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWPAasX68WgF1bDJYvKx5EN74kGvw7b31UyNJNhjtxbAr",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "502899.92",
            "totalSupply": "999902422694190",
            "totalSupplyFormatted": "999902422.69419",
            "links": {
                "telegram": "https://t.me/UMEonSOL",
                "twitter": "https://twitter.com/UmeTapir",
                "website": "https://umeonsol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/3gV3t7Y9zsd7wNjGXXukn2RT81vfH46hA3oEcHgVpump"
            },
            "description": null
        }
    },
    "unfk": {
        "contract_address": "8MgghUHzWyCXSQb4ReqrYQZ9rL8cQNaZ84GsqWhTB4Uu",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8MgghUHzWyCXSQb4ReqrYQZ9rL8cQNaZ84GsqWhTB4Uu",
            "standard": "metaplex",
            "name": "UNFK",
            "symbol": "$UNFK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8MgghUHzWyCXSQb4ReqrYQZ9rL8cQNaZ84GsqWhTB4Uu",
            "decimals": "1",
            "metaplex": {
                "metadataUri": "https://arweave.net/iAA12U4YcP6PgYlRty8jiKkZoWij9W-J6jru2om7fzE",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5uG2TsXspUpXkkABnmm7mDeUhb65DiNFnB4oADnKardQ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1666138.66",
            "totalSupply": "899997653811091",
            "totalSupplyFormatted": "89999765381109.1",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8MgghUHzWyCXSQb4ReqrYQZ9rL8cQNaZ84GsqWhTB4Uu"
            },
            "description": null
        }
    },
    "unicorn-fart-dust": {
        "contract_address": "eL5fUxj2J4CiQsmW85k5FG9DvuQjjUoBHoQBi2Kpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "eL5fUxj2J4CiQsmW85k5FG9DvuQjjUoBHoQBi2Kpump",
            "standard": "metaplex",
            "name": "Unicorn Fart Dust",
            "symbol": "UFD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_eL5fUxj2J4CiQsmW85k5FG9DvuQjjUoBHoQBi2Kpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSwEpRo9SRsPaFfrD65drLbusGLMY6ewRevWXF4JcWKTv",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "67522294.03",
            "totalSupply": "999983487603236",
            "totalSupplyFormatted": "999983487.603236",
            "links": {
                "twitter": "https://twitter.com/BasementRon",
                "website": "https://unicornfartdust.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/eL5fUxj2J4CiQsmW85k5FG9DvuQjjUoBHoQBi2Kpump"
            },
            "description": null
        }
    },
    "universal-basic-compute": {
        "contract_address": "9psiRdn9cXYVps4F1kFuoNjd2EtmqNJXrCPmRppJpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9psiRdn9cXYVps4F1kFuoNjd2EtmqNJXrCPmRppJpump",
            "standard": "metaplex",
            "name": "Universal Basic Compute",
            "symbol": "UBC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9psiRdn9cXYVps4F1kFuoNjd2EtmqNJXrCPmRppJpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQ3yn4gXcWYc5imT8jzJUweNxTCDMpPEZ1x7DnR7DPgEz",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1426825.14",
            "totalSupply": "999986078235807",
            "totalSupplyFormatted": "999986078.235807",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/9psiRdn9cXYVps4F1kFuoNjd2EtmqNJXrCPmRppJpump"
            },
            "description": null
        }
    },
    "universal-operating-system": {
        "contract_address": "79HZeHkX9A5WfBg72ankd1ppTXGepoSGpmkxW63wsrHY",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "79HZeHkX9A5WfBg72ankd1ppTXGepoSGpmkxW63wsrHY",
            "standard": "metaplex",
            "name": "Universal Operating System",
            "symbol": "UOS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_79HZeHkX9A5WfBg72ankd1ppTXGepoSGpmkxW63wsrHY",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQAV5BHAqsXVznQKpfGS4i54Lv5PYK4Dbcb2ASLcPYWwN",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "478072.56",
            "totalSupply": "999848489483156",
            "totalSupplyFormatted": "999848489.483156",
            "links": {
                "discord": "https://discord.com/invite/8kRvPg9pRd",
                "telegram": "https://t.me/UniversalOperatingSystem",
                "twitter": "https://twitter.com/Universal_O_S",
                "website": "https://www.uos.earth/",
                "moralis": "https://moralis.com/chain/solana/token/price/79HZeHkX9A5WfBg72ankd1ppTXGepoSGpmkxW63wsrHY"
            },
            "description": null
        }
    },
    "uprock": {
        "contract_address": "UPTx1d24aBWuRgwxVnFmX4gNraj3QGFzL3QqBgxtWQG",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "UPTx1d24aBWuRgwxVnFmX4gNraj3QGFzL3QqBgxtWQG",
            "standard": "metaplex",
            "name": "UPROCK",
            "symbol": "UPT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_UPTx1d24aBWuRgwxVnFmX4gNraj3QGFzL3QqBgxtWQG",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://raw.githubusercontent.com/uprockcom/token/main/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "UpRocK4EHKUG3RwCJH6LZvhiD5SH6seMuyUEjhwg3Um",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "10581718.63",
            "totalSupply": "998834878861854484",
            "totalSupplyFormatted": "998834878.861854484",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/UPTx1d24aBWuRgwxVnFmX4gNraj3QGFzL3QqBgxtWQG"
            },
            "description": null
        }
    },
    "urolithin-a": {
        "contract_address": "FvgqHMfL9yn39V79huDPy3YUNDoYJpuLWng2JfmQpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FvgqHMfL9yn39V79huDPy3YUNDoYJpuLWng2JfmQpump",
            "standard": "metaplex",
            "name": "Urolithin A",
            "symbol": "$URO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FvgqHMfL9yn39V79huDPy3YUNDoYJpuLWng2JfmQpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmWMn4g1BjZuaZC16PZkPfhWfg8ptFy22A1LbvwJq8AiZv",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2416520.02",
            "totalSupply": "999674854633860",
            "totalSupplyFormatted": "999674854.63386",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/pump_science",
                "twitter": "https://twitter.com/pumpdotscience",
                "website": "https://pump-science-app.vercel.app/experiments/URO",
                "moralis": "https://moralis.com/chain/solana/token/price/FvgqHMfL9yn39V79huDPy3YUNDoYJpuLWng2JfmQpump"
            },
            "description": null
        }
    },
    "ustream-coin": {
        "contract_address": "5Q8RSzXAybeLYkf76mMP5a5C9ikc8y4Qq9raJqKapump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5Q8RSzXAybeLYkf76mMP5a5C9ikc8y4Qq9raJqKapump",
            "standard": "metaplex",
            "name": "Ustream Coin",
            "symbol": "Ustream",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5Q8RSzXAybeLYkf76mMP5a5C9ikc8y4Qq9raJqKapump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcTF3qwmbkFLj3yweWMGubJz65nz7MpxbeGQ8PfpUkgcN",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "283085.95",
            "totalSupply": "999858544693376",
            "totalSupplyFormatted": "999858544.693376",
            "links": {
                "telegram": "https://t.me/Ustream_coin",
                "twitter": "https://twitter.com/Mazy",
                "website": "https://pump.fun/coin/5Q8RSzXAybeLYkf76mMP5a5C9ikc8y4Qq9raJqKapump",
                "moralis": "https://moralis.com/chain/solana/token/price/5Q8RSzXAybeLYkf76mMP5a5C9ikc8y4Qq9raJqKapump"
            },
            "description": null
        }
    },
    "uxd-protocol-token": {
        "contract_address": "UXPhBoR3qG4UCiGNJfV7MqhHyFqKN68g45GoYvAeL2M",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "UXPhBoR3qG4UCiGNJfV7MqhHyFqKN68g45GoYvAeL2M",
            "standard": "metaplex",
            "name": "UXP Governance Token",
            "symbol": "UXP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_UXPhBoR3qG4UCiGNJfV7MqhHyFqKN68g45GoYvAeL2M",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2189727.96",
            "totalSupply": "144856914853272528",
            "totalSupplyFormatted": "144856914.853272528",
            "links": {
                "discord": "https://discord.com/invite/BHfpYmjsBM",
                "github": "https://github.com/uxdprotocol",
                "medium": "https://uxdprotocol.medium.com/",
                "twitter": "https://twitter.com/UXDProtocol",
                "website": "https://uxd.fi/",
                "moralis": "https://moralis.com/chain/solana/token/price/UXPhBoR3qG4UCiGNJfV7MqhHyFqKN68g45GoYvAeL2M"
            },
            "description": null
        }
    },
    "uxd-stablecoin": {
        "contract_address": "7kbnvuGBxxj8AG9qp8Scn56muWGaRaFqxg1FsRp3PaFT",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7kbnvuGBxxj8AG9qp8Scn56muWGaRaFqxg1FsRp3PaFT",
            "standard": "metaplex",
            "name": "UXD Stablecoin",
            "symbol": "UXD",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7kbnvuGBxxj8AG9qp8Scn56muWGaRaFqxg1FsRp3PaFT",
            "decimals": "6",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "344017.71",
            "totalSupply": "342548862097",
            "totalSupplyFormatted": "342548.862097",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7kbnvuGBxxj8AG9qp8Scn56muWGaRaFqxg1FsRp3PaFT"
            },
            "description": null
        }
    },
    "vibe-cat-2": {
        "contract_address": "8tSeXYSXzFvaDX1nbWrEFFaFuPHuWqpzksKYxQPvpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8tSeXYSXzFvaDX1nbWrEFFaFuPHuWqpzksKYxQPvpump",
            "standard": "metaplex",
            "name": "Vibe Cat",
            "symbol": "VIBE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8tSeXYSXzFvaDX1nbWrEFFaFuPHuWqpzksKYxQPvpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmNfffbvu6y4af3jXSJrowJSq4k4EPGXdgQkTpkvjiRNCa",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "973802.06",
            "totalSupply": "982384171154937",
            "totalSupplyFormatted": "982384171.154937",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8tSeXYSXzFvaDX1nbWrEFFaFuPHuWqpzksKYxQPvpump"
            },
            "description": null
        }
    },
    "vine": {
        "contract_address": "6AJcP7wuLwmRYLBNbi825wgguaPsWzPBEHcHndpRpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "6AJcP7wuLwmRYLBNbi825wgguaPsWzPBEHcHndpRpump",
            "standard": "metaplex",
            "name": "Vine Coin",
            "symbol": "VINE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_6AJcP7wuLwmRYLBNbi825wgguaPsWzPBEHcHndpRpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYTnHwVqLHCYL1xrwGQLY8e1YHdXVMimkLuYeHZNNyUiX",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "37120303.35",
            "totalSupply": "999986728375545",
            "totalSupplyFormatted": "999986728.375545",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/rus",
                "website": "https://www.vineco.in",
                "moralis": "https://moralis.com/chain/solana/token/price/6AJcP7wuLwmRYLBNbi825wgguaPsWzPBEHcHndpRpump"
            },
            "description": null
        }
    },
    "viralmind": {
        "contract_address": "HW7D5MyYG4Dz2C98axfjVBeLWpsEnofrqy6ZUwqwpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HW7D5MyYG4Dz2C98axfjVBeLWpsEnofrqy6ZUwqwpump",
            "standard": "metaplex",
            "name": "ViralMind",
            "symbol": "VIRAL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HW7D5MyYG4Dz2C98axfjVBeLWpsEnofrqy6ZUwqwpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmfD9QGzqfqF2N5eGAP1w45o91dgtFFBWekbhMjej7L8zZ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "10250802.60",
            "totalSupply": "999952942317719",
            "totalSupplyFormatted": "999952942.317719",
            "links": {
                "github": "https://github.com/viralmind-ai",
                "telegram": "https://t.me/viralmind",
                "twitter": "https://twitter.com/ViralMindAI",
                "website": "https://viralmind.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/HW7D5MyYG4Dz2C98axfjVBeLWpsEnofrqy6ZUwqwpump"
            },
            "description": null
        }
    },
    "virgo-2": {
        "contract_address": "Ez4bst5qu5uqX3AntYWUdafw9XvtFeJ3gugytKKbSJso",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Ez4bst5qu5uqX3AntYWUdafw9XvtFeJ3gugytKKbSJso",
            "standard": "metaplex",
            "name": "Virgo",
            "symbol": "VIRGO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Ez4bst5qu5uqX3AntYWUdafw9XvtFeJ3gugytKKbSJso",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/o4lx0w7V1AoMY4-saHSPXsKvlVI5Hnw_AMX4yzgH-Pw",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "DUK1VN3WatYKsVLwRX2JxfJfaKX6bDXvijpPtT28ed13",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "348885.59",
            "totalSupply": "999998834319985",
            "totalSupplyFormatted": "999998834.319985",
            "links": {
                "telegram": "https://t.me/astrofoliosol",
                "twitter": "https://twitter.com/astrofoliosol",
                "website": "https://astrofolio.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/Ez4bst5qu5uqX3AntYWUdafw9XvtFeJ3gugytKKbSJso"
            },
            "description": null
        }
    },
    "virus-protocol": {
        "contract_address": "7NwukWynkZap56CRwPjxde2HY7z4nFNzzVYTQ96Lpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7NwukWynkZap56CRwPjxde2HY7z4nFNzzVYTQ96Lpump",
            "standard": "metaplex",
            "name": "Virus Protocol",
            "symbol": "VIRUS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7NwukWynkZap56CRwPjxde2HY7z4nFNzzVYTQ96Lpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUS5Di3mNqsXU2f157xVxZ5uLHUYFNNeG6bRTwL7tRjDJ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "14945.73",
            "totalSupply": "998912350128584",
            "totalSupplyFormatted": "998912350.128584",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/7NwukWynkZap56CRwPjxde2HY7z4nFNzzVYTQ96Lpump"
            },
            "description": null
        }
    },
    "vivi-coin": {
        "contract_address": "9RUup1LmD5PBsnd23JmTy39wSwALB7JF7xMfUJP8K7je",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9RUup1LmD5PBsnd23JmTy39wSwALB7JF7xMfUJP8K7je",
            "standard": "metaplex",
            "name": "LH VIVI",
            "symbol": "vivi",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9RUup1LmD5PBsnd23JmTy39wSwALB7JF7xMfUJP8K7je",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/L5sq7KqUNqcsC5RIKZjWhqdsfkQQZOzLywZQyY6i98A",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "D2rVfBPz32JdGGTQWvNo6La4q6j3d2pmBgLXDK9hdziJ",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "28137598.36",
            "totalSupply": "1999966192500000000",
            "totalSupplyFormatted": "1999966192.5",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/2",
                "twitter": "https://twitter.com/lh_vivi_",
                "website": "https://www.lh-s.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/9RUup1LmD5PBsnd23JmTy39wSwALB7JF7xMfUJP8K7je"
            },
            "description": null
        }
    },
    "voice-artificial": {
        "contract_address": "8c8gJSmaU4yiDsZFWTiCtsMoVBuqp5WGyzSv4VVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8c8gJSmaU4yiDsZFWTiCtsMoVBuqp5WGyzSv4VVpump",
            "standard": "metaplex",
            "name": "Voice Artificial",
            "symbol": "VAR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8c8gJSmaU4yiDsZFWTiCtsMoVBuqp5WGyzSv4VVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmcx29b9D48mhXNNmLVeRxo99eoc5chvBEVPUox1hL6pzq",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "323373.11",
            "totalSupply": "999994142921286",
            "totalSupplyFormatted": "999994142.921286",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8c8gJSmaU4yiDsZFWTiCtsMoVBuqp5WGyzSv4VVpump"
            },
            "description": null
        }
    },
    "voyager-ai": {
        "contract_address": "CvwWh9NVQJ12KJ3xqe5SzWAvdohdfD8sePo8STQApump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CvwWh9NVQJ12KJ3xqe5SzWAvdohdfD8sePo8STQApump",
            "standard": "metaplex",
            "name": "Voyager AI",
            "symbol": "VOYAGE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_CvwWh9NVQJ12KJ3xqe5SzWAvdohdfD8sePo8STQApump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qme5qY38qSec7F63hkdQZb8SCSJjQQd8S6bKsWdMD65Tzn",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "316505.25",
            "totalSupply": "999962865973857",
            "totalSupplyFormatted": "999962865.973857",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/voyageraiportal",
                "twitter": "https://twitter.com/VoyagerAixyz",
                "website": "https://www.voyagerai.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/CvwWh9NVQJ12KJ3xqe5SzWAvdohdfD8sePo8STQApump"
            },
            "description": null
        }
    },
    "waffles": {
        "contract_address": "8doS8nzmgVZEaACxALkbK5fZtw4UuoRp4Yt8NEaXfDMb",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8doS8nzmgVZEaACxALkbK5fZtw4UuoRp4Yt8NEaXfDMb",
            "standard": "metaplex",
            "name": "WAFFLES ",
            "symbol": "$WAFFLES ",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8doS8nzmgVZEaACxALkbK5fZtw4UuoRp4Yt8NEaXfDMb",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmdapKXuTBg4y2nMojhgtvvfsNwFVDEiMcj1144kuafvDX",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3476319.49",
            "totalSupply": "998119506060798",
            "totalSupplyFormatted": "998119506.060798",
            "links": {
                "instagram": "https://www.instagram.com/wafflesonsolana/?igsh=aW5yeTgyZG5oeXN2",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/wafflezportal",
                "tiktok": "https://www.tiktok.com/@wafflesonsolana?ug_source=op.auth&ug_term=Linktr.ee&utm_source=awyc6vc625ejxp86&utm_campaign=tt4d_profile_link&_r=1",
                "twitter": "https://x.com/Wafflesj15",
                "website": "https://wafflesonsolana.xyz/",
                "moralis": "https://moralis.com/chain/solana/token/price/8doS8nzmgVZEaACxALkbK5fZtw4UuoRp4Yt8NEaXfDMb"
            },
            "description": null
        }
    },
    "waifu-3": {
        "contract_address": "D4yF6j16FitfzH6e3Q9yYXTwV1tzpy2yGkjouD5Hpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "D4yF6j16FitfzH6e3Q9yYXTwV1tzpy2yGkjouD5Hpump",
            "standard": "metaplex",
            "name": "WAIFU ",
            "symbol": "WAIFU",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_D4yF6j16FitfzH6e3Q9yYXTwV1tzpy2yGkjouD5Hpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYPXmNn8DWsF8YMWJkE8iCwo4oAit5x5x4NzAATc3bBBy",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "419086.45",
            "totalSupply": "999998686075008",
            "totalSupplyFormatted": "999998686.075008",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/D4yF6j16FitfzH6e3Q9yYXTwV1tzpy2yGkjouD5Hpump"
            },
            "description": null
        }
    },
    "walken": {
        "contract_address": "EcQCUYv57C4V6RoPxkVUiDwtX1SP8y8FP5AEToYL8Az",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EcQCUYv57C4V6RoPxkVUiDwtX1SP8y8FP5AEToYL8Az",
            "standard": "metaplex",
            "name": "Walken",
            "symbol": "WLKN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EcQCUYv57C4V6RoPxkVUiDwtX1SP8y8FP5AEToYL8Az",
            "decimals": "9",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1475537.32",
            "totalSupply": "1836428590034368491",
            "totalSupplyFormatted": "1836428590.034368491",
            "links": {
                "discord": "https://discord.gg/walken",
                "telegram": "https://t.me/walken_channel",
                "twitter": "https://twitter.com/Walken_io",
                "website": "https://walken.io/",
                "reddit": "https://www.reddit.com",
                "moralis": "https://moralis.com/chain/solana/token/price/EcQCUYv57C4V6RoPxkVUiDwtX1SP8y8FP5AEToYL8Az"
            },
            "description": null
        }
    },
    "walter-dog-solana": {
        "contract_address": "FV56CmR7fhEyPkymKfmviKV48uPo51ti9kAxssQqTDLu",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "FV56CmR7fhEyPkymKfmviKV48uPo51ti9kAxssQqTDLu",
            "standard": "metaplex",
            "name": "walter",
            "symbol": "WALTER",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_FV56CmR7fhEyPkymKfmviKV48uPo51ti9kAxssQqTDLu",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmT7gvdgKNG3ZsuWZYH6QzMxUwrTYbLLwMhqwpyLpFzAWW",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "514513.46",
            "totalSupply": "950077384950401",
            "totalSupplyFormatted": "950077384.950401",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/WalterCTO",
                "website": "https://walteronsolana.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/FV56CmR7fhEyPkymKfmviKV48uPo51ti9kAxssQqTDLu"
            },
            "description": null
        }
    },
    "wap": {
        "contract_address": "Bz7vVzQhm2KMW1XgcrDruYega1MiwrAs1DQysrx4tFkp",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Bz7vVzQhm2KMW1XgcrDruYega1MiwrAs1DQysrx4tFkp",
            "standard": "metaplex",
            "name": "Wet Ass Pussy",
            "symbol": "WAP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Bz7vVzQhm2KMW1XgcrDruYega1MiwrAs1DQysrx4tFkp",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/EuCxZ-HaLn0tFcZ6rLtp1OSzyi_gtamxxGDeaQx7zwo",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8yrmLzJBNyAmc8GhrcyEXRA4aUFdHsx3DsZ8QVrHPdLB",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "53815.89",
            "totalSupply": "999867933990250719",
            "totalSupplyFormatted": "999867933.990250719",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Bz7vVzQhm2KMW1XgcrDruYega1MiwrAs1DQysrx4tFkp"
            },
            "description": null
        }
    },
    "warrior-coin": {
        "contract_address": "3fP61JWqLxxrvBv5NSxJdAz4GtCB7UpfU3UFxZTgj1yG",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3fP61JWqLxxrvBv5NSxJdAz4GtCB7UpfU3UFxZTgj1yG",
            "standard": "metaplex",
            "name": "Warrior Coin",
            "symbol": "$WAR",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3fP61JWqLxxrvBv5NSxJdAz4GtCB7UpfU3UFxZTgj1yG",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.pinata.cloud/ipfs/QmPi33DnaVzqauLXXspgy4Nub3XiDMRMjJ8Xf2zv8n3kVV",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "BCUHf9pTfgGfNLoPjiHfsgLqFPiRN4iaaTvtvN9zPXvk",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1810321.22",
            "totalSupply": "139999630283645744",
            "totalSupplyFormatted": "139999630283.645744",
            "links": {
                "telegram": "https://t.me/warriorcoin_chat",
                "twitter": "https://x.com/warriorcoin_io",
                "website": "https://warriorcoin.io",
                "moralis": "https://moralis.com/chain/solana/token/price/3fP61JWqLxxrvBv5NSxJdAz4GtCB7UpfU3UFxZTgj1yG"
            },
            "description": null
        }
    },
    "water-coin": {
        "contract_address": "B6h248NJkAcBAkaCnji889a26tCiGXGN8cxhEJ4dX391",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "B6h248NJkAcBAkaCnji889a26tCiGXGN8cxhEJ4dX391",
            "standard": "metaplex",
            "name": "WATER",
            "symbol": "$WATER",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_B6h248NJkAcBAkaCnji889a26tCiGXGN8cxhEJ4dX391",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/vzCuuKgqw1axvYPu8lhA7pe0c9iLrR7oeCj6wR-JyDI",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5L8xsAMqvqjBgkgLY9mjJVM9T1FoqiSw7WsmZJguhZQG",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "730402.78",
            "totalSupply": "73106073369488046",
            "totalSupplyFormatted": "73106073369.488046",
            "links": {
                "reddit": "https://www.reddit.com",
                "website": "https://watercoin.wtf/",
                "moralis": "https://moralis.com/chain/solana/token/price/B6h248NJkAcBAkaCnji889a26tCiGXGN8cxhEJ4dX391"
            },
            "description": null
        }
    },
    "waveform": {
        "contract_address": "5XUUN5z1yBPEwoLztu4qMenmFe6GQnZptBFsnFnEpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5XUUN5z1yBPEwoLztu4qMenmFe6GQnZptBFsnFnEpump",
            "standard": "metaplex",
            "name": "Waveform",
            "symbol": "WAVE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5XUUN5z1yBPEwoLztu4qMenmFe6GQnZptBFsnFnEpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmULTnNSSDwYw4UnA1m332AeFmfh7fzhhiPvWZiLikuVcY",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1103808.58",
            "totalSupply": "999963387031841",
            "totalSupplyFormatted": "999963387.031841",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/5XUUN5z1yBPEwoLztu4qMenmFe6GQnZptBFsnFnEpump"
            },
            "description": null
        }
    },
    "we-love-t": {
        "contract_address": "23CTZMjEYNNZUE4itfn3iv6kgM4xn7X7dx1kVX1Gr8Xi",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "23CTZMjEYNNZUE4itfn3iv6kgM4xn7X7dx1kVX1Gr8Xi",
            "standard": "metaplex",
            "name": "We Love Tits",
            "symbol": "TITS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_23CTZMjEYNNZUE4itfn3iv6kgM4xn7X7dx1kVX1Gr8Xi",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreia5vtazvk62lkgp4nfts5smvwiyklat5uh3do2zwtwe4srzw2ks6i.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "ANUgndSjp9bMPFfpg7WVEpuiMLPSDetjXSu2L1YLtTvv",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6245336.97",
            "totalSupply": "999929547921220235",
            "totalSupplyFormatted": "999929547.921220235",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/23CTZMjEYNNZUE4itfn3iv6kgM4xn7X7dx1kVX1Gr8Xi"
            },
            "description": null
        }
    },
    "welsh-corgi": {
        "contract_address": "GDisrnbVWjKJuAVqeWfYd9zMyV9gP7gXb3FQfd8xbKuM",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GDisrnbVWjKJuAVqeWfYd9zMyV9gP7gXb3FQfd8xbKuM",
            "standard": "metaplex",
            "name": "Welsh Corgi",
            "symbol": "$CORGI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GDisrnbVWjKJuAVqeWfYd9zMyV9gP7gXb3FQfd8xbKuM",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreiasrxibcgblvyfdheqodigyu2qnxecq3slzgvwj26fquxm45excy4.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "EaNbk44drg2hbhySj6MfW7LeSsUjpeJLB4q4Xssa6MVR",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6422.88",
            "totalSupply": "992893459282174",
            "totalSupplyFormatted": "992893.459282174",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/GDisrnbVWjKJuAVqeWfYd9zMyV9gP7gXb3FQfd8xbKuM"
            },
            "description": null
        }
    },
    "wen-4": {
        "contract_address": "WENWENvqqNya429ubCdR81ZmD69brwQaaBYY6p3LCpk",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "WENWENvqqNya429ubCdR81ZmD69brwQaaBYY6p3LCpk",
            "standard": "metaplex",
            "name": "Wen",
            "symbol": "WEN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_WENWENvqqNya429ubCdR81ZmD69brwQaaBYY6p3LCpk",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://qgp7lco5ylyitscysc2c7clhpxipw6sexpc2eij7g5rq3pnkcx2q.arweave.net/gZ_1id3C8InIWJC0L4lnfdD7ekS7xaIhPzdjDb2qFfU",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Hd7tQ6JUPaKPid8tiqyhLfWEaivRnf7YJDyMi4abmsvx",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "20723176.59",
            "totalSupply": "72763962738043364",
            "totalSupplyFormatted": "727639627380.43364",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/wenwencoin",
                "website": "https://www.wenwencoin.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/WENWENvqqNya429ubCdR81ZmD69brwQaaBYY6p3LCpk"
            },
            "description": null
        }
    },
    "whales-market": {
        "contract_address": "GTH3wG3NErjwcf7VGCoXEXkgXSHvYhx5gtATeeM5JAS1",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GTH3wG3NErjwcf7VGCoXEXkgXSHvYhx5gtATeeM5JAS1",
            "standard": "metaplex",
            "name": "Whales Market",
            "symbol": "WHALES",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GTH3wG3NErjwcf7VGCoXEXkgXSHvYhx5gtATeeM5JAS1",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://nftstorage.link/ipfs/bafkreiasmvbhjnmv3bz74y3pssexemb6ljo73doo6wixhxs6vjmepzgbj4",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "5hXXojL391a7AxBpjYrGMFpqD7z1Fu89xu2g95XuDcEZ",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "5790292.64",
            "totalSupply": "97672018857691",
            "totalSupplyFormatted": "97672018.857691",
            "links": {
                "email": "contact@whales.market",
                "discord": "https://discord.com/invite/whalesmarket",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/verifyWhalesmarket",
                "twitter": "https://twitter.com/WhalesMarket",
                "website": "https://whales.market/",
                "moralis": "https://moralis.com/chain/solana/token/price/GTH3wG3NErjwcf7VGCoXEXkgXSHvYhx5gtATeeM5JAS1"
            },
            "description": null
        }
    },
    "what-in-tarnation": {
        "contract_address": "Adq3wnAvtaXBNfy63xGV1YNkDiPKadDT469xF9uZPrqE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Adq3wnAvtaXBNfy63xGV1YNkDiPKadDT469xF9uZPrqE",
            "standard": "metaplex",
            "name": "What in Tarnation?",
            "symbol": "WIT",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Adq3wnAvtaXBNfy63xGV1YNkDiPKadDT469xF9uZPrqE",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmWCLBKuDbyycHMtwcD9adDWJ7rdgpyhDXmuvTgFEnepgx",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "375417.42",
            "totalSupply": "969940527430475",
            "totalSupplyFormatted": "969940527.430475",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/WITPortal",
                "twitter": "https://twitter.com/WhatInTarnSol",
                "website": "https://whatintarn.org/",
                "moralis": "https://moralis.com/chain/solana/token/price/Adq3wnAvtaXBNfy63xGV1YNkDiPKadDT469xF9uZPrqE"
            },
            "description": null
        }
    },
    "what-s-updog": {
        "contract_address": "HJ39rRZ6ys22KdB3USxDgNsL7RKiQmsC3yL8AS3Suuku",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HJ39rRZ6ys22KdB3USxDgNsL7RKiQmsC3yL8AS3Suuku",
            "standard": "metaplex",
            "name": "What\u2019s Updog?",
            "symbol": "UPDOG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HJ39rRZ6ys22KdB3USxDgNsL7RKiQmsC3yL8AS3Suuku",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreiepof5zvfmoydegff7zkop3wr6qgkskb57kywxsobyicxovel6o5y.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FzXY9vfzbwn2Prys3gJ3vcoYDg4WV356oopn5tPt7SKw",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "522471.13",
            "totalSupply": "999931358359089968",
            "totalSupplyFormatted": "999931358.359089968",
            "links": {
                "email": "updogsupport@gmail.com",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/UpDogCommunity",
                "twitter": "https://twitter.com/updogtoken",
                "website": "https://www.updogsolana.org",
                "moralis": "https://moralis.com/chain/solana/token/price/HJ39rRZ6ys22KdB3USxDgNsL7RKiQmsC3yL8AS3Suuku"
            },
            "description": null
        }
    },
    "whine-coin": {
        "contract_address": "ATeTQcUkWGs7AZ15mCiFUWCW9EUL7KpDZEHCN1Y8pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ATeTQcUkWGs7AZ15mCiFUWCW9EUL7KpDZEHCN1Y8pump",
            "standard": "metaplex",
            "name": "keep whining",
            "symbol": "WHINE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ATeTQcUkWGs7AZ15mCiFUWCW9EUL7KpDZEHCN1Y8pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmP5Q19LGhiarX9aH9oqbA3A4HiCDuyUg6v9gdPeno7Qws",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "38963.39",
            "totalSupply": "899888840205718",
            "totalSupplyFormatted": "899888840.205718",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/ATeTQcUkWGs7AZ15mCiFUWCW9EUL7KpDZEHCN1Y8pump"
            },
            "description": null
        }
    },
    "whiskey": {
        "contract_address": "9UNqoPEXXxEnEphmyYsZYdL5dnmAUtdiKRUchpnUF5Ph",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9UNqoPEXXxEnEphmyYsZYdL5dnmAUtdiKRUchpnUF5Ph",
            "standard": "metaplex",
            "name": "WHISKEY",
            "symbol": "$WHISKEY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9UNqoPEXXxEnEphmyYsZYdL5dnmAUtdiKRUchpnUF5Ph",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmPor8bLGAwCBawKWP1TwWz3xMW3rcjTSszuqy1oMDNqfJ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2381598.49",
            "totalSupply": "997499336504862",
            "totalSupplyFormatted": "997499336.504862",
            "links": {
                "instagram": "https://www.instagram.com/whiskeymeme/",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/PlanetWhiskey",
                "tiktok": "https://www.tiktok.com/@whiskeycoin",
                "twitter": "https://x.com/planetwhiskey",
                "website": "https://www.whiskeycoin.wtf/",
                "moralis": "https://moralis.com/chain/solana/token/price/9UNqoPEXXxEnEphmyYsZYdL5dnmAUtdiKRUchpnUF5Ph"
            },
            "description": null
        }
    },
    "whisp": {
        "contract_address": "whispF7G9DHaojYHe2cdhRX5EMJzGBdqq7R57kL6inL",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "whispF7G9DHaojYHe2cdhRX5EMJzGBdqq7R57kL6inL",
            "standard": "metaplex",
            "name": "WHISP",
            "symbol": "WHISP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_whispF7G9DHaojYHe2cdhRX5EMJzGBdqq7R57kL6inL",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://arweave.net/trfQwQVJYzHgRhW22TXYN3-mYm3U5G6oo1721R9egFU",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "7344938.42",
            "totalSupply": "999979771409613",
            "totalSupplyFormatted": "999979771.409613",
            "links": {
                "discord": "https://discord.gg/whispersai",
                "github": "https://github.com/whsprs",
                "twitter": "https://twitter.com/whispersai",
                "website": "https://whsprs.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/whispF7G9DHaojYHe2cdhRX5EMJzGBdqq7R57kL6inL"
            },
            "description": null
        }
    },
    "white-boy-summer": {
        "contract_address": "GJgHsc1HU4ibmzW6oWQr8L2RRT95ATc1BoNuLkp94AwU",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GJgHsc1HU4ibmzW6oWQr8L2RRT95ATc1BoNuLkp94AwU",
            "standard": "metaplex",
            "name": "White Boy Summer",
            "symbol": "WBS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GJgHsc1HU4ibmzW6oWQr8L2RRT95ATc1BoNuLkp94AwU",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://bafkreifs7vir4wunlvkvr57khk4wb3vatcy76w6vkvh26df6snyp66zr3a.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AcEAiCWY4BxVTmQoa1pozyBHQeArbSvZxgKFw8xXUEnv",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "548357.64",
            "totalSupply": "999959224997128431",
            "totalSupplyFormatted": "999959224.997128431",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/WBSONSOLANA",
                "website": "https://www.wbscoin.net/",
                "moralis": "https://moralis.com/chain/solana/token/price/GJgHsc1HU4ibmzW6oWQr8L2RRT95ATc1BoNuLkp94AwU"
            },
            "description": null
        }
    },
    "whyyoutouzhele": {
        "contract_address": "HhUVkZ1qz8vfMqZDemLyxBFxrHFKVSYAk7a6227Lpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "HhUVkZ1qz8vfMqZDemLyxBFxrHFKVSYAk7a6227Lpump",
            "standard": "metaplex",
            "name": "Whyyoutouzhele",
            "symbol": "LI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_HhUVkZ1qz8vfMqZDemLyxBFxrHFKVSYAk7a6227Lpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmcsyChtsEUSq9bfUqXcn85hEoaJJVmrFuKULK5RAy4fWC",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2263577.33",
            "totalSupply": "999969662491185",
            "totalSupplyFormatted": "999969662.491185",
            "links": {
                "telegram": "https://t.me/whyyoutouzhele_memecoin",
                "twitter": "https://x.com/Li_memecoin",
                "website": "https://x.com/Li_memecoin",
                "moralis": "https://moralis.com/chain/solana/token/price/HhUVkZ1qz8vfMqZDemLyxBFxrHFKVSYAk7a6227Lpump"
            },
            "description": null
        }
    },
    "wifejak": {
        "contract_address": "4y3oUrsJfSp431R3wJrWiaLxRPsnYtpkVJmoV2bYpBiy",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4y3oUrsJfSp431R3wJrWiaLxRPsnYtpkVJmoV2bYpBiy",
            "standard": "metaplex",
            "name": "wifejak",
            "symbol": "WIFE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4y3oUrsJfSp431R3wJrWiaLxRPsnYtpkVJmoV2bYpBiy",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmQhGPHrToj9KcHNo75KQ1jEcMPNbjbHGFxT1wCyLzMRFL",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "407424.14",
            "totalSupply": "999990527290002",
            "totalSupplyFormatted": "999990527.290002",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/4y3oUrsJfSp431R3wJrWiaLxRPsnYtpkVJmoV2bYpBiy"
            },
            "description": null
        }
    },
    "winnie-the-poodle": {
        "contract_address": "4ZrxMzvqQ8f37ViijJTYp3FZqFTkG47rZhETx2dPpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4ZrxMzvqQ8f37ViijJTYp3FZqFTkG47rZhETx2dPpump",
            "standard": "metaplex",
            "name": "Winnie the Poodle",
            "symbol": "WINNIE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4ZrxMzvqQ8f37ViijJTYp3FZqFTkG47rZhETx2dPpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmX6vsP7QYP8zwUZ1LhKg26A1cNMmCg9hng96qhytPYZ11",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3759606.33",
            "totalSupply": "999997693052793",
            "totalSupplyFormatted": "999997693.052793",
            "links": {
                "telegram": "https://t.me/winniepoodle",
                "twitter": "https://twitter.com/winniepoodl",
                "website": "https://winniethepoodle.dog/",
                "moralis": "https://moralis.com/chain/solana/token/price/4ZrxMzvqQ8f37ViijJTYp3FZqFTkG47rZhETx2dPpump"
            },
            "description": null
        }
    },
    "woman-yelling-at-cat": {
        "contract_address": "BEgBsVSKJSxreiCE1XmWWq8arnwit7xDqQXSWYgay9xP",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BEgBsVSKJSxreiCE1XmWWq8arnwit7xDqQXSWYgay9xP",
            "standard": "metaplex",
            "name": "WOMAN YELLING AT CAT",
            "symbol": "WYAC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BEgBsVSKJSxreiCE1XmWWq8arnwit7xDqQXSWYgay9xP",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmScKg3Mnp2vxmr6k1wJiQvxGYFFYqLkgT3LVEtrW2N9MP",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1712598.82",
            "totalSupply": "989966690177772",
            "totalSupplyFormatted": "989966690.177772",
            "links": {
                "instagram": "https://www.instagram.com/taylorarmstrong",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/womanyellingatcat",
                "twitter": "https://x.com/wyacsolana",
                "website": "https://wyac.world/",
                "moralis": "https://moralis.com/chain/solana/token/price/BEgBsVSKJSxreiCE1XmWWq8arnwit7xDqQXSWYgay9xP"
            },
            "description": null
        }
    },
    "woof": {
        "contract_address": "WARcU61sECeEK5DEbkY3wcjGxSGr4W8bVUpKbBNbgbu",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "WARcU61sECeEK5DEbkY3wcjGxSGr4W8bVUpKbBNbgbu",
            "standard": "metaplex",
            "name": "This is Fine",
            "symbol": "FINE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_WARcU61sECeEK5DEbkY3wcjGxSGr4W8bVUpKbBNbgbu",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://bafybeidqsc6uhkejzg64lv6n3vso7nvzzbjp6hschj2fps3a57k6qj6rdi.ipfs.nftstorage.link/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "WLCRsutaZcXdpXGNmVMgmbWrD2kmGHutBEM4VS7Eouw",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "15827.96",
            "totalSupply": "759863812667003",
            "totalSupplyFormatted": "759863812.667003",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/finecult",
                "twitter": "https://twitter.com/FineTokenSol",
                "website": "https://www.finetokensol.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/WARcU61sECeEK5DEbkY3wcjGxSGr4W8bVUpKbBNbgbu"
            },
            "description": null
        }
    },
    "woof-token": {
        "contract_address": "9nEqaUcb16sQ3Tn1psbkWqyhPdLmfHWjKGymREjsAgTE",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "9nEqaUcb16sQ3Tn1psbkWqyhPdLmfHWjKGymREjsAgTE",
            "standard": "metaplex",
            "name": "WOOFENOMICS",
            "symbol": "WOOF",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_9nEqaUcb16sQ3Tn1psbkWqyhPdLmfHWjKGymREjsAgTE",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "AqH29mZfQFgRpfwaPoTMWSKJ5kqauoc1FwVBRksZyQrt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "310966.97",
            "totalSupply": "17900470419462684",
            "totalSupplyFormatted": "17900470419.462684",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/9nEqaUcb16sQ3Tn1psbkWqyhPdLmfHWjKGymREjsAgTE"
            },
            "description": null
        }
    },
    "woop": {
        "contract_address": "A3HyGZqe451CBesNqieNPfJ4A9Mu332ui8ni6dobVSLB",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "A3HyGZqe451CBesNqieNPfJ4A9Mu332ui8ni6dobVSLB",
            "standard": "metaplex",
            "name": "WOOP",
            "symbol": "WOOP",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_A3HyGZqe451CBesNqieNPfJ4A9Mu332ui8ni6dobVSLB",
            "decimals": "5",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "79713.40",
            "totalSupply": "9775999046045",
            "totalSupplyFormatted": "97759990.46045",
            "links": {
                "discord": "https://discord.gg/bohemia",
                "twitter": "https://twitter.com/BohemiaArtFair",
                "website": "https://www.bohemia.gallery",
                "moralis": "https://moralis.com/chain/solana/token/price/A3HyGZqe451CBesNqieNPfJ4A9Mu332ui8ni6dobVSLB"
            },
            "description": null
        }
    },
    "work": {
        "contract_address": "F7Hwf8ib5DVCoiuyGr618Y3gon429Rnd1r5F9R5upump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F7Hwf8ib5DVCoiuyGr618Y3gon429Rnd1r5F9R5upump",
            "standard": "metaplex",
            "name": "WORK",
            "symbol": "WORK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_F7Hwf8ib5DVCoiuyGr618Y3gon429Rnd1r5F9R5upump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbGvDFTGs9HhtZRNowH9dWr9yvaYwFmvyraAHvSHjzzjT",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "542737.83",
            "totalSupply": "999883612979348",
            "totalSupplyFormatted": "999883612.979348",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/F7Hwf8ib5DVCoiuyGr618Y3gon429Rnd1r5F9R5upump"
            },
            "description": null
        }
    },
    "wpphmrmbdtrsj2p0eb69i": {
        "contract_address": "F87d3uwBN7epMt89bUaFdoQmw24Eggo1jjmH5Zpnpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "F87d3uwBN7epMt89bUaFdoQmw24Eggo1jjmH5Zpnpump",
            "standard": "metaplex",
            "name": "Wpphmrmbdtrsj2p0eb69i",
            "symbol": "META",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_F87d3uwBN7epMt89bUaFdoQmw24Eggo1jjmH5Zpnpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmTUQWznLg6sH7ZyjubdhjkLKEYVtAuqoxuC3yUAfEwQGY",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "149909.48",
            "totalSupply": "999723097359780",
            "totalSupplyFormatted": "999723097.35978",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/themetaportal",
                "twitter": "https://x.com/duhofficialMETA",
                "website": "https://www.wpphmrmbdtrsj2p0eb69i.com/",
                "moralis": "https://moralis.com/chain/solana/token/price/F87d3uwBN7epMt89bUaFdoQmw24Eggo1jjmH5Zpnpump"
            },
            "description": null
        }
    },
    "wrapped-besc": {
        "contract_address": "DDE8MnEjYsukfiG2DCu4EeJM3wU4jngLci65mQyzYs7H",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "DDE8MnEjYsukfiG2DCu4EeJM3wU4jngLci65mQyzYs7H",
            "standard": "metaplex",
            "name": "BESC LLC",
            "symbol": "$BESC",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_DDE8MnEjYsukfiG2DCu4EeJM3wU4jngLci65mQyzYs7H",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/bafkreic7icslpgik65gyn3lgegeqh3sbsjsvfgz7gr4oya5c62fi7na5je",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "2FqoSmi4nCHxWBhtizo9FeNFKLZFiS8zwDN5gkWvu9xB",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "582799.05",
            "totalSupply": "918145590179666",
            "totalSupplyFormatted": "918145.590179666",
            "links": {
                "discord": "https://discord.gg/dzXntRhr",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/BuildersEdgePortal",
                "twitter": "https://twitter.com/bescllc",
                "website": "https://bescllc.com",
                "moralis": "https://moralis.com/chain/solana/token/price/DDE8MnEjYsukfiG2DCu4EeJM3wU4jngLci65mQyzYs7H"
            },
            "description": null
        }
    },
    "wrapped-dog": {
        "contract_address": "GYKmdfcUmZVrqfcH1g579BGjuzSRijj3LBuwv79rpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GYKmdfcUmZVrqfcH1g579BGjuzSRijj3LBuwv79rpump",
            "standard": "metaplex",
            "name": "wrapped dog",
            "symbol": "wDOG",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GYKmdfcUmZVrqfcH1g579BGjuzSRijj3LBuwv79rpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/Qmcz49oFRAE1tTLGmAishREFwSf4Bf8Awm9bWq4ZAkEoSG",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "640189.69",
            "totalSupply": "999866756853246",
            "totalSupplyFormatted": "999866756.853246",
            "links": {
                "reddit": "https://www.reddit.com",
                "website": "https://pump.fun/GYKmdfcUmZVrqfcH1g579BGjuzSRijj3LBuwv79rpump",
                "moralis": "https://moralis.com/chain/solana/token/price/GYKmdfcUmZVrqfcH1g579BGjuzSRijj3LBuwv79rpump"
            },
            "description": null
        }
    },
    "wrapped-fragsol": {
        "contract_address": "WFRGSWjaz8tbAxsJitmbfRuFV2mSNwy7BMWcCwaA28U",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "WFRGSWjaz8tbAxsJitmbfRuFV2mSNwy7BMWcCwaA28U",
            "standard": "metaplex",
            "name": "Wrapped Fragmetric Restaked SOL",
            "symbol": "wfragSOL",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_WFRGSWjaz8tbAxsJitmbfRuFV2mSNwy7BMWcCwaA28U",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://quicknode.quicknode-ipfs.com/ipfs/QmaTVVmyvbJXs2Rqcqs76N5UiuPZ2iKCKrb5BpyB13vwzU",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "fragSkuEpEmdoj9Bcyawk9rBdsChcVJLWHfj9JX1Gby",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "28180726.58",
            "totalSupply": "163511923014485",
            "totalSupplyFormatted": "163511.923014485",
            "links": {
                "discord": "https://discord.gg/fragmetric",
                "github": "https://github.com/fragmetric-labs",
                "twitter": "https://twitter.com/fragmetric",
                "website": "https://fragmetric.xyz",
                "moralis": "https://moralis.com/chain/solana/token/price/WFRGSWjaz8tbAxsJitmbfRuFV2mSNwy7BMWcCwaA28U"
            },
            "description": null
        }
    },
    "wtf-opossum": {
        "contract_address": "8C4RygkxmePm9ys1qCcAB46dUCXNQYTaqfxS5mBrpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8C4RygkxmePm9ys1qCcAB46dUCXNQYTaqfxS5mBrpump",
            "standard": "metaplex",
            "name": "WTF Opossum ",
            "symbol": "WTFO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8C4RygkxmePm9ys1qCcAB46dUCXNQYTaqfxS5mBrpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/Qmd8RDjph9rqbhJNqjRAcPgksBVbrusY4wG5kDJHJx76h4",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "137694.72",
            "totalSupply": "887803169385487",
            "totalSupplyFormatted": "887803169.385487",
            "links": {
                "email": "wtf@wtfo.online",
                "telegram": "https://t.me/wtfopossum",
                "twitter": "https://x.com/wtfopossum",
                "website": "https://wtfo.online/",
                "moralis": "https://moralis.com/chain/solana/token/price/8C4RygkxmePm9ys1qCcAB46dUCXNQYTaqfxS5mBrpump"
            },
            "description": null
        }
    },
    "x-community": {
        "contract_address": "EhkDgP8e5sz16AFCWUCYJzVug1zvpDLTEHxH4WAFpBFA",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EhkDgP8e5sz16AFCWUCYJzVug1zvpDLTEHxH4WAFpBFA",
            "standard": "metaplex",
            "name": "X Community",
            "symbol": "X",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EhkDgP8e5sz16AFCWUCYJzVug1zvpDLTEHxH4WAFpBFA",
            "decimals": "5",
            "metaplex": {
                "metadataUri": "https://bafkreicf7pl6yaz5smii6efozm4ffrpkda2dtunj5q2taaa7kzuqzuezzq.ipfs.nftstorage.link",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "6nnAusqD2yLKGnxUeotBqavsynFctJUWRUkrhwRWjCFi",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "3726727.99",
            "totalSupply": "98999256040836",
            "totalSupplyFormatted": "989992560.40836",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/EhkDgP8e5sz16AFCWUCYJzVug1zvpDLTEHxH4WAFpBFA"
            },
            "description": null
        }
    },
    "xandeum": {
        "contract_address": "XANDuUoVoUqniKkpcKhrxmvYJybpJvUxJLr21Gaj3Hx",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "XANDuUoVoUqniKkpcKhrxmvYJybpJvUxJLr21Gaj3Hx",
            "standard": "metaplex",
            "name": "Xandeum",
            "symbol": "XAND",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_XANDuUoVoUqniKkpcKhrxmvYJybpJvUxJLr21Gaj3Hx",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://raw.githubusercontent.com/bernieblume/XAND-meta-2024/main/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "CaGfz4CkN4otKGsC38r3GfxXAJKmkUSJaJSx6Bfh5Fnt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "10767994.78",
            "totalSupply": "4014999124081902011",
            "totalSupplyFormatted": "4014999124.081902011",
            "links": {
                "discord": "https://discord.com/invite/B88jTAYBhZ",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/XandeumLabs",
                "twitter": "https://twitter.com/XandeumNetwork",
                "website": "https://www.xandeum.network/",
                "moralis": "https://moralis.com/chain/solana/token/price/XANDuUoVoUqniKkpcKhrxmvYJybpJvUxJLr21Gaj3Hx"
            },
            "description": null
        }
    },
    "xenopus-laevis": {
        "contract_address": "Db7ZUaWTThwZy7bVhjn5Dda8D3fbbAhihcxPV4m9pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "Db7ZUaWTThwZy7bVhjn5Dda8D3fbbAhihcxPV4m9pump",
            "standard": "metaplex",
            "name": "Xenopus laevis",
            "symbol": "XENO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_Db7ZUaWTThwZy7bVhjn5Dda8D3fbbAhihcxPV4m9pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/Q0kzIpKkvUH00RUkM4ZesCZgSQpgI-FTSHlDNfYWrzY",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "563004.06",
            "totalSupply": "999868693975459",
            "totalSupplyFormatted": "999868693.975459",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/Db7ZUaWTThwZy7bVhjn5Dda8D3fbbAhihcxPV4m9pump"
            },
            "description": null
        }
    },
    "xmoney": {
        "contract_address": "5csfa95Xf8ebiCwP9joQ7mtC8KwFvnnejnYx5FbYpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "5csfa95Xf8ebiCwP9joQ7mtC8KwFvnnejnYx5FbYpump",
            "standard": "metaplex",
            "name": "XMONEY",
            "symbol": "XMONEY",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_5csfa95Xf8ebiCwP9joQ7mtC8KwFvnnejnYx5FbYpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSYsbxi81hHtofDgN4oSVAzy4zwB47jZNwqxx6KQwximg",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "1021892.48",
            "totalSupply": "999137134733997",
            "totalSupplyFormatted": "999137134.733997",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/5csfa95Xf8ebiCwP9joQ7mtC8KwFvnnejnYx5FbYpump"
            },
            "description": null
        }
    },
    "xnet-mobile-2": {
        "contract_address": "xNETbUB7cRb3AAu2pNG2pUwQcJ2BHcktfvSB8x1Pq6L",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "xNETbUB7cRb3AAu2pNG2pUwQcJ2BHcktfvSB8x1Pq6L",
            "standard": "metaplex",
            "name": "XNET Mobile",
            "symbol": "XNET",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_xNETbUB7cRb3AAu2pNG2pUwQcJ2BHcktfvSB8x1Pq6L",
            "decimals": "8",
            "metaplex": {
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "34151204.71",
            "totalSupply": "130731462111253528",
            "totalSupplyFormatted": "1307314621.11253528",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/XNET_Mobile",
                "website": "https://xnet.company/",
                "moralis": "https://moralis.com/chain/solana/token/price/xNETbUB7cRb3AAu2pNG2pUwQcJ2BHcktfvSB8x1Pq6L"
            },
            "description": null
        }
    },
    "yap": {
        "contract_address": "3gcdoCBQMKAFVopsQ377X7JhkcNPg9fwPY4eW46Apump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "3gcdoCBQMKAFVopsQ377X7JhkcNPg9fwPY4eW46Apump",
            "standard": "metaplex",
            "name": "yap",
            "symbol": "yap",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_3gcdoCBQMKAFVopsQ377X7JhkcNPg9fwPY4eW46Apump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmacWvZpUxgiqRKPWomnDGkWebfyKSPT7mkw4s33YApakQ",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "285102.83",
            "totalSupply": "999988868289888",
            "totalSupplyFormatted": "999988868.289888",
            "links": {
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/yapsolyap",
                "twitter": "https://twitter.com/yapsolyap",
                "website": "https://yap.capital",
                "moralis": "https://moralis.com/chain/solana/token/price/3gcdoCBQMKAFVopsQ377X7JhkcNPg9fwPY4eW46Apump"
            },
            "description": null
        }
    },
    "yapster": {
        "contract_address": "8CzPPqenpfRXvjE5DHfE3kMDgJhHwWZ1WXRzs44KsamW",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8CzPPqenpfRXvjE5DHfE3kMDgJhHwWZ1WXRzs44KsamW",
            "standard": "metaplex",
            "name": "YAPSTER",
            "symbol": "YAPSTER",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8CzPPqenpfRXvjE5DHfE3kMDgJhHwWZ1WXRzs44KsamW",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://cloud.yapster.xyz/ipfs/bafkreihlxsmhvyudbkfiyqlcyby7f75mo2kgpjsscqdccq6nhicuacn7i4",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "H3sLAWFHR2a39oj9hepKRPHLA6h1vNPwjpeH4kQsQ582",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2541665.70",
            "totalSupply": "915533846262570671",
            "totalSupplyFormatted": "915533846.262570671",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8CzPPqenpfRXvjE5DHfE3kMDgJhHwWZ1WXRzs44KsamW"
            },
            "description": null
        }
    },
    "yne": {
        "contract_address": "7D1iYWfhw2cr9yBZBFE6nZaaSUvXHqG5FizFFEZwpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "7D1iYWfhw2cr9yBZBFE6nZaaSUvXHqG5FizFFEZwpump",
            "standard": "metaplex",
            "name": "yesnoerror",
            "symbol": "YNE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_7D1iYWfhw2cr9yBZBFE6nZaaSUvXHqG5FizFFEZwpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmQn3bcZSJ8kf7ApD66HnhhAKb8AVacuLxQJYbfm7TvQEz",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "23682059.16",
            "totalSupply": "999992532950124",
            "totalSupplyFormatted": "999992532.950124",
            "links": {
                "reddit": "https://www.reddit.com",
                "twitter": "https://twitter.com/yesnoerror",
                "website": "https://pump.fun/coin/7D1iYWfhw2cr9yBZBFE6nZaaSUvXHqG5FizFFEZwpump",
                "moralis": "https://moralis.com/chain/solana/token/price/7D1iYWfhw2cr9yBZBFE6nZaaSUvXHqG5FizFFEZwpump"
            },
            "description": null
        }
    },
    "you-held": {
        "contract_address": "QpRvqVMPG4o5y5fARHR6L7aK1x5vdWPQEiEjMkVpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "QpRvqVMPG4o5y5fARHR6L7aK1x5vdWPQEiEjMkVpump",
            "standard": "metaplex",
            "name": "You Held",
            "symbol": "POV",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_QpRvqVMPG4o5y5fARHR6L7aK1x5vdWPQEiEjMkVpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmX4qHuDTHrrR2qGutwU3xvryjTg7KxJTh7jT6UVTLvRHW",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "681392.12",
            "totalSupply": "999199512436653",
            "totalSupplyFormatted": "999199512.436653",
            "links": {
                "telegram": "https://t.me/YouHeldPOV",
                "twitter": "https://twitter.com/POVyouheld",
                "website": "https://www.povyouheld.fun/",
                "moralis": "https://moralis.com/chain/solana/token/price/QpRvqVMPG4o5y5fARHR6L7aK1x5vdWPQEiEjMkVpump"
            },
            "description": null
        }
    },
    "you-looked": {
        "contract_address": "EkHr62PC6Y1axrLS7cR8YC4BZeW19mtHxQLCLMrf9vnq",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "EkHr62PC6Y1axrLS7cR8YC4BZeW19mtHxQLCLMrf9vnq",
            "standard": "metaplex",
            "name": "You Looked",
            "symbol": "CIRCLE",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_EkHr62PC6Y1axrLS7cR8YC4BZeW19mtHxQLCLMrf9vnq",
            "decimals": "3",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/nQxhYzysaPBeX58YrBWTYvCXFXB-brrmvkGLvD2tPDQ",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "8mkiNSaRe2XD9qyoUifYakc2E9VGC2Qiqo6LiDPQ92hN",
                "primarySaleHappened": 1
            },
            "fullyDilutedValue": "129270.03",
            "totalSupply": "996992379976",
            "totalSupplyFormatted": "996992379.976",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/EkHr62PC6Y1axrLS7cR8YC4BZeW19mtHxQLCLMrf9vnq"
            },
            "description": null
        }
    },
    "your-outie": {
        "contract_address": "GnDfrXWPs71J73CrfrNsuwPrR15Fu7oZfNxYRhHWpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "GnDfrXWPs71J73CrfrNsuwPrR15Fu7oZfNxYRhHWpump",
            "standard": "metaplex",
            "name": "your outie",
            "symbol": "outie",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_GnDfrXWPs71J73CrfrNsuwPrR15Fu7oZfNxYRhHWpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmZWyaqFLBzxKWpxYH9kmFJQgrN5WaoPTXBMzEudKGWmNK",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "454561.25",
            "totalSupply": "999877378133790",
            "totalSupplyFormatted": "999877378.13379",
            "links": {
                "email": "info@youroutie.xyz",
                "telegram": "https://t.me/outie_solana",
                "twitter": "https://x.com/outie_solana",
                "website": "https://www.youroutie.xyz",
                "moralis": "https://moralis.com/chain/solana/token/price/GnDfrXWPs71J73CrfrNsuwPrR15Fu7oZfNxYRhHWpump"
            },
            "description": null
        }
    },
    "yousim": {
        "contract_address": "66gsTs88mXJ5L4AtJnWqFW6H2L5YQDRy4W41y6zbpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "66gsTs88mXJ5L4AtJnWqFW6H2L5YQDRy4W41y6zbpump",
            "standard": "metaplex",
            "name": "YouSim AI",
            "symbol": "YOUSIM",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_66gsTs88mXJ5L4AtJnWqFW6H2L5YQDRy4W41y6zbpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmR2nPVCTz7NpVo5farB27wrAUv4CD6XL2wbXsSezZAgNb",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "671573.27",
            "totalSupply": "999964668639101",
            "totalSupplyFormatted": "999964668.639101",
            "links": {
                "github": "https://github.com/plastic-labs/yousim",
                "telegram": "https://t.me/yousimportal",
                "twitter": "https://twitter.com/YouSimDotAI",
                "website": "https://yousim.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/66gsTs88mXJ5L4AtJnWqFW6H2L5YQDRy4W41y6zbpump"
            },
            "description": null
        }
    },
    "zack-morris": {
        "contract_address": "8vCAUbxejdtaxn6jnX5uaQTyTZLmXALg9u1bvFCAjtx7",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8vCAUbxejdtaxn6jnX5uaQTyTZLmXALg9u1bvFCAjtx7",
            "standard": "metaplex",
            "name": "ZACK MORRIS",
            "symbol": "ZACK",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8vCAUbxejdtaxn6jnX5uaQTyTZLmXALg9u1bvFCAjtx7",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmcEgDabSjHPMS9NX8azBGzRPQ15rYgpae6UQe4oDuZ6Zb",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "446376.37",
            "totalSupply": "865481412282505",
            "totalSupplyFormatted": "865481412.282505",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/8vCAUbxejdtaxn6jnX5uaQTyTZLmXALg9u1bvFCAjtx7"
            },
            "description": null
        }
    },
    "zapcat": {
        "contract_address": "CCz5hPGJobjtVGGrEiUhHAz9qCEt1KyKxFkGBjVcjuvo",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "CCz5hPGJobjtVGGrEiUhHAz9qCEt1KyKxFkGBjVcjuvo",
            "standard": "metaplex",
            "name": "ZAPCAT",
            "symbol": "ZAPCAT",
            "logo": "https://adds-token-info-29a861f.s3.amazonaws.com/solana/CCz5hPGJobjtVGGrEiUhHAz9qCEt1KyKxFkGBjVcjuvo/0d976ee8-4f21-46a8-bd3b-ee3573ba8d4e.png",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmSpeQR8uesAiGBZ6iy8iTxyyWGiTDCmiH1duGmhvsqaV5",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "2giJJUW1wWsG44MfU9XMPt4xwDJVDTUVJhsRHhJDRZXN",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "266237.54",
            "totalSupply": "999998290830460950",
            "totalSupplyFormatted": "999998290.83046095",
            "links": {
                "telegram": "https://t.me/zapcatcoinsol",
                "moralis": "https://moralis.com/chain/solana/token/price/CCz5hPGJobjtVGGrEiUhHAz9qCEt1KyKxFkGBjVcjuvo"
            },
            "description": "It's a cat that zaps. Viral meme"
        }
    },
    "zara-ai": {
        "contract_address": "73UdJevxaNKXARgkvPHQGKuv8HCZARszuKW2LTL3pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "73UdJevxaNKXARgkvPHQGKuv8HCZARszuKW2LTL3pump",
            "standard": "metaplex",
            "name": "ZARA AI",
            "symbol": "ZARA",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_73UdJevxaNKXARgkvPHQGKuv8HCZARszuKW2LTL3pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmbXYqw4F4keQTP4WNBKLBWSRHtQCTnayv3pZbWHhiUwft",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "2129762.60",
            "totalSupply": "648459447238853",
            "totalSupplyFormatted": "648459447.238853",
            "links": {
                "discord": "https://discord.com/invite/bqp3bPX4AU",
                "telegram": "https://t.me/zarasportal",
                "twitter": "https://twitter.com/zaara_ai",
                "website": "https://zaraai.xyz",
                "moralis": "https://moralis.com/chain/solana/token/price/73UdJevxaNKXARgkvPHQGKuv8HCZARszuKW2LTL3pump"
            },
            "description": null
        }
    },
    "zebec-network": {
        "contract_address": "ZBCNpuD7YMXzTHB2fhGkGi78MNsHGLRXUhRewNRm9RU",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ZBCNpuD7YMXzTHB2fhGkGi78MNsHGLRXUhRewNRm9RU",
            "standard": "metaplex",
            "name": "Zebec Network",
            "symbol": "ZBCN",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ZBCNpuD7YMXzTHB2fhGkGi78MNsHGLRXUhRewNRm9RU",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://rlyisjrjk232bgeavinhdephdcpoa7y5kornis73fekel5z4nw3q.arweave.net/ivCJJilWt6CYgKoacZHnGJ7gfx1TotRL-ykURfc8bbc",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Bi4CFFjDnYcdySBB1oqxu6yzQMA7Rx1EoY7EBFbCX3GG",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "128199243.94",
            "totalSupply": "99999410249639437",
            "totalSupplyFormatted": "99999410249.639437",
            "links": {
                "discord": "https://discord.com/invite/fJM9cHuvvB",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/zebecprotocol",
                "twitter": "https://twitter.com/Zebec_HQ",
                "website": "https://zebec.io/",
                "moralis": "https://moralis.com/chain/solana/token/price/ZBCNpuD7YMXzTHB2fhGkGi78MNsHGLRXUhRewNRm9RU"
            },
            "description": null
        }
    },
    "zen-ai": {
        "contract_address": "8vwqxHGz1H4XxyKajr99Yxm65HjYNVtqtCNoM2yWb13e",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8vwqxHGz1H4XxyKajr99Yxm65HjYNVtqtCNoM2yWb13e",
            "standard": "metaplex",
            "name": "Zen AI",
            "symbol": "ZAI",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8vwqxHGz1H4XxyKajr99Yxm65HjYNVtqtCNoM2yWb13e",
            "decimals": "9",
            "metaplex": {
                "metadataUri": "https://gateway.irys.xyz/6zZ8bsCNg4J5PfkcyaqThuSufimd8PXwjy2rumCX9E5V",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "FMP1Gmbm5vcwjk95nPPBwsp9JCCYm5HvDzmf4uMfxcmn",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "6079883.62",
            "totalSupply": "3057261192803256381",
            "totalSupplyFormatted": "3057261192.803256381",
            "links": {
                "telegram": "https://t.me/theZencoin",
                "twitter": "https://twitter.com/zenaiagent",
                "website": "https://zencoin.ai/",
                "moralis": "https://moralis.com/chain/solana/token/price/8vwqxHGz1H4XxyKajr99Yxm65HjYNVtqtCNoM2yWb13e"
            },
            "description": null
        }
    },
    "zerebro": {
        "contract_address": "8x5VqbHA8D7NkD52uNuS5nnt3PwA8pLD34ymskeSo2Wn",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "8x5VqbHA8D7NkD52uNuS5nnt3PwA8pLD34ymskeSo2Wn",
            "standard": "metaplex",
            "name": "zerebro",
            "symbol": "ZEREBRO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_8x5VqbHA8D7NkD52uNuS5nnt3PwA8pLD34ymskeSo2Wn",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/Qmaqr4jU97zckiTbRm7A1vV4354PXYLZrHE75CwMJH1Vsa",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "51700483.45",
            "totalSupply": "999968984772238",
            "totalSupplyFormatted": "999968984.772238",
            "links": {
                "telegram": "https://t.me/zerebro0x",
                "twitter": "https://twitter.com/0xzerebro",
                "website": "https://zerebro.org",
                "moralis": "https://moralis.com/chain/solana/token/price/8x5VqbHA8D7NkD52uNuS5nnt3PwA8pLD34ymskeSo2Wn"
            },
            "description": null
        }
    },
    "zeta": {
        "contract_address": "ZEXy1pqteRu3n13kdyh4LwPQknkFk3GzmMYMuNadWPo",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ZEXy1pqteRu3n13kdyh4LwPQknkFk3GzmMYMuNadWPo",
            "standard": "metaplex",
            "name": "Zeta",
            "symbol": "ZEX",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ZEXy1pqteRu3n13kdyh4LwPQknkFk3GzmMYMuNadWPo",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://raw.githubusercontent.com/zetamarkets/brand/master/token/zex.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "Bs5XaFx9wS8N5ir4QtTb2exhFMKQdZUmjga1peT2DBXt",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "52865912.16",
            "totalSupply": "999998338410898",
            "totalSupplyFormatted": "999998338.410898",
            "links": {
                "discord": "https://discord.com/invite/SacGBFKNzQ",
                "github": "https://github.com/zetamarkets",
                "reddit": "https://www.reddit.com",
                "telegram": "https://t.me/realzetamarkets",
                "twitter": "https://twitter.com/ZetaMarkets",
                "website": "https://www.zeta.markets/",
                "moralis": "https://moralis.com/chain/solana/token/price/ZEXy1pqteRu3n13kdyh4LwPQknkFk3GzmMYMuNadWPo"
            },
            "description": null
        }
    },
    "zeus-network": {
        "contract_address": "ZEUS1aR7aX8DFFJf5QjWj2ftDDdNTroMNGo8YoQm3Gq",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "ZEUS1aR7aX8DFFJf5QjWj2ftDDdNTroMNGo8YoQm3Gq",
            "standard": "metaplex",
            "name": "ZEUS",
            "symbol": "ZEUS",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_ZEUS1aR7aX8DFFJf5QjWj2ftDDdNTroMNGo8YoQm3Gq",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://raw.githubusercontent.com/ZeusNetworkHQ/zeus-metadata/master/metadata.json",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "9qSUgjVjsur7TN1x4oFYDp8KSS1FGBDX25nAp7kZUenE",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "294817087.65",
            "totalSupply": "999997481999576",
            "totalSupplyFormatted": "999997481.999576",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/ZEUS1aR7aX8DFFJf5QjWj2ftDDdNTroMNGo8YoQm3Gq"
            },
            "description": null
        }
    },
    "zods": {
        "contract_address": "J1ow1c3ExcJYQmgNFRPfCp1LMYRf6P3A33isDcBmpump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "J1ow1c3ExcJYQmgNFRPfCp1LMYRf6P3A33isDcBmpump",
            "standard": "metaplex",
            "name": "ZODs",
            "symbol": "ZODs",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_J1ow1c3ExcJYQmgNFRPfCp1LMYRf6P3A33isDcBmpump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://cf-ipfs.com/ipfs/QmUoAJdGtR6TpJoTjTFarwigQQtmYDSMfT7doSKn9TjEKM",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "301178.76",
            "totalSupply": "823633164582217",
            "totalSupplyFormatted": "823633164.582217",
            "links": {
                "moralis": "https://moralis.com/chain/solana/token/price/J1ow1c3ExcJYQmgNFRPfCp1LMYRf6P3A33isDcBmpump"
            },
            "description": null
        }
    },
    "zoo-world": {
        "contract_address": "BGqXaVjjQy4h3qgqgzT9TrzyAGqHmBKhgQwW1VFmeme",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "BGqXaVjjQy4h3qgqgzT9TrzyAGqHmBKhgQwW1VFmeme",
            "standard": "metaplex",
            "name": "Zoo World",
            "symbol": "ZOO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_BGqXaVjjQy4h3qgqgzT9TrzyAGqHmBKhgQwW1VFmeme",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmUTJzNs5pKe5qEPNRJAZSH6y5Mk7mnfV9GhTbp2BwZ3Ue",
                "masterEdition": false,
                "isMutable": true,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "3oWX3hmb1NFLYjur6hXTSvrhsnGvzRdD42MjDQ5fds3h",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "703071.73",
            "totalSupply": "999999617923716",
            "totalSupplyFormatted": "999999617.923716",
            "links": {
                "twitter": "https://twitter.com/zoodotworld",
                "website": "https://www.zoo.world",
                "moralis": "https://moralis.com/chain/solana/token/price/BGqXaVjjQy4h3qgqgzT9TrzyAGqHmBKhgQwW1VFmeme"
            },
            "description": null
        }
    },
    "zyro-2": {
        "contract_address": "4HWX6k9ZoutJ1oyZUPHogERiLGNZJgrmcVwF6eS9pump",
        "chain": "solana",
        "source_code_or_metadata": {
            "mint": "4HWX6k9ZoutJ1oyZUPHogERiLGNZJgrmcVwF6eS9pump",
            "standard": "metaplex",
            "name": "ZYRO",
            "symbol": "ZYRO",
            "logo": "https://d23exngyjlavgo.cloudfront.net/solana_4HWX6k9ZoutJ1oyZUPHogERiLGNZJgrmcVwF6eS9pump",
            "decimals": "6",
            "metaplex": {
                "metadataUri": "https://ipfs.io/ipfs/QmYB3gnJmyh3MKk7EPnPNcdARWuQEUcNn4UVzrJKpAAdcX",
                "masterEdition": false,
                "isMutable": false,
                "sellerFeeBasisPoints": 0,
                "updateAuthority": "TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM",
                "primarySaleHappened": 0
            },
            "fullyDilutedValue": "216758.28",
            "totalSupply": "999881372651910",
            "totalSupplyFormatted": "999881372.65191",
            "links": {
                "telegram": "https://t.me/ZyroTerminal",
                "twitter": "https://twitter.com/ZyroSolana",
                "website": "https://www.zyrosolana.com",
                "moralis": "https://moralis.com/chain/solana/token/price/4HWX6k9ZoutJ1oyZUPHogERiLGNZJgrmcVwF6eS9pump"
            },
            "description": null
        }
    }
}